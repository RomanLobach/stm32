
F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800467c  0800467c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800467c  0800467c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800467c  0800467c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000208  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012e70  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002449  00000000  00000000  00032efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001160  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc4  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b42e  00000000  00000000  0003726c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015b6a  00000000  00000000  0005269a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a4209  00000000  00000000  00068204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a8c  00000000  00000000  0010c410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00110e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800462c 	.word	0x0800462c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800462c 	.word	0x0800462c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd52 	bl	8000c74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f824 	bl	800021c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9c0 	bl	8000558 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001d8:	f000 f8ea 	bl	80003b0 <MX_TIM16_Init>
  MX_I2C1_Init();
 80001dc:	f000 f870 	bl	80002c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e0:	f000 f8ae 	bl	8000340 <MX_SPI1_Init>
  MX_TIM17_Init();
 80001e4:	f000 f90e 	bl	8000404 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f986 	bl	80004f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setModeLed();
 80001ec:	f000 fa42 	bl	8000674 <setModeLed>
  while(1)
  {
	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2108      	movs	r1, #8
 80001f4:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0x50>)
 80001f6:	f001 f8a1 	bl	800133c <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80001fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001fe:	f000 fd9f 	bl	8000d40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2108      	movs	r1, #8
 8000206:	4804      	ldr	r0, [pc, #16]	; (8000218 <main+0x50>)
 8000208:	f001 f898 	bl	800133c <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 800020c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000210:	f000 fd96 	bl	8000d40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 8000214:	e7ec      	b.n	80001f0 <main+0x28>
 8000216:	bf00      	nop
 8000218:	48000400 	.word	0x48000400

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f004 f9d1 	bl	80045d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 031c 	add.w	r3, r7, #28
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]
 800024e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000250:	2302      	movs	r3, #2
 8000252:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000258:	2310      	movs	r3, #16
 800025a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025c:	2300      	movs	r3, #0
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000264:	4618      	mov	r0, r3
 8000266:	f001 f9a7 	bl	80015b8 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000270:	f000 fb18 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000288:	f107 031c 	add.w	r3, r7, #28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f002 f9d0 	bl	8002634 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029a:	f000 fb03 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800029e:	2320      	movs	r3, #32
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fbf9 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b4:	f000 faf6 	bl	80008a4 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <MX_I2C1_Init+0x74>)
 80002c6:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <MX_I2C1_Init+0x78>)
 80002c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_I2C1_Init+0x74>)
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <MX_I2C1_Init+0x7c>)
 80002ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_I2C1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_I2C1_Init+0x74>)
 80002d8:	2201      	movs	r2, #1
 80002da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_I2C1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_I2C1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_I2C1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <MX_I2C1_Init+0x74>)
 80002fc:	f001 f836 	bl	800136c <HAL_I2C_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000306:	f000 facd 	bl	80008a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800030a:	2100      	movs	r1, #0
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <MX_I2C1_Init+0x74>)
 800030e:	f001 f8bc 	bl	800148a <HAL_I2CEx_ConfigAnalogFilter>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000318:	f000 fac4 	bl	80008a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800031c:	2100      	movs	r1, #0
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_I2C1_Init+0x74>)
 8000320:	f001 f8fe 	bl	8001520 <HAL_I2CEx_ConfigDigitalFilter>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 fabb 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000034 	.word	0x20000034
 8000338:	40005400 	.word	0x40005400
 800033c:	2000090e 	.word	0x2000090e

08000340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <MX_SPI1_Init+0x6c>)
 8000348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_SPI1_Init+0x68>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000358:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800035c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800035e:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI1_Init+0x68>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_SPI1_Init+0x68>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000384:	2207      	movs	r2, #7
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_SPI1_Init+0x68>)
 800038a:	2200      	movs	r2, #0
 800038c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_SPI1_Init+0x68>)
 8000396:	f002 fca9 	bl	8002cec <HAL_SPI_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80003a0:	f000 fa80 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000088 	.word	0x20000088
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_TIM16_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003bc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003e0:	4806      	ldr	r0, [pc, #24]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003e2:	f002 fe3a 	bl	800305a <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80003ec:	f000 fa5a 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80003f0:	4802      	ldr	r0, [pc, #8]	; (80003fc <MX_TIM16_Init+0x4c>)
 80003f2:	f002 fe89 	bl	8003108 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000ec 	.word	0x200000ec
 8000400:	40014400 	.word	0x40014400

08000404 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b092      	sub	sp, #72	; 0x48
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800040a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800041e:	463b      	mov	r3, r7
 8000420:	222c      	movs	r2, #44	; 0x2c
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f004 f8d4 	bl	80045d2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <MX_TIM17_Init+0xec>)
 800042c:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <MX_TIM17_Init+0xf0>)
 800042e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000430:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800043c:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <MX_TIM17_Init+0xec>)
 800043e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000442:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <MX_TIM17_Init+0xec>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000456:	4826      	ldr	r0, [pc, #152]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000458:	f002 fdff 	bl	800305a <HAL_TIM_Base_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000462:	f000 fa1f 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000466:	4822      	ldr	r0, [pc, #136]	; (80004f0 <MX_TIM17_Init+0xec>)
 8000468:	f002 feaa 	bl	80031c0 <HAL_TIM_PWM_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000472:	f000 fa17 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000476:	2360      	movs	r3, #96	; 0x60
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047e:	2300      	movs	r3, #0
 8000480:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000482:	2300      	movs	r3, #0
 8000484:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000496:	2200      	movs	r2, #0
 8000498:	4619      	mov	r1, r3
 800049a:	4815      	ldr	r0, [pc, #84]	; (80004f0 <MX_TIM17_Init+0xec>)
 800049c:	f003 f810 	bl	80034c0 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80004a6:	f000 f9fd 	bl	80008a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	4619      	mov	r1, r3
 80004d0:	4807      	ldr	r0, [pc, #28]	; (80004f0 <MX_TIM17_Init+0xec>)
 80004d2:	f003 fc4f 	bl	8003d74 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80004dc:	f000 f9e2 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <MX_TIM17_Init+0xec>)
 80004e2:	f000 fad3 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 80004e6:	bf00      	nop
 80004e8:	3748      	adds	r7, #72	; 0x48
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000138 	.word	0x20000138
 80004f4:	40014800 	.word	0x40014800

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000528:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800053e:	f003 fcaf 	bl	8003ea0 <HAL_UART_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000548:	f000 f9ac 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000184 	.word	0x20000184
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <MX_GPIO_Init+0xf0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a35      	ldr	r2, [pc, #212]	; (8000648 <MX_GPIO_Init+0xf0>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b33      	ldr	r3, [pc, #204]	; (8000648 <MX_GPIO_Init+0xf0>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <MX_GPIO_Init+0xf0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <MX_GPIO_Init+0xf0>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0xf0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xf0>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a29      	ldr	r2, [pc, #164]	; (8000648 <MX_GPIO_Init+0xf0>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_GPIO_Init+0xf0>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	210b      	movs	r1, #11
 80005ba:	4824      	ldr	r0, [pc, #144]	; (800064c <MX_GPIO_Init+0xf4>)
 80005bc:	f000 febe 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 feb7 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_2_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin;
 80005ce:	230b      	movs	r3, #11
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <MX_GPIO_Init+0xf4>)
 80005e6:	f000 fd1f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_3_Pin LED_R_4_Pin LED_R_5_Pin */
  GPIO_InitStruct.Pin = LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin;
 80005ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 fd0f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_SET_Pin;
 800060a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f000 fd01 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000626:	2310      	movs	r3, #16
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4619      	mov	r1, r3
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xf4>)
 800063a:	f000 fcf5 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400

08000650 <resetModeLed>:

/* USER CODE BEGIN 4 */
void resetModeLed(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000654:	2200      	movs	r2, #0
 8000656:	2103      	movs	r1, #3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <resetModeLed+0x20>)
 800065a:	f000 fe6f 	bl	800133c <HAL_GPIO_WritePin>
					GPIOB,
					LED_R_1_Pin|LED_R_2_Pin,
					GPIO_PIN_RESET
				   );
  HAL_GPIO_WritePin(
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fe68 	bl	800133c <HAL_GPIO_WritePin>
					GPIOA,
					LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	48000400 	.word	0x48000400

08000674 <setModeLed>:

void setModeLed(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(USER_MODE == 1)
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <setModeLed+0x84>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d106      	bne.n	800068e <setModeLed+0x1a>
	{
	  resetModeLed();
 8000680:	f7ff ffe6 	bl	8000650 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	481c      	ldr	r0, [pc, #112]	; (80006fc <setModeLed+0x88>)
 800068a:	f000 fe57 	bl	800133c <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 2)
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <setModeLed+0x84>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d106      	bne.n	80006a4 <setModeLed+0x30>
	{
	  resetModeLed();
 8000696:	f7ff ffdb 	bl	8000650 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_2_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4817      	ldr	r0, [pc, #92]	; (80006fc <setModeLed+0x88>)
 80006a0:	f000 fe4c 	bl	800133c <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 3)
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <setModeLed+0x84>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d108      	bne.n	80006be <setModeLed+0x4a>
	{
	  resetModeLed();
 80006ac:	f7ff ffd0 	bl	8000650 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 fe3f 	bl	800133c <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 4)
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <setModeLed+0x84>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d108      	bne.n	80006d8 <setModeLed+0x64>
	{
	  resetModeLed();
 80006c6:	f7ff ffc3 	bl	8000650 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_4_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f000 fe32 	bl	800133c <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 5)
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <setModeLed+0x84>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d108      	bne.n	80006f2 <setModeLed+0x7e>
	{
	  resetModeLed();
 80006e0:	f7ff ffb6 	bl	8000650 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_5_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f000 fe25 	bl	800133c <HAL_GPIO_WritePin>
	}
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	48000400 	.word	0x48000400

08000700 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	if(htim == &htim16)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a58      	ldr	r2, [pc, #352]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	f040 80a8 	bne.w	8000862 <HAL_TIM_PeriodElapsedCallback+0x162>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOB, BTN_R_Pin);
 8000712:	2110      	movs	r1, #16
 8000714:	4856      	ldr	r0, [pc, #344]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000716:	f000 fdf9 	bl	800130c <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b55      	ldr	r3, [pc, #340]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000720:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOA, BTN_B_Pin);
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fdef 	bl	800130c <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b51      	ldr	r3, [pc, #324]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000734:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 8000736:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000738:	881a      	ldrh	r2, [r3, #0]
 800073a:	4b50      	ldr	r3, [pc, #320]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d027      	beq.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x92>
		{

			++BTN_RED_press_slowCount;
 8000742:	4b4f      	ldr	r3, [pc, #316]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800074c:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_press_slowCount > BTN_DEBOUNCE_TIMER)
 800074e:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	dd1a      	ble.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_press_slowCount = 0;
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800075e:	2200      	movs	r2, #0
 8000760:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 8000762:	4b49      	ldr	r3, [pc, #292]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d010      	beq.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x92>
				{
					USER_MODE = USER_MODE + 1;
 8000770:	4b46      	ldr	r3, [pc, #280]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a45      	ldr	r2, [pc, #276]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000778:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 6)
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d102      	bne.n	8000788 <HAL_TIM_PeriodElapsedCallback+0x88>
					{

						USER_MODE = 1;
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000784:	2201      	movs	r2, #1
 8000786:	601a      	str	r2, [r3, #0]

					}


					setModeLed();
 8000788:	f7ff ff74 	bl	8000674 <setModeLed>
					BTN_RED_isPressed = true;
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d027      	beq.n	80007ee <HAL_TIM_PeriodElapsedCallback+0xee>
		{

			++BTN_BLUE_press_slowCount;
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80007a8:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_press_slowCount > BTN_DEBOUNCE_TIMER)
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dd1a      	ble.n	80007ee <HAL_TIM_PeriodElapsedCallback+0xee>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_press_slowCount = 0;
 80007b8:	4b36      	ldr	r3, [pc, #216]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f083 0301 	eor.w	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d010      	beq.n	80007ee <HAL_TIM_PeriodElapsedCallback+0xee>
				{
					USER_MODE = USER_MODE - 1;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007d4:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 0)
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0xe4>
					{

						USER_MODE = 5;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007e0:	2205      	movs	r2, #5
 80007e2:	601a      	str	r2, [r3, #0]

					}

					setModeLed();
 80007e4:	f7ff ff46 	bl	8000674 <setModeLed>
					BTN_BLUE_isPressed = true;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d116      	bne.n	8000828 <HAL_TIM_PeriodElapsedCallback+0x128>
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d012      	beq.n	8000828 <HAL_TIM_PeriodElapsedCallback+0x128>
		{

			++BTN_RED_release_slowCount;
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800080c:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_release_slowCount > BTN_DEBOUNCE_TIMER)
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	dd05      	ble.n	8000828 <HAL_TIM_PeriodElapsedCallback+0x128>
			{

				BTN_RED_isPressed = false;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
				BTN_RED_release_slowCount = 0;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000824:	2200      	movs	r2, #0
 8000826:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800082a:	881a      	ldrh	r2, [r3, #0]
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d116      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x162>
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d012      	beq.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x162>
		{

			++BTN_BLUE_release_slowCount;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000846:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	dd05      	ble.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x162>
			{

				BTN_BLUE_isPressed = false;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_release_slowCount = 0;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800085e:	2200      	movs	r2, #0
 8000860:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000ec 	.word	0x200000ec
 8000870:	48000400 	.word	0x48000400
 8000874:	2000020c 	.word	0x2000020c
 8000878:	20000214 	.word	0x20000214
 800087c:	20000008 	.word	0x20000008
 8000880:	2000020e 	.word	0x2000020e
 8000884:	20000004 	.word	0x20000004
 8000888:	20000212 	.word	0x20000212
 800088c:	20000000 	.word	0x20000000
 8000890:	2000000a 	.word	0x2000000a
 8000894:	20000216 	.word	0x20000216
 8000898:	2000021a 	.word	0x2000021a
 800089c:	20000210 	.word	0x20000210
 80008a0:	20000218 	.word	0x20000218

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_I2C_MspInit+0x7c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d127      	bne.n	800096e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_I2C_MspInit+0x80>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_I2C_MspInit+0x80>)
 8000924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_I2C_MspInit+0x80>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23c0      	movs	r3, #192	; 0xc0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	2304      	movs	r3, #4
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <HAL_I2C_MspInit+0x84>)
 8000952:	f000 fb69 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_I2C_MspInit+0x80>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_I2C_MspInit+0x80>)
 800095c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_I2C_MspInit+0x80>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40005400 	.word	0x40005400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_SPI_MspInit+0x8c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d130      	bne.n	8000a08 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	6153      	str	r3, [r2, #20]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_SPI_MspInit+0x90>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23f0      	movs	r3, #240	; 0xf0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e6:	2305      	movs	r3, #5
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fb18 	bl	8001028 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 14, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	210e      	movs	r1, #14
 80009fc:	2023      	movs	r0, #35	; 0x23
 80009fe:	f000 fa9e 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a02:	2023      	movs	r0, #35	; 0x23
 8000a04:	f000 fab7 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013000 	.word	0x40013000
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <HAL_TIM_Base_MspInit+0x68>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d114      	bne.n	8000a54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	2019      	movs	r0, #25
 8000a48:	f000 fa79 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f000 fa92 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000a52:	e010      	b.n	8000a76 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_TIM_Base_MspInit+0x70>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_TIM_Base_MspInit+0x6c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40014400 	.word	0x40014400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40014800 	.word	0x40014800

08000a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_TIM_MspPostInit+0x64>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11b      	bne.n	8000ae6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_TIM_MspPostInit+0x68>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_TIM_MspPostInit+0x68>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_TIM_MspPostInit+0x68>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB5     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = TIM17_PWM_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM17_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_TIM_MspPostInit+0x6c>)
 8000ae2:	f000 faa1 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40014800 	.word	0x40014800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d128      	bne.n	8000b70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	6153      	str	r3, [r2, #20]
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b4e:	230f      	movs	r3, #15
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f000 fa5c 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f898 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bda:	f002 fb52 	bl	8003282 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000ec 	.word	0x200000ec

08000be8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <SPI1_IRQHandler+0x10>)
 8000bee:	f002 f921 	bl	8002e34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000088 	.word	0x20000088

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f003 fcc9 	bl	80045e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fab9 	bl	80001c8 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c58:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c64:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 8000c68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c6c:	20000220 	.word	0x20000220

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f94f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe10 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f967 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 f92f 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000014 	.word	0x20000014
 8000cfc:	20000010 	.word	0x20000010

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000014 	.word	0x20000014
 8000d24:	2000021c 	.word	0x2000021c

08000d28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000021c 	.word	0x2000021c

08000d40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000014 	.word	0x20000014

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d005      	beq.n	8000fcc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e027      	b.n	800101c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 020e 	bic.w	r2, r2, #14
 8000fda:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
    } 
  }
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e14e      	b.n	80012d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8140 	beq.w	80012d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 809a 	beq.w	80012d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <HAL_GPIO_Init+0x2cc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x2cc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x2cc>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011de:	d013      	beq.n	8001208 <HAL_GPIO_Init+0x1e0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_GPIO_Init+0x2d4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00d      	beq.n	8001204 <HAL_GPIO_Init+0x1dc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a45      	ldr	r2, [pc, #276]	; (8001300 <HAL_GPIO_Init+0x2d8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x1d8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <HAL_GPIO_Init+0x2dc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d101      	bne.n	80011fc <HAL_GPIO_Init+0x1d4>
 80011f8:	2303      	movs	r3, #3
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e004      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001200:	2302      	movs	r3, #2
 8001202:	e002      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001208:	2300      	movs	r3, #0
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	f002 0203 	and.w	r2, r2, #3
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	4093      	lsls	r3, r2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121a:	4937      	ldr	r1, [pc, #220]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001276:	4a24      	ldr	r2, [pc, #144]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_GPIO_Init+0x2e0>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f aea9 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800
 8001304:	48000c00 	.word	0x48000c00
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e081      	b.n	8001482 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fab2 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d104      	bne.n	8001406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69d9      	ldr	r1, [r3, #28]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	d138      	bne.n	8001512 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e032      	b.n	8001514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2224      	movs	r2, #36	; 0x24
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001512:	2302      	movs	r3, #2
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d139      	bne.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001540:	2302      	movs	r3, #2
 8001542:	e033      	b.n	80015ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001572:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015aa:	2302      	movs	r3, #2
  }
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015be:	af00      	add	r7, sp, #0
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	f001 b823 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 817d 	beq.w	80018ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f4:	4bbc      	ldr	r3, [pc, #752]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d00c      	beq.n	800161a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001600:	4bb9      	ldr	r3, [pc, #740]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d15c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x10e>
 800160c:	4bb6      	ldr	r3, [pc, #728]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d155      	bne.n	80016c6 <HAL_RCC_OscConfig+0x10e>
 800161a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800162e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_RCC_OscConfig+0x94>
 8001646:	4ba8      	ldr	r3, [pc, #672]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	e015      	b.n	8001678 <HAL_RCC_OscConfig+0xc0>
 800164c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001650:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001664:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001668:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001674:	4b9c      	ldr	r3, [pc, #624]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001680:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001684:	fa92 f2a2 	rbit	r2, r2
 8001688:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800168c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001690:	fab2 f282 	clz	r2, r2
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f042 0220 	orr.w	r2, r2, #32
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	f002 021f 	and.w	r2, r2, #31
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f202 	lsl.w	r2, r1, r2
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 811f 	beq.w	80018ec <HAL_RCC_OscConfig+0x334>
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8116 	bne.w	80018ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f000 bfaf 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x12e>
 80016d8:	4b83      	ldr	r3, [pc, #524]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a82      	ldr	r2, [pc, #520]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e036      	b.n	8001754 <HAL_RCC_OscConfig+0x19c>
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x158>
 80016f6:	4b7c      	ldr	r3, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7b      	ldr	r2, [pc, #492]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a78      	ldr	r2, [pc, #480]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e021      	b.n	8001754 <HAL_RCC_OscConfig+0x19c>
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x184>
 8001722:	4b71      	ldr	r3, [pc, #452]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a70      	ldr	r2, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6e      	ldr	r3, [pc, #440]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6d      	ldr	r2, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x19c>
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a66      	ldr	r2, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	f023 020f 	bic.w	r2, r3, #15
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	495f      	ldr	r1, [pc, #380]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 800176a:	4313      	orrs	r3, r2
 800176c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d059      	beq.n	8001832 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fad3 	bl	8000d28 <HAL_GetTick>
 8001782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff face 	bl	8000d28 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d902      	bls.n	800179e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	f000 bf43 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x218>
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e015      	b.n	80017fc <HAL_RCC_OscConfig+0x244>
 80017d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001800:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001804:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001808:	fa92 f2a2 	rbit	r2, r2
 800180c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001810:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ab      	beq.n	8001788 <HAL_RCC_OscConfig+0x1d0>
 8001830:	e05d      	b.n	80018ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fa79 	bl	8000d28 <HAL_GetTick>
 8001836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fa74 	bl	8000d28 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d902      	bls.n	8001852 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	f000 bee9 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 8001852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001856:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001866:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x2cc>
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	e015      	b.n	80018b0 <HAL_RCC_OscConfig+0x2f8>
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCC_OscConfig+0x330>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018bc:	fa92 f2a2 	rbit	r2, r2
 80018c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018c8:	fab2 f282 	clz	r2, r2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f002 021f 	and.w	r2, r2, #31
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ab      	bne.n	800183c <HAL_RCC_OscConfig+0x284>
 80018e4:	e003      	b.n	80018ee <HAL_RCC_OscConfig+0x336>
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 817d 	beq.w	8001bfe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001904:	4ba6      	ldr	r3, [pc, #664]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001910:	4ba3      	ldr	r3, [pc, #652]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d172      	bne.n	8001a02 <HAL_RCC_OscConfig+0x44a>
 800191c:	4ba0      	ldr	r3, [pc, #640]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d16c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x44a>
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800193a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x3a0>
 8001952:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e013      	b.n	8001980 <HAL_RCC_OscConfig+0x3c8>
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800196a:	2302      	movs	r3, #2
 800196c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001970:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800197c:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2202      	movs	r2, #2
 8001982:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001986:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800198a:	fa92 f2a2 	rbit	r2, r2
 800198e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001992:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x410>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 be2e 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	21f8      	movs	r1, #248	; 0xf8
 80019de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019e6:	fa91 f1a1 	rbit	r1, r1
 80019ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019f2:	fab1 f181 	clz	r1, r1
 80019f6:	b2c9      	uxtb	r1, r1
 80019f8:	408b      	lsls	r3, r1
 80019fa:	4969      	ldr	r1, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a00:	e0fd      	b.n	8001bfe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8088 	beq.w	8001b24 <HAL_RCC_OscConfig+0x56c>
 8001a14:	2301      	movs	r3, #1
 8001a16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f972 	bl	8000d28 <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f96d 	bl	8000d28 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d902      	bls.n	8001a60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f000 bde2 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e013      	b.n	8001ab8 <HAL_RCC_OscConfig+0x500>
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001aa8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001abe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ac2:	fa92 f2a2 	rbit	r2, r2
 8001ac6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001aca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0220 	orr.w	r2, r2, #32
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0af      	beq.n	8001a4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	21f8      	movs	r1, #248	; 0xf8
 8001b00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b08:	fa91 f1a1 	rbit	r1, r1
 8001b0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b14:	fab1 f181 	clz	r1, r1
 8001b18:	b2c9      	uxtb	r1, r1
 8001b1a:	408b      	lsls	r3, r1
 8001b1c:	4920      	ldr	r1, [pc, #128]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
 8001b22:	e06c      	b.n	8001bfe <HAL_RCC_OscConfig+0x646>
 8001b24:	2301      	movs	r3, #1
 8001b26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f8ea 	bl	8000d28 <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f8e5 	bl	8000d28 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d902      	bls.n	8001b70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f000 bd5a 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d104      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5ec>
 8001b9a:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <HAL_RCC_OscConfig+0x5e8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_OscConfig+0x614>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bc8:	4bc8      	ldr	r3, [pc, #800]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bde:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ad      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8110 	beq.w	8001e34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d079      	beq.n	8001d18 <HAL_RCC_OscConfig+0x760>
 8001c24:	2301      	movs	r3, #1
 8001c26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4bab      	ldr	r3, [pc, #684]	; (8001ef0 <HAL_RCC_OscConfig+0x938>)
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f86b 	bl	8000d28 <HAL_GetTick>
 8001c52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f866 	bl	8000d28 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d902      	bls.n	8001c6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f000 bcdb 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc8:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	6019      	str	r1, [r3, #0]
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f1a3 	rbit	r1, r3
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cee:	6019      	str	r1, [r3, #0]
  return result;
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0a0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x6a0>
 8001d16:	e08d      	b.n	8001e34 <HAL_RCC_OscConfig+0x87c>
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d3a:	601a      	str	r2, [r3, #0]
  return result;
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x938>)
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ffe5 	bl	8000d28 <HAL_GetTick>
 8001d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe ffe0 	bl	8000d28 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d902      	bls.n	8001d7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f000 bc55 	b.w	8002624 <HAL_RCC_OscConfig+0x106c>
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dca:	2202      	movs	r2, #2
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001de4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001df2:	2102      	movs	r1, #2
 8001df4:	6019      	str	r1, [r3, #0]
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f1a3 	rbit	r1, r3
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e0c:	6019      	str	r1, [r3, #0]
  return result;
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d197      	bne.n	8001d64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 81a1 	beq.w	800218c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d116      	bne.n	8001e8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x93c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11a      	bne.n	8001ecc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x93c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_RCC_OscConfig+0x93c>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe ff41 	bl	8000d28 <HAL_GetTick>
 8001ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	e009      	b.n	8001ec0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7fe ff3c 	bl	8000d28 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e3b1      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x93c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x940>
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <HAL_RCC_OscConfig+0x934>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e03c      	b.n	8001f64 <HAL_RCC_OscConfig+0x9ac>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	10908120 	.word	0x10908120
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x96a>
 8001f08:	4bc1      	ldr	r3, [pc, #772]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4ac0      	ldr	r2, [pc, #768]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4bbe      	ldr	r3, [pc, #760]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4abd      	ldr	r2, [pc, #756]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e020      	b.n	8001f64 <HAL_RCC_OscConfig+0x9ac>
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x994>
 8001f32:	4bb7      	ldr	r3, [pc, #732]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4ab6      	ldr	r2, [pc, #728]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4bb4      	ldr	r3, [pc, #720]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4ab3      	ldr	r2, [pc, #716]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x9ac>
 8001f4c:	4bb0      	ldr	r3, [pc, #704]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4aaf      	ldr	r2, [pc, #700]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4bad      	ldr	r3, [pc, #692]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4aac      	ldr	r2, [pc, #688]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8081 	beq.w	8002078 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fed7 	bl	8000d28 <HAL_GetTick>
 8001f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7fe fed2 	bl	8000d28 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e345      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fde:	601a      	str	r2, [r3, #0]
  return result;
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fe8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0xa4c>
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0xa74>
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800200c:	2202      	movs	r2, #2
 800200e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fa93 f2a3 	rbit	r2, r3
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002030:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002034:	2102      	movs	r1, #2
 8002036:	6011      	str	r1, [r2, #0]
 8002038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800203c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	fa92 f1a2 	rbit	r1, r2
 8002046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800204a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800204e:	6011      	str	r1, [r2, #0]
  return result;
 8002050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002054:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f002 021f 	and.w	r2, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d084      	beq.n	8001f80 <HAL_RCC_OscConfig+0x9c8>
 8002076:	e07f      	b.n	8002178 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7fe fe56 	bl	8000d28 <HAL_GetTick>
 800207c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fe51 	bl	8000d28 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e2c4      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020a2:	2202      	movs	r2, #2
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020c6:	2202      	movs	r2, #2
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020e0:	601a      	str	r2, [r3, #0]
  return result;
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_OscConfig+0xb4e>
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	e013      	b.n	800212e <HAL_RCC_OscConfig+0xb76>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002132:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002136:	2102      	movs	r1, #2
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800213e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800214c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002150:	6011      	str	r1, [r2, #0]
  return result;
 8002152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002156:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d184      	bne.n	8002082 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002178:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8242 	beq.w	8002622 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_RCC_OscConfig+0xc58>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	f000 8213 	beq.w	80025d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	f040 8162 	bne.w	8002482 <HAL_RCC_OscConfig+0xeca>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021e2:	601a      	str	r2, [r3, #0]
  return result;
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	461a      	mov	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fd90 	bl	8000d28 <HAL_GetTick>
 8002208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	e00c      	b.n	8002228 <HAL_RCC_OscConfig+0xc70>
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fd88 	bl	8000d28 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1fd      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002256:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0xcba>
 800226c:	4bb0      	ldr	r3, [pc, #704]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e027      	b.n	80022c2 <HAL_RCC_OscConfig+0xd0a>
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800227a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0220 	orr.w	r2, r2, #32
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d182      	bne.n	8002214 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	430b      	orrs	r3, r1
 8002330:	497f      	ldr	r1, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800233e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800235a:	601a      	str	r2, [r3, #0]
  return result;
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002364:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fcd4 	bl	8000d28 <HAL_GetTick>
 8002380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002384:	e009      	b.n	800239a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe fccf 	bl	8000d28 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e144      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023be:	601a      	str	r2, [r3, #0]
  return result;
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe2c>
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e027      	b.n	8002434 <HAL_RCC_OscConfig+0xe7c>
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002438:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800243c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002440:	6011      	str	r1, [r2, #0]
 8002442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002446:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	fa92 f1a2 	rbit	r1, r2
 8002450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002454:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002458:	6011      	str	r1, [r2, #0]
  return result;
 800245a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d082      	beq.n	8002386 <HAL_RCC_OscConfig+0xdce>
 8002480:	e0cf      	b.n	8002622 <HAL_RCC_OscConfig+0x106a>
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800248a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024a6:	601a      	str	r2, [r3, #0]
  return result;
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	461a      	mov	r2, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fc2e 	bl	8000d28 <HAL_GetTick>
 80024cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fc29 	bl	8000d28 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e09e      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002514:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d104      	bne.n	8002534 <HAL_RCC_OscConfig+0xf7c>
 800252a:	4b01      	ldr	r3, [pc, #4]	; (8002530 <HAL_RCC_OscConfig+0xf78>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e029      	b.n	8002584 <HAL_RCC_OscConfig+0xfcc>
 8002530:	40021000 	.word	0x40021000
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x1078>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002588:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800258c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002596:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fa92 f1a2 	rbit	r1, r2
 80025a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025a8:	6011      	str	r1, [r2, #0]
  return result;
 80025aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f002 021f 	and.w	r2, r2, #31
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d180      	bne.n	80024d2 <HAL_RCC_OscConfig+0xf1a>
 80025d0:	e027      	b.n	8002622 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01e      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x1078>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	429a      	cmp	r2, r3
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002606:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800260a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09e      	sub	sp, #120	; 0x78
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e162      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b90      	ldr	r3, [pc, #576]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b8d      	ldr	r3, [pc, #564]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	498b      	ldr	r1, [pc, #556]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e14a      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	497f      	ldr	r1, [pc, #508]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80dc 	beq.w	8002860 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13c      	bne.n	800272a <HAL_RCC_ClockConfig+0xf6>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <HAL_RCC_ClockConfig+0xa6>
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e00f      	b.n	80026fa <HAL_RCC_ClockConfig+0xc6>
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	667b      	str	r3, [r7, #100]	; 0x64
 80026e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ec:	663b      	str	r3, [r7, #96]	; 0x60
 80026ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d17b      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0f3      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d13c      	bne.n	80027ac <HAL_RCC_ClockConfig+0x178>
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_ClockConfig+0x128>
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e00f      	b.n	800277c <HAL_RCC_ClockConfig+0x148>
 800275c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	643b      	str	r3, [r7, #64]	; 0x40
 8002770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002780:	63ba      	str	r2, [r7, #56]	; 0x38
 8002782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002784:	fa92 f2a2 	rbit	r2, r2
 8002788:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800278a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d13a      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b2      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
 80027ac:	2302      	movs	r3, #2
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e00d      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1bc>
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	2302      	movs	r3, #2
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	61ba      	str	r2, [r7, #24]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	617a      	str	r2, [r7, #20]
  return result;
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e079      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	491a      	ldr	r1, [pc, #104]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe fa7a 	bl	8000d28 <HAL_GetTick>
 8002834:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fa76 	bl	8000d28 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e061      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d214      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4906      	ldr	r1, [pc, #24]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e040      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	491a      	ldr	r1, [pc, #104]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4912      	ldr	r1, [pc, #72]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028d6:	f000 f829 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028da:	4601      	mov	r1, r0
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	22f0      	movs	r2, #240	; 0xf0
 80028e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	fa92 f2a2 	rbit	r2, r2
 80028ee:	60fa      	str	r2, [r7, #12]
  return result;
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	40d3      	lsrs	r3, r2
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x2ec>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_RCC_ClockConfig+0x2f0>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_ClockConfig+0x2f4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f9c8 	bl	8000ca0 <HAL_InitTick>
  
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3778      	adds	r7, #120	; 0x78
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	08004644 	.word	0x08004644
 8002924:	2000000c 	.word	0x2000000c
 8002928:	20000010 	.word	0x20000010

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x30>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d003      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x36>
 800295a:	e03c      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800295e:	623b      	str	r3, [r7, #32]
      break;
 8002960:	e03c      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002968:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800296c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	607a      	str	r2, [r7, #4]
  return result;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	40d3      	lsrs	r3, r2
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	220f      	movs	r2, #15
 8002990:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	60fa      	str	r2, [r7, #12]
  return result;
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	40d3      	lsrs	r3, r2
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	e004      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	623b      	str	r3, [r7, #32]
      break;
 80029d4:	e002      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029d8:	623b      	str	r3, [r7, #32]
      break;
 80029da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	372c      	adds	r7, #44	; 0x2c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	0800465c 	.word	0x0800465c
 80029f8:	0800466c 	.word	0x0800466c
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a1e:	f7ff ffef 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	603a      	str	r2, [r7, #0]
  return result;
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	40d3      	lsrs	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08004654 	.word	0x08004654

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a62:	f7ff ffcd 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	603a      	str	r2, [r7, #0]
  return result;
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08004654 	.word	0x08004654

08002aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80cd 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b86      	ldr	r3, [pc, #536]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10e      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a82      	ldr	r2, [pc, #520]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7fe f90f 	bl	8000d28 <HAL_GetTick>
 8002b0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe f90b 	bl	8000d28 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0db      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d07d      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d076      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4a:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	461a      	mov	r2, r3
 8002b74:	2301      	movs	r3, #1
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d045      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe f8bc 	bl	8000d28 <HAL_GetTick>
 8002bb0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe f8b8 	bl	8000d28 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e086      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	61fb      	str	r3, [r7, #28]
  return result;
 8002be2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bf8:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	e007      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2202      	movs	r2, #2
 8002c10:	613a      	str	r2, [r7, #16]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	60fa      	str	r2, [r7, #12]
  return result;
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f002 021f 	and.w	r2, r2, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0bd      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4926      	ldr	r1, [pc, #152]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	491a      	ldr	r1, [pc, #104]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f023 0210 	bic.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4912      	ldr	r1, [pc, #72]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	490b      	ldr	r1, [pc, #44]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3748      	adds	r7, #72	; 0x48
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	10908100 	.word	0x10908100

08002cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e095      	b.n	8002e2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0e:	d009      	beq.n	8002d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
 8002d16:	e005      	b.n	8002d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fe20 	bl	8000984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d64:	d902      	bls.n	8002d6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e002      	b.n	8002d72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d7a:	d007      	beq.n	8002d8c <HAL_SPI_Init+0xa0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	ea42 0103 	orr.w	r1, r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f003 0204 	and.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10e      	bne.n	8002e74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    return;
 8002e72:	e0ce      	b.n	8003012 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_SPI_IRQHandler+0x5e>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
    return;
 8002e90:	e0bf      	b.n	8003012 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_SPI_IRQHandler+0x7e>
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80b0 	beq.w	8003012 <HAL_SPI_IRQHandler+0x1de>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80aa 	beq.w	8003012 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d023      	beq.n	8002f10 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d011      	beq.n	8002ef8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	e00b      	b.n	8002f10 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
        return;
 8002f0e:	e080      	b.n	8003012 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f043 0208 	orr.w	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d04f      	beq.n	8003010 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_SPI_IRQHandler+0x168>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d034      	beq.n	8003006 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0203 	bic.w	r2, r2, #3
 8002faa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d011      	beq.n	8002fd8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	4a17      	ldr	r2, [pc, #92]	; (8003018 <HAL_SPI_IRQHandler+0x1e4>)
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fff2 	bl	8000faa <HAL_DMA_Abort_IT>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d016      	beq.n	800300e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_SPI_IRQHandler+0x1e4>)
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd ffdc 	bl	8000faa <HAL_DMA_Abort_IT>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003004:	e003      	b.n	800300e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f808 	bl	800301c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800300c:	e000      	b.n	8003010 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800300e:	bf00      	nop
    return;
 8003010:	bf00      	nop
  }
}
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08003031 	.word	0x08003031

0800301c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ffe5 	bl	800301c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e049      	b.n	8003100 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fcc9 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fb4d 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d001      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e040      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_TIM_Base_Start_IT+0xa8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_TIM_Base_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d009      	beq.n	8003160 <HAL_TIM_Base_Start_IT+0x58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIM_Base_Start_IT+0xac>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_TIM_Base_Start_IT+0x58>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d115      	bne.n	800318c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b06      	cmp	r3, #6
 8003170:	d015      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x96>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d011      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	e008      	b.n	800319e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e000      	b.n	80031a0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	00010007 	.word	0x00010007

080031c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e049      	b.n	8003266 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f841 	bl	800326e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fa9a 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d122      	bne.n	80032de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d11b      	bne.n	80032de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0202 	mvn.w	r2, #2
 80032ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa19 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 80032ca:	e005      	b.n	80032d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fa0b 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa1c 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d122      	bne.n	8003332 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d11b      	bne.n	8003332 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0204 	mvn.w	r2, #4
 8003302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f9ef 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 800331e:	e005      	b.n	800332c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9e1 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9f2 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d122      	bne.n	8003386 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11b      	bne.n	8003386 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0208 	mvn.w	r2, #8
 8003356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f9c5 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003372:	e005      	b.n	8003380 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f9b7 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c8 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d122      	bne.n	80033da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d11b      	bne.n	80033da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0210 	mvn.w	r2, #16
 80033aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2208      	movs	r2, #8
 80033b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f99b 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 80033c6:	e005      	b.n	80033d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f98d 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f99e 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10e      	bne.n	8003406 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0201 	mvn.w	r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fd f97d 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d10e      	bne.n	8003432 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d107      	bne.n	8003432 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fd23 	bl	8003e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d10e      	bne.n	8003460 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b80      	cmp	r3, #128	; 0x80
 800344e:	d107      	bne.n	8003460 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fd16 	bl	8003e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f94c 	bl	8003724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0220 	mvn.w	r2, #32
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fcd6 	bl	8003e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0ff      	b.n	80036de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b14      	cmp	r3, #20
 80034ea:	f200 80f0 	bhi.w	80036ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003549 	.word	0x08003549
 80034f8:	080036cf 	.word	0x080036cf
 80034fc:	080036cf 	.word	0x080036cf
 8003500:	080036cf 	.word	0x080036cf
 8003504:	08003589 	.word	0x08003589
 8003508:	080036cf 	.word	0x080036cf
 800350c:	080036cf 	.word	0x080036cf
 8003510:	080036cf 	.word	0x080036cf
 8003514:	080035cb 	.word	0x080035cb
 8003518:	080036cf 	.word	0x080036cf
 800351c:	080036cf 	.word	0x080036cf
 8003520:	080036cf 	.word	0x080036cf
 8003524:	0800360b 	.word	0x0800360b
 8003528:	080036cf 	.word	0x080036cf
 800352c:	080036cf 	.word	0x080036cf
 8003530:	080036cf 	.word	0x080036cf
 8003534:	0800364d 	.word	0x0800364d
 8003538:	080036cf 	.word	0x080036cf
 800353c:	080036cf 	.word	0x080036cf
 8003540:	080036cf 	.word	0x080036cf
 8003544:	0800368d 	.word	0x0800368d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f96a 	bl	8003828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0208 	orr.w	r2, r2, #8
 8003562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6999      	ldr	r1, [r3, #24]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	619a      	str	r2, [r3, #24]
      break;
 8003586:	e0a5      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f9d0 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	021a      	lsls	r2, r3, #8
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	619a      	str	r2, [r3, #24]
      break;
 80035c8:	e084      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa2f 	bl	8003a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0208 	orr.w	r2, r2, #8
 80035e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69d9      	ldr	r1, [r3, #28]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	61da      	str	r2, [r3, #28]
      break;
 8003608:	e064      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fa8d 	bl	8003b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	61da      	str	r2, [r3, #28]
      break;
 800364a:	e043      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fad0 	bl	8003bf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800368a:	e023      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb0e 	bl	8003cb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036cc:	e002      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	75fb      	strb	r3, [r7, #23]
      break;
 80036d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop

080036e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a32      	ldr	r2, [pc, #200]	; (8003814 <TIM_Base_SetConfig+0xdc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x28>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x28>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <TIM_Base_SetConfig+0xe0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_Base_SetConfig+0xdc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <TIM_Base_SetConfig+0x6a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d00f      	beq.n	80037a2 <TIM_Base_SetConfig+0x6a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <TIM_Base_SetConfig+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_Base_SetConfig+0x6a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <TIM_Base_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <TIM_Base_SetConfig+0x6a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <TIM_Base_SetConfig+0xe8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_Base_SetConfig+0x6a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_Base_SetConfig+0xec>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <TIM_Base_SetConfig+0xdc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_Base_SetConfig+0xc0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <TIM_Base_SetConfig+0xe4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <TIM_Base_SetConfig+0xc0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <TIM_Base_SetConfig+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0xc0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <TIM_Base_SetConfig+0xec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	615a      	str	r2, [r3, #20]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <TIM_OC1_SetConfig+0xfc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_OC1_SetConfig+0x78>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a27      	ldr	r2, [pc, #156]	; (8003928 <TIM_OC1_SetConfig+0x100>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_OC1_SetConfig+0x78>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a26      	ldr	r2, [pc, #152]	; (800392c <TIM_OC1_SetConfig+0x104>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC1_SetConfig+0x78>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a25      	ldr	r2, [pc, #148]	; (8003930 <TIM_OC1_SetConfig+0x108>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10c      	bne.n	80038ba <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0308 	bic.w	r3, r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <TIM_OC1_SetConfig+0xfc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_OC1_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <TIM_OC1_SetConfig+0x100>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_OC1_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <TIM_OC1_SetConfig+0x104>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC1_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <TIM_OC1_SetConfig+0x108>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0320 	bic.w	r3, r3, #32
 8003982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <TIM_OC2_SetConfig+0xf0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10d      	bne.n	80039b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <TIM_OC2_SetConfig+0xf0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_OC2_SetConfig+0xa0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <TIM_OC2_SetConfig+0xf4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC2_SetConfig+0xa0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_OC2_SetConfig+0xf8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0xa0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_OC2_SetConfig+0xfc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <TIM_OC3_SetConfig+0xec>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10d      	bne.n	8003ab2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <TIM_OC3_SetConfig+0xec>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_OC3_SetConfig+0x9e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_OC3_SetConfig+0xf0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_OC3_SetConfig+0x9e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_OC3_SetConfig+0xf4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC3_SetConfig+0x9e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <TIM_OC3_SetConfig+0xf8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d113      	bne.n	8003afa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <TIM_OC4_SetConfig+0xb8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_OC4_SetConfig+0x7c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <TIM_OC4_SetConfig+0xbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_OC4_SetConfig+0x7c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <TIM_OC4_SetConfig+0xc0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC4_SetConfig+0x7c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <TIM_OC4_SetConfig+0xc4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d109      	bne.n	8003bc0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800

08003bf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <TIM_OC5_SetConfig+0xac>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_OC5_SetConfig+0x72>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <TIM_OC5_SetConfig+0xb0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_OC5_SetConfig+0x72>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <TIM_OC5_SetConfig+0xb4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC5_SetConfig+0x72>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <TIM_OC5_SetConfig+0xb8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d109      	bne.n	8003c7e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800

08003cb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	051b      	lsls	r3, r3, #20
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <TIM_OC6_SetConfig+0xb0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <TIM_OC6_SetConfig+0x74>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <TIM_OC6_SetConfig+0xb4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_OC6_SetConfig+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <TIM_OC6_SetConfig+0xb8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_OC6_SetConfig+0x74>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <TIM_OC6_SetConfig+0xbc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d109      	bne.n	8003d3c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800

08003d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e060      	b.n	8003e52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d115      	bne.n	8003e40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	051b      	lsls	r3, r3, #20
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e040      	b.n	8003f34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fe1a 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f82c 	bl	8003f3c <UART_SetConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e022      	b.n	8003f34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f956 	bl	80041a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f9dd 	bl	80042ec <UART_CheckIdleState>
 8003f32:	4603      	mov	r3, r0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b8a      	ldr	r3, [pc, #552]	; (8004190 <UART_SetConfig+0x254>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a78      	ldr	r2, [pc, #480]	; (8004194 <UART_SetConfig+0x258>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d120      	bne.n	8003ffa <UART_SetConfig+0xbe>
 8003fb8:	4b77      	ldr	r3, [pc, #476]	; (8004198 <UART_SetConfig+0x25c>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d817      	bhi.n	8003ff4 <UART_SetConfig+0xb8>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x90>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe9 	.word	0x08003fe9
 8003fd4:	08003fef 	.word	0x08003fef
 8003fd8:	08003fe3 	.word	0x08003fe3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e01d      	b.n	800401e <UART_SetConfig+0xe2>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e01a      	b.n	800401e <UART_SetConfig+0xe2>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e017      	b.n	800401e <UART_SetConfig+0xe2>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e014      	b.n	800401e <UART_SetConfig+0xe2>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e011      	b.n	800401e <UART_SetConfig+0xe2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a67      	ldr	r2, [pc, #412]	; (800419c <UART_SetConfig+0x260>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d102      	bne.n	800400a <UART_SetConfig+0xce>
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e009      	b.n	800401e <UART_SetConfig+0xe2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a64      	ldr	r2, [pc, #400]	; (80041a0 <UART_SetConfig+0x264>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d102      	bne.n	800401a <UART_SetConfig+0xde>
 8004014:	2300      	movs	r3, #0
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e001      	b.n	800401e <UART_SetConfig+0xe2>
 800401a:	2310      	movs	r3, #16
 800401c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d15a      	bne.n	80040de <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004028:	7ffb      	ldrb	r3, [r7, #31]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d827      	bhi.n	800407e <UART_SetConfig+0x142>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0xf8>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	0800407f 	.word	0x0800407f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
 8004054:	08004077 	.word	0x08004077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fcde 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800405c:	61b8      	str	r0, [r7, #24]
        break;
 800405e:	e013      	b.n	8004088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe fcfc 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8004064:	61b8      	str	r0, [r7, #24]
        break;
 8004066:	e00f      	b.n	8004088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b4e      	ldr	r3, [pc, #312]	; (80041a4 <UART_SetConfig+0x268>)
 800406a:	61bb      	str	r3, [r7, #24]
        break;
 800406c:	e00c      	b.n	8004088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe fc5d 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8004072:	61b8      	str	r0, [r7, #24]
        break;
 8004074:	e008      	b.n	8004088 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407a:	61bb      	str	r3, [r7, #24]
        break;
 800407c:	e004      	b.n	8004088 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	77bb      	strb	r3, [r7, #30]
        break;
 8004086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d074      	beq.n	8004178 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	005a      	lsls	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d916      	bls.n	80040d8 <UART_SetConfig+0x19c>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d212      	bcs.n	80040d8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	89fa      	ldrh	r2, [r7, #14]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	e04f      	b.n	8004178 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77bb      	strb	r3, [r7, #30]
 80040dc:	e04c      	b.n	8004178 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d828      	bhi.n	8004136 <UART_SetConfig+0x1fa>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x1b0>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe fc82 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004114:	61b8      	str	r0, [r7, #24]
        break;
 8004116:	e013      	b.n	8004140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fca0 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 800411c:	61b8      	str	r0, [r7, #24]
        break;
 800411e:	e00f      	b.n	8004140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <UART_SetConfig+0x268>)
 8004122:	61bb      	str	r3, [r7, #24]
        break;
 8004124:	e00c      	b.n	8004140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe fc01 	bl	800292c <HAL_RCC_GetSysClockFreq>
 800412a:	61b8      	str	r0, [r7, #24]
        break;
 800412c:	e008      	b.n	8004140 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	61bb      	str	r3, [r7, #24]
        break;
 8004134:	e004      	b.n	8004140 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	77bb      	strb	r3, [r7, #30]
        break;
 800413e:	bf00      	nop
    }

    if (pclk != 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085a      	lsrs	r2, r3, #1
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b0f      	cmp	r3, #15
 800415e:	d909      	bls.n	8004174 <UART_SetConfig+0x238>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d205      	bcs.n	8004174 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e001      	b.n	8004178 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004184:	7fbb      	ldrb	r3, [r7, #30]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	efff69f3 	.word	0xefff69f3
 8004194:	40013800 	.word	0x40013800
 8004198:	40021000 	.word	0x40021000
 800419c:	40004400 	.word	0x40004400
 80041a0:	40004800 	.word	0x40004800
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a6:	d10a      	bne.n	80042be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b098      	sub	sp, #96	; 0x60
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042fc:	f7fc fd14 	bl	8000d28 <HAL_GetTick>
 8004300:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b08      	cmp	r3, #8
 800430e:	d12e      	bne.n	800436e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f88c 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d021      	beq.n	800436e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
 800434a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800434e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e062      	b.n	8004434 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d149      	bne.n	8004410 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f856 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03c      	beq.n	8004410 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	623b      	str	r3, [r7, #32]
   return(result);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e6      	bne.n	8004396 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e8:	61fa      	str	r2, [r7, #28]
 80043ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	617b      	str	r3, [r7, #20]
   return(result);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e011      	b.n	8004434 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3758      	adds	r7, #88	; 0x58
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	e049      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004454:	d045      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fc fc67 	bl	8000d28 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <UART_WaitOnFlagUntilTimeout+0x30>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e048      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d031      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d110      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2208      	movs	r2, #8
 8004492:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f838 	bl	800450a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2208      	movs	r2, #8
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044bc:	d111      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f81e 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d0a6      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b095      	sub	sp, #84	; 0x54
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
 8004532:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	61fb      	str	r3, [r7, #28]
   return(result);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	60bb      	str	r3, [r7, #8]
   return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045c6:	bf00      	nop
 80045c8:	3754      	adds	r7, #84	; 0x54
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <memset>:
 80045d2:	4402      	add	r2, r0
 80045d4:	4603      	mov	r3, r0
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d100      	bne.n	80045dc <memset+0xa>
 80045da:	4770      	bx	lr
 80045dc:	f803 1b01 	strb.w	r1, [r3], #1
 80045e0:	e7f9      	b.n	80045d6 <memset+0x4>
	...

080045e4 <__libc_init_array>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4d0d      	ldr	r5, [pc, #52]	; (800461c <__libc_init_array+0x38>)
 80045e8:	4c0d      	ldr	r4, [pc, #52]	; (8004620 <__libc_init_array+0x3c>)
 80045ea:	1b64      	subs	r4, r4, r5
 80045ec:	10a4      	asrs	r4, r4, #2
 80045ee:	2600      	movs	r6, #0
 80045f0:	42a6      	cmp	r6, r4
 80045f2:	d109      	bne.n	8004608 <__libc_init_array+0x24>
 80045f4:	4d0b      	ldr	r5, [pc, #44]	; (8004624 <__libc_init_array+0x40>)
 80045f6:	4c0c      	ldr	r4, [pc, #48]	; (8004628 <__libc_init_array+0x44>)
 80045f8:	f000 f818 	bl	800462c <_init>
 80045fc:	1b64      	subs	r4, r4, r5
 80045fe:	10a4      	asrs	r4, r4, #2
 8004600:	2600      	movs	r6, #0
 8004602:	42a6      	cmp	r6, r4
 8004604:	d105      	bne.n	8004612 <__libc_init_array+0x2e>
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	f855 3b04 	ldr.w	r3, [r5], #4
 800460c:	4798      	blx	r3
 800460e:	3601      	adds	r6, #1
 8004610:	e7ee      	b.n	80045f0 <__libc_init_array+0xc>
 8004612:	f855 3b04 	ldr.w	r3, [r5], #4
 8004616:	4798      	blx	r3
 8004618:	3601      	adds	r6, #1
 800461a:	e7f2      	b.n	8004602 <__libc_init_array+0x1e>
 800461c:	0800467c 	.word	0x0800467c
 8004620:	0800467c 	.word	0x0800467c
 8004624:	0800467c 	.word	0x0800467c
 8004628:	08004680 	.word	0x08004680

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
