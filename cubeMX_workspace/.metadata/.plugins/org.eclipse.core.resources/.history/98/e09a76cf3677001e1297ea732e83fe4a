#include "main.h"

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

typedef enum {
	RAL_OK,
	RAL_ERROR
} RAL_Status;

typedef enum {
	INPUT  = 0b00,
	OUTPUT = 0b01,
	ALT_F  = 0b10,
	ANALOG = 0b11
} RAL_PinOutputMode;

typedef enum {
	PUSH_PULL  = 0,
	OPEN_DRAIN = 1,
} RAL_PinOutputType;

typedef enum {
	LOW = 0b00,
	MED = 0b01,
	HI 	= 0b11
} RAL_PinOutputSpeed;

typedef enum {
	NO_PUPD  = 0b00,
	PUP      = 0b01,
	PUD      = 0b10,
	RESERVED = 0b11
} RAL_PinPullUpPullDownResistor;

typedef enum {
	PIN_LOW,
	PIN_HI
} RAL_PinOutputLevel;

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

  RAL_Status RAL_writePin(GPIO_TypeDef* GPIO, int, RAL_PinOutputLevel pinOutputLevel);
  int RAL_pinRegister(
  					GPIO_TypeDef* GPIO,
  					int pinNumber,
					RAL_PinOutputMode mode,
					RAL_PinOutputType type,
					RAL_PinOutputSpeed speed,
					RAL_PinPullUpPullDownResistor pupd
  					);

  //register     portB, pin3
  RAL_pinRegister(GPIOB, 3, OUTPUT, PUSH_PULL, LOW, NO_PUPD);

  while (1)
  {
	  //set HI level
	  RAL_writePin(GPIOB, 3, PIN_HI);
	  HAL_Delay(150);
	  //set LOW level
	  RAL_writePin(GPIOB, 3, PIN_LOW);
	  HAL_Delay(850);

  }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/*------------------------------------------------------------------------------
 *------------------------------------------------------------------------------
 *------------------------------ RAL -------------------------------------------
 *------------------------------------------------------------------------------
 *------------------------------------------------------------------------------
 */

RAL_Status RAL_portClockEnable(GPIO_TypeDef* GPIO) {
	int portOffset = (GPIO == GPIOA) ? 17 :
	             (GPIO == GPIOB) ? 18 :
	             (GPIO == GPIOC) ? 19 :
	             (GPIO == GPIOD) ? 20 :
//	             (GPIO == GPIOE) ? 21 :
	             (GPIO == GPIOF) ? 22 : -1;
//	             (GPIO == GPIOG) ? 23 :
//	             (GPIO == GPIOH) ? 16 : -1;

	if((RCC->AHBENR & 1U << portOffset) == 0) {
		RCC->AHBENR |= 1 << portOffset;
	}

	if(((RCC->AHBENR) & (1U << portOffset)) == 0) return RAL_ERROR;

	return RAL_OK;
}



RAL_Status RAL_writePin(
				 GPIO_TypeDef* GPIO,
				 int pinNumber,
				 RAL_PinOutputLevel PinOutputLevel
				 ) {
	uint32_t pinSetBit = 1 << pinNumber;
	uint32_t pinResetBit = 1 << (pinNumber + 16);

	if(PinOutputLevel) {
	GPIO->BSRR &= ~pinResetBit;
	GPIO->BSRR |= pinSetBit;



	return RAL_OK;
	}

	GPIO->BSRR &= ~pinSetBit;
	GPIO->BSRR |= pinResetBit;
	return RAL_OK;
}

uint32_t setBits(volatile uint32_t* reg, uint32_t setBit, int position) {

	uint32_t resultRegConfig = *reg;
	uint32_t clearMask = ~(0b11u << position);
	resultRegConfig &= clearMask;
	uint32_t setBits = ((uint32_t)setBit) << position;
	resultRegConfig |= setBits;

	*reg = resultRegConfig;

	return resultRegConfig;
}

int RAL_pinRegister(
					GPIO_TypeDef* GPIO,
					int pinNumber,
					RAL_PinOutputMode mode,
					RAL_PinOutputType type,
					RAL_PinOutputSpeed speed,
					RAL_PinPullUpPullDownResistor pupd
					) {
	//set GPIO port AHB bus clock
	RAL_portClockEnable(GPIO);
	//set GPIO pin mode
	setBits(&GPIO->MODER, (uint32_t)mode, (pinNumber * 2));
	//set type of pin
	setBits(&GPIO->OTYPER, (uint32_t)type, pinNumber);
	//set the output speed
	setBits(&GPIO->OSPEEDR, (uint32_t)speed, (pinNumber * 2));
	//set pull-up/pull-down
	setBits(&GPIO->PUPDR, (uint32_t)pupd, (pinNumber * 2));

	return 0;
}

static void MX_GPIO_Init(void)
{

  __HAL_RCC_GPIOA_CLK_ENABLE();

}

void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
