
F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d90  08004d90  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d98  08004d98  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000018  08004db8  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b8  08004e58  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000083c  20000158  08004ef8  00020158  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000994  08004ef8  00020994  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001aa35  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e85  00000000  00000000  0003ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016f0  00000000  00000000  0003da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001214  00000000  00000000  0003f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000282d2  00000000  00000000  0004038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001b697  00000000  00000000  0006865e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fb895  00000000  00000000  00083cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000063c8  00000000  00000000  0017f58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  00185954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000158 	.word	0x20000158
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d60 	.word	0x08004d60

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000015c 	.word	0x2000015c
 8000204:	08004d60 	.word	0x08004d60

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 ff67 	bl	80013da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f83e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fa24 	bl	800095c <MX_GPIO_Init>
  MX_ETH_Init();
 8000514:	f000 f8a2 	bl	800065c <MX_ETH_Init>
  MX_I2C1_Init();
 8000518:	f000 f8ee 	bl	80006f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800051c:	f000 f92c 	bl	8000778 <MX_SPI1_Init>
  MX_TIM14_Init();
 8000520:	f000 f968 	bl	80007f4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f98c 	bl	8000840 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f9ba 	bl	80008a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f9e8 	bl	8000900 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setModeLed();
 8000530:	f000 faee 	bl	8000b10 <setModeLed>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0x84>)
 800053a:	f001 fdcb 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000544:	4810      	ldr	r0, [pc, #64]	; (8000588 <main+0x84>)
 8000546:	f001 fdc5 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f000 ffa2 	bl	8001494 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0x84>)
 8000558:	f001 fdbc 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x84>)
 8000562:	f001 fdb7 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f000 ff94 	bl	8001494 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x84>)
 8000572:	f001 fdaf 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <main+0x84>)
 800057c:	f001 fdaa 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 ff87 	bl	8001494 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_RESET);
 8000586:	e7d5      	b.n	8000534 <main+0x30>
 8000588:	40020400 	.word	0x40020400

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fbb4 	bl	8004d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b0:	f002 f81a 	bl	80025e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000600:	2348      	movs	r3, #72	; 0x48
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fff9 	bl	8002608 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 fb88 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fa87 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 fb72 	bl	8000d30 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_ETH_Init+0x84>)
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <MX_ETH_Init+0x88>)
 8000664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ETH_Init+0x8c>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000674:	22e1      	movs	r2, #225	; 0xe1
 8000676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_ETH_Init+0x8c>)
 800067a:	2200      	movs	r2, #0
 800067c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_ETH_Init+0x84>)
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <MX_ETH_Init+0x8c>)
 800068e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_ETH_Init+0x84>)
 8000692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000696:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_ETH_Init+0x84>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_ETH_Init+0x90>)
 800069c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_ETH_Init+0x84>)
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_ETH_Init+0x94>)
 80006a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_ETH_Init+0x84>)
 80006a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_ETH_Init+0x84>)
 80006ae:	f001 f827 	bl	8001700 <HAL_ETH_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b8:	f000 fb3a 	bl	8000d30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006bc:	2238      	movs	r2, #56	; 0x38
 80006be:	2100      	movs	r1, #0
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_ETH_Init+0x98>)
 80006c2:	f004 fb21 	bl	8004d08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_ETH_Init+0x98>)
 80006c8:	2221      	movs	r2, #33	; 0x21
 80006ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_ETH_Init+0x98>)
 80006ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_ETH_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001ac 	.word	0x200001ac
 80006e4:	40028000 	.word	0x40028000
 80006e8:	20000988 	.word	0x20000988
 80006ec:	200000b8 	.word	0x200000b8
 80006f0:	20000018 	.word	0x20000018
 80006f4:	20000174 	.word	0x20000174

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	f001 fce8 	bl	8002108 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 faf7 	bl	8000d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_I2C1_Init+0x74>)
 8000746:	f001 fd6f 	bl	8002228 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 faee 	bl	8000d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000758:	f001 fdb1 	bl	80022be <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 fae5 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000025c 	.word	0x2000025c
 8000770:	40005400 	.word	0x40005400
 8000774:	00808cd2 	.word	0x00808cd2

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_SPI1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_SPI1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_SPI1_Init+0x74>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI1_Init+0x74>)
 8000792:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000796:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_SPI1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI1_Init+0x74>)
 80007a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI1_Init+0x74>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI1_Init+0x74>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_SPI1_Init+0x74>)
 80007d8:	f002 ffd0 	bl	800377c <HAL_SPI_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 faa5 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002b0 	.word	0x200002b0
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_TIM14_Init+0x44>)
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <MX_TIM14_Init+0x48>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_TIM14_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_TIM14_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_TIM14_Init+0x44>)
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_TIM14_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_TIM14_Init+0x44>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_TIM14_Init+0x44>)
 8000820:	f003 f857 	bl	80038d2 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800082a:	f000 fa81 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800082e:	4802      	ldr	r0, [pc, #8]	; (8000838 <MX_TIM14_Init+0x44>)
 8000830:	f003 f8a6 	bl	8003980 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000314 	.word	0x20000314
 800083c:	40002000 	.word	0x40002000

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800086c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000870:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000886:	f003 faf9 	bl	8003e7c <HAL_UART_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000890:	f000 fa4e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000360 	.word	0x20000360
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <MX_USART3_UART_Init+0x5c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART3_UART_Init+0x58>)
 80008e4:	f003 faca 	bl	8003e7c <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 fa1f 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200003e8 	.word	0x200003e8
 80008fc:	40004800 	.word	0x40004800

08000900 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800090a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2206      	movs	r2, #6
 8000910:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2202      	movs	r2, #2
 8000916:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2201      	movs	r2, #1
 8000928:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2201      	movs	r2, #1
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	f001 fd07 	bl	8002356 <HAL_PCD_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f9ef 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000470 	.word	0x20000470

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a5b      	ldr	r2, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <MX_GPIO_Init+0x188>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a55      	ldr	r2, [pc, #340]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a4f      	ldr	r2, [pc, #316]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a49      	ldr	r2, [pc, #292]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x188>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a37      	ldr	r2, [pc, #220]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <MX_GPIO_Init+0x188>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	217c      	movs	r1, #124	; 0x7c
 8000a1e:	4832      	ldr	r0, [pc, #200]	; (8000ae8 <MX_GPIO_Init+0x18c>)
 8000a20:	f001 fb58 	bl	80020d4 <HAL_GPIO_WritePin>
                          |LED_R_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin|LD3_R_Pin|LD2_B_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a2a:	4830      	ldr	r0, [pc, #192]	; (8000aec <MX_GPIO_Init+0x190>)
 8000a2c:	f001 fb52 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	482e      	ldr	r0, [pc, #184]	; (8000af0 <MX_GPIO_Init+0x194>)
 8000a36:	f001 fb4d 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_5_Pin LED_R_2_Pin LED_R_3_Pin
                           LED_R_4_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000a3a:	237c      	movs	r3, #124	; 0x7c
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |LED_R_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <MX_GPIO_Init+0x18c>)
 8000a52:	f001 f97b 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4821      	ldr	r0, [pc, #132]	; (8000af4 <MX_GPIO_Init+0x198>)
 8000a6e:	f001 f96d 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_G_Pin LD3_R_Pin LD2_B_Pin */
  GPIO_InitStruct.Pin = LD1_G_Pin|LD3_R_Pin|LD2_B_Pin;
 8000a72:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_GPIO_Init+0x190>)
 8000a8c:	f001 f95e 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_R_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_R_Pin|BTN_SET_Pin;
 8000a90:	230b      	movs	r3, #11
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0x194>)
 8000aa4:	f001 f952 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x194>)
 8000ac0:	f001 f944 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x194>)
 8000ad8:	f001 f938 	bl	8001d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020800 	.word	0x40020800

08000af8 <resetModeLed>:

/* USER CODE BEGIN 4 */
void resetModeLed(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000afc:	2200      	movs	r2, #0
 8000afe:	217c      	movs	r1, #124	; 0x7c
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <resetModeLed+0x14>)
 8000b02:	f001 fae7 	bl	80020d4 <HAL_GPIO_WritePin>
					GPIOE,
					LED_R_1_Pin|LED_R_2_Pin|LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <setModeLed>:

void setModeLed(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	if(USER_MODE == 1)
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <setModeLed+0x78>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <setModeLed+0x1a>
	{
	  resetModeLed();
 8000b1c:	f7ff ffec 	bl	8000af8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <setModeLed+0x7c>)
 8000b26:	f001 fad5 	bl	80020d4 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 2)
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <setModeLed+0x78>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d106      	bne.n	8000b40 <setModeLed+0x30>
	{
	  resetModeLed();
 8000b32:	f7ff ffe1 	bl	8000af8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_2_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <setModeLed+0x7c>)
 8000b3c:	f001 faca 	bl	80020d4 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 3)
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <setModeLed+0x78>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d106      	bne.n	8000b56 <setModeLed+0x46>
	{
	  resetModeLed();
 8000b48:	f7ff ffd6 	bl	8000af8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_3_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2120      	movs	r1, #32
 8000b50:	480e      	ldr	r0, [pc, #56]	; (8000b8c <setModeLed+0x7c>)
 8000b52:	f001 fabf 	bl	80020d4 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 4)
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <setModeLed+0x78>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d106      	bne.n	8000b6c <setModeLed+0x5c>
	{
	  resetModeLed();
 8000b5e:	f7ff ffcb 	bl	8000af8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_4_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <setModeLed+0x7c>)
 8000b68:	f001 fab4 	bl	80020d4 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 5)
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <setModeLed+0x78>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d106      	bne.n	8000b82 <setModeLed+0x72>
	{
	  resetModeLed();
 8000b74:	f7ff ffc0 	bl	8000af8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_5_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <setModeLed+0x7c>)
 8000b7e:	f001 faa9 	bl	80020d4 <HAL_GPIO_WritePin>
	}
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	if(htim == &htim14)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a57      	ldr	r2, [pc, #348]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f040 80a6 	bne.w	8000cee <HAL_TIM_PeriodElapsedCallback+0x15e>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_R_Pin);
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4855      	ldr	r0, [pc, #340]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ba6:	f001 fa7d 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000bb0:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_B_Pin);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4851      	ldr	r0, [pc, #324]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000bb6:	f001 fa75 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000bc0:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 8000bc2:	4b4f      	ldr	r3, [pc, #316]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000bc4:	881a      	ldrh	r2, [r3, #0]
 8000bc6:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d027      	beq.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x8e>
		{

			++BTN_RED_press_slowCount;
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bd8:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dd1a      	ble.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_press_slowCount = 0;
 8000be8:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 8000bee:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f083 0301 	eor.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d010      	beq.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x8e>
				{
					USER_MODE = USER_MODE + 1;
 8000bfc:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c04:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 6)
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d102      	bne.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x84>
					{

						USER_MODE = 1;
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]

					}


					setModeLed();
 8000c14:	f7ff ff7c 	bl	8000b10 <setModeLed>
					BTN_RED_isPressed = true;
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d027      	beq.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0xea>
		{

			++BTN_BLUE_press_slowCount;
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000c34:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dd1a      	ble.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0xea>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_press_slowCount = 0;
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f083 0301 	eor.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d010      	beq.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0xea>
				{
					USER_MODE = USER_MODE - 1;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c60:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 0)
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0xe0>
					{

						USER_MODE = 5;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	601a      	str	r2, [r3, #0]

					}

					setModeLed();
 8000c70:	f7ff ff4e 	bl	8000b10 <setModeLed>
					BTN_BLUE_isPressed = true;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d116      	bne.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x124>
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d012      	beq.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x124>
		{

			++BTN_RED_release_slowCount;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000c98:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dd05      	ble.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x124>
			{

				BTN_RED_isPressed = false;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
				BTN_RED_release_slowCount = 0;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d116      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x15e>
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d012      	beq.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x15e>
		{

			++BTN_BLUE_release_slowCount;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000cd2:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dd05      	ble.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x15e>
			{

				BTN_BLUE_isPressed = false;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_release_slowCount = 0;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000314 	.word	0x20000314
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	20000978 	.word	0x20000978
 8000d04:	20000980 	.word	0x20000980
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	2000097a 	.word	0x2000097a
 8000d10:	20000004 	.word	0x20000004
 8000d14:	2000097e 	.word	0x2000097e
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	2000000a 	.word	0x2000000a
 8000d20:	20000982 	.word	0x20000982
 8000d24:	20000986 	.word	0x20000986
 8000d28:	2000097c 	.word	0x2000097c
 8000d2c:	20000984 	.word	0x20000984

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_ETH_MspInit+0x158>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	f040 8096 	bne.w	8000ed4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a3a      	ldr	r2, [pc, #232]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a34      	ldr	r2, [pc, #208]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e50:	2332      	movs	r3, #50	; 0x32
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <HAL_ETH_MspInit+0x160>)
 8000e6c:	f000 ff6e 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e70:	2386      	movs	r3, #134	; 0x86
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <HAL_ETH_MspInit+0x164>)
 8000e8c:	f000 ff5e 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <HAL_ETH_MspInit+0x168>)
 8000eae:	f000 ff4d 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <HAL_ETH_MspInit+0x16c>)
 8000ed0:	f000 ff3c 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	; 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40028000 	.word	0x40028000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40021800 	.word	0x40021800

08000ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0aa      	sub	sp, #168	; 0xa8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2284      	movs	r2, #132	; 0x84
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fef7 	bl	8004d08 <memset>
  if(hi2c->Instance==I2C1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_I2C_MspInit+0xb4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13c      	bne.n	8000f9e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f832 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f3e:	f7ff fef7 	bl	8000d30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_I2C_MspInit+0xbc>)
 8000f82:	f000 fee3 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_I2C_MspInit+0xb8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	37a8      	adds	r7, #168	; 0xa8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_SPI_MspInit+0xb4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d143      	bne.n	800105e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_SPI_MspInit+0xb8>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_SPI_MspInit+0xb8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101e:	2310      	movs	r3, #16
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102e:	2305      	movs	r3, #5
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <HAL_SPI_MspInit+0xbc>)
 800103a:	f000 fe87 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800103e:	2338      	movs	r3, #56	; 0x38
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <HAL_SPI_MspInit+0xc0>)
 800105a:	f000 fe77 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013000 	.word	0x40013000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	202d      	movs	r0, #45	; 0x2d
 80010a8:	f000 faf3 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010ac:	202d      	movs	r0, #45	; 0x2d
 80010ae:	f000 fb0c 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40002000 	.word	0x40002000
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0ac      	sub	sp, #176	; 0xb0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2284      	movs	r2, #132	; 0x84
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fe0f 	bl	8004d08 <memset>
  if(huart->Instance==USART2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <HAL_UART_MspInit+0x134>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d13b      	bne.n	800116c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ff4b 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800110c:	f7ff fe10 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <HAL_UART_MspInit+0x138>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a39      	ldr	r2, [pc, #228]	; (80011fc <HAL_UART_MspInit+0x138>)
 8001116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_UART_MspInit+0x138>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <HAL_UART_MspInit+0x138>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a33      	ldr	r2, [pc, #204]	; (80011fc <HAL_UART_MspInit+0x138>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_UART_MspInit+0x138>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001140:	2378      	movs	r3, #120	; 0x78
 8001142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001158:	2307      	movs	r3, #7
 800115a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001162:	4619      	mov	r1, r3
 8001164:	4826      	ldr	r0, [pc, #152]	; (8001200 <HAL_UART_MspInit+0x13c>)
 8001166:	f000 fdf1 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800116a:	e041      	b.n	80011f0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_UART_MspInit+0x140>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d13c      	bne.n	80011f0 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f001 ff09 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001190:	f7ff fdce 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0x138>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x138>)
 800119a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0x138>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_UART_MspInit+0x138>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_UART_MspInit+0x138>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_UART_MspInit+0x138>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011de:	2307      	movs	r3, #7
 80011e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_UART_MspInit+0x13c>)
 80011ec:	f000 fdae 	bl	8001d4c <HAL_GPIO_Init>
}
 80011f0:	bf00      	nop
 80011f2:	37b0      	adds	r7, #176	; 0xb0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40004800 	.word	0x40004800

08001208 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ac      	sub	sp, #176	; 0xb0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	2284      	movs	r2, #132	; 0x84
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fd6d 	bl	8004d08 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001236:	d159      	bne.n	80012ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fea7 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001254:	f7ff fd6c 	bl	8000d30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001270:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800128a:	230a      	movs	r3, #10
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001294:	4619      	mov	r1, r3
 8001296:	4818      	ldr	r0, [pc, #96]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 8001298:	f000 fd58 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 80012b8:	f000 fd48 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c6:	6353      	str	r3, [r2, #52]	; 0x34
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6453      	str	r3, [r2, #68]	; 0x44
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	37b0      	adds	r7, #176	; 0xb0
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 f884 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001356:	f002 fb8b 	bl	8003a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000314 	.word	0x20000314

08001364 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a4:	4c0b      	ldr	r4, [pc, #44]	; (80013d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b2:	f7ff ffd7 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f003 fcaf 	bl	8004d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff f8a3 	bl	8000504 <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80013cc:	08004da0 	.word	0x08004da0
  ldr r2, =_sbss
 80013d0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80013d4:	20000994 	.word	0x20000994

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>

080013da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f94c 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f805 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ea:	f7ff fca7 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f967 	bl	80016e6 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001430:	f000 f92f 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000014 	.word	0x20000014
 8001450:	20000010 	.word	0x20000010

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000014 	.word	0x20000014
 8001478:	20000990 	.word	0x20000990

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000990 	.word	0x20000990

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000014 	.word	0x20000014

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <__NVIC_SetPriorityGrouping+0x40>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	4313      	orrs	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x40>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	05fa0000 	.word	0x05fa0000

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06a      	b.n	80017e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001718:	2b00      	cmp	r3, #0
 800171a:	d106      	bne.n	800172a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2223      	movs	r2, #35	; 0x23
 8001720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fb2d 	bl	8000d84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_ETH_Init+0xf0>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_ETH_Init+0xf0>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_ETH_Init+0xf0>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_ETH_Init+0xf4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <HAL_ETH_Init+0xf4>)
 8001748:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800174c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_ETH_Init+0xf4>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4927      	ldr	r1, [pc, #156]	; (80017f4 <HAL_ETH_Init+0xf4>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_ETH_Init+0xf4>)
 800175e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001778:	f7ff fe80 	bl	800147c <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800177e:	e011      	b.n	80017a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001780:	f7ff fe7c 	bl	800147c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800178e:	d909      	bls.n	80017a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2204      	movs	r2, #4
 8001794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	22e0      	movs	r2, #224	; 0xe0
 800179c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e021      	b.n	80017e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e4      	bne.n	8001780 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f958 	bl	8001a6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f9ff 	bl	8001bc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fa55 	bl	8001c72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	461a      	mov	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f9bd 	bl	8001b50 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2210      	movs	r2, #16
 80017e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800

080017f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4b51      	ldr	r3, [pc, #324]	; (8001954 <ETH_SetMACConfig+0x15c>)
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7c1b      	ldrb	r3, [r3, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <ETH_SetMACConfig+0x28>
 800181a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800181e:	e000      	b.n	8001822 <ETH_SetMACConfig+0x2a>
 8001820:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	7c5b      	ldrb	r3, [r3, #17]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <ETH_SetMACConfig+0x38>
 800182a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182e:	e000      	b.n	8001832 <ETH_SetMACConfig+0x3a>
 8001830:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001832:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7fdb      	ldrb	r3, [r3, #31]
 800183e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001840:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001846:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	7f92      	ldrb	r2, [r2, #30]
 800184c:	2a00      	cmp	r2, #0
 800184e:	d102      	bne.n	8001856 <ETH_SetMACConfig+0x5e>
 8001850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001854:	e000      	b.n	8001858 <ETH_SetMACConfig+0x60>
 8001856:	2200      	movs	r2, #0
                        macconf->Speed |
 8001858:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001860:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001866:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800186e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001876:	2a00      	cmp	r2, #0
 8001878:	d102      	bne.n	8001880 <ETH_SetMACConfig+0x88>
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	e000      	b.n	8001882 <ETH_SetMACConfig+0x8a>
 8001880:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001882:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	7bdb      	ldrb	r3, [r3, #15]
 8001888:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800188a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001890:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001898:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800189a:	4313      	orrs	r3, r2
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fdee 	bl	8001494 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d101      	bne.n	80018e6 <ETH_SetMACConfig+0xee>
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0xf0>
 80018e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018f6:	2a01      	cmp	r2, #1
 80018f8:	d101      	bne.n	80018fe <ETH_SetMACConfig+0x106>
 80018fa:	2208      	movs	r2, #8
 80018fc:	e000      	b.n	8001900 <ETH_SetMACConfig+0x108>
 80018fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001900:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001908:	2a01      	cmp	r2, #1
 800190a:	d101      	bne.n	8001910 <ETH_SetMACConfig+0x118>
 800190c:	2204      	movs	r2, #4
 800190e:	e000      	b.n	8001912 <ETH_SetMACConfig+0x11a>
 8001910:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800191a:	2a01      	cmp	r2, #1
 800191c:	d101      	bne.n	8001922 <ETH_SetMACConfig+0x12a>
 800191e:	2202      	movs	r2, #2
 8001920:	e000      	b.n	8001924 <ETH_SetMACConfig+0x12c>
 8001922:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001924:	4313      	orrs	r3, r2
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff fda9 	bl	8001494 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	ff20810f 	.word	0xff20810f

08001958 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <ETH_SetDMAConfig+0x110>)
 8001972:	4013      	ands	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <ETH_SetDMAConfig+0x2c>
 800197e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001982:	e000      	b.n	8001986 <ETH_SetDMAConfig+0x2e>
 8001984:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	7b5b      	ldrb	r3, [r3, #13]
 800198a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800198c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	7f52      	ldrb	r2, [r2, #29]
 8001992:	2a00      	cmp	r2, #0
 8001994:	d102      	bne.n	800199c <ETH_SetDMAConfig+0x44>
 8001996:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800199a:	e000      	b.n	800199e <ETH_SetDMAConfig+0x46>
 800199c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800199e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	7b9b      	ldrb	r3, [r3, #14]
 80019a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7f1b      	ldrb	r3, [r3, #28]
 80019b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80019b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	7f9b      	ldrb	r3, [r3, #30]
 80019ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019cc:	4313      	orrs	r3, r2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fd50 	bl	8001494 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	791b      	ldrb	r3, [r3, #4]
 8001a06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fd21 	bl	8001494 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	f8de3f23 	.word	0xf8de3f23

08001a6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0a6      	sub	sp, #152	; 0x98
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fe86 	bl	80017f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b20:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff08 	bl	8001958 <ETH_SetDMAConfig>
}
 8001b48:	bf00      	nop
 8001b4a:	3798      	adds	r7, #152	; 0x98
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3305      	adds	r3, #5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	3204      	adds	r2, #4
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <ETH_MACAddressConfig+0x68>)
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	061a      	lsls	r2, r3, #24
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3302      	adds	r3, #2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	4313      	orrs	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <ETH_MACAddressConfig+0x6c>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6013      	str	r3, [r2, #0]
}
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40028040 	.word	0x40028040
 8001bbc:	40028044 	.word	0x40028044

08001bc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e03e      	b.n	8001c4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	3206      	adds	r2, #6
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d80c      	bhi.n	8001c30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	e004      	b.n	8001c3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d9bd      	bls.n	8001bce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	611a      	str	r2, [r3, #16]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e046      	b.n	8001d0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6919      	ldr	r1, [r3, #16]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001cc4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	3212      	adds	r2, #18
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d80c      	bhi.n	8001cfe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6919      	ldr	r1, [r3, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e004      	b.n	8001d08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d9b5      	bls.n	8001c80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3e:	60da      	str	r2, [r3, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e175      	b.n	8002058 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	f040 8164 	bne.w	8002052 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d005      	beq.n	8001da2 <HAL_GPIO_Init+0x56>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d130      	bne.n	8001e04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 0201 	and.w	r2, r3, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d017      	beq.n	8001e40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d123      	bne.n	8001e94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80be 	beq.w	8002052 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eee:	4a61      	ldr	r2, [pc, #388]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a58      	ldr	r2, [pc, #352]	; (8002078 <HAL_GPIO_Init+0x32c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d037      	beq.n	8001f8a <HAL_GPIO_Init+0x23e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a57      	ldr	r2, [pc, #348]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_GPIO_Init+0x23a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a56      	ldr	r2, [pc, #344]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_GPIO_Init+0x236>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a55      	ldr	r2, [pc, #340]	; (8002084 <HAL_GPIO_Init+0x338>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x232>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_GPIO_Init+0x33c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x22e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_GPIO_Init+0x340>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x22a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x344>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x348>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x34c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x350>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f62:	2309      	movs	r3, #9
 8001f64:	e012      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f66:	230a      	movs	r3, #10
 8001f68:	e010      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	e00e      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x240>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_GPIO_Init+0x354>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_GPIO_Init+0x354>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_GPIO_Init+0x354>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f ae86 	bls.w	8001d6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40021c00 	.word	0x40021c00
 8002098:	40022000 	.word	0x40022000
 800209c:	40022400 	.word	0x40022400
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07f      	b.n	800221a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fee0 	bl	8000ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e006      	b.n	8002190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800218e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d104      	bne.n	80021a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_I2C_Init+0x11c>)
 80021ae:	430b      	orrs	r3, r1
 80021b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69d9      	ldr	r1, [r3, #28]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	02008000 	.word	0x02008000

08002228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	d138      	bne.n	80022b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002248:	2302      	movs	r3, #2
 800224a:	e032      	b.n	80022b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800227a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d139      	bne.n	8002348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022de:	2302      	movs	r3, #2
 80022e0:	e033      	b.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2224      	movs	r2, #36	; 0x24
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002358:	b08f      	sub	sp, #60	; 0x3c
 800235a:	af0a      	add	r7, sp, #40	; 0x28
 800235c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e116      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe ff40 	bl	8001208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fa12 	bl	80047d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	687e      	ldr	r6, [r7, #4]
 80023b4:	466d      	mov	r5, sp
 80023b6:	f106 0410 	add.w	r4, r6, #16
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ca:	1d33      	adds	r3, r6, #4
 80023cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f002 f9a6 	bl	8004720 <USB_CoreInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0d7      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fa00 	bl	80047f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e04a      	b.n	800248e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	333d      	adds	r3, #61	; 0x3d
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	333c      	adds	r3, #60	; 0x3c
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	b298      	uxth	r0, r3
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3344      	adds	r3, #68	; 0x44
 8002434:	4602      	mov	r2, r0
 8002436:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3340      	adds	r3, #64	; 0x40
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3348      	adds	r3, #72	; 0x48
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334c      	adds	r3, #76	; 0x4c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3354      	adds	r3, #84	; 0x54
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3af      	bcc.n	80023f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e044      	b.n	8002528 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b5      	bcc.n	800249e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	687e      	ldr	r6, [r7, #4]
 800253a:	466d      	mov	r5, sp
 800253c:	f106 0410 	add.w	r4, r6, #16
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002550:	1d33      	adds	r3, r6, #4
 8002552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f002 f999 	bl	800488c <USB_DevInit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e014      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f80b 	bl	80025a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fb57 	bl	8004c42 <USB_DevDisconnect>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	10000003 	.word	0x10000003

080025e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000

08002608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e291      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b96      	ldr	r3, [pc, #600]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002638:	4b93      	ldr	r3, [pc, #588]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x62>
 8002644:	4b90      	ldr	r3, [pc, #576]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b8d      	ldr	r3, [pc, #564]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06c      	beq.n	8002738 <HAL_RCC_OscConfig+0x130>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e26b      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x7a>
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a83      	ldr	r2, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x9c>
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b7c      	ldr	r3, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7b      	ldr	r2, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a72      	ldr	r2, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6b      	ldr	r2, [pc, #428]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fec8 	bl	800147c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fec4 	bl	800147c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e21f      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe feb4 	bl	800147c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe feb0 	bl	800147c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e20b      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x110>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d069      	beq.n	800281a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x190>
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x17a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1df      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	493d      	ldr	r1, [pc, #244]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e040      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fe66 	bl	800147c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe fe62 	bl	800147c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1bd      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fe42 	bl	800147c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fe3e 	bl	800147c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e199      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d038      	beq.n	8002898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fe1f 	bl	800147c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fe1b 	bl	800147c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e176      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x23a>
 8002860:	e01a      	b.n	8002898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_OscConfig+0x280>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fe05 	bl	800147c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fe01 	bl	800147c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d903      	bls.n	800288c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e15c      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
 8002888:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b91      	ldr	r3, [pc, #580]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a4 	beq.w	80029ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b8b      	ldr	r3, [pc, #556]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7e      	ldr	r2, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fdc9 	bl	800147c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe fdc5 	bl	800147c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e120      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002900:	4b75      	ldr	r3, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x31a>
 8002914:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a6e      	ldr	r2, [pc, #440]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	e02d      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x33c>
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a66      	ldr	r2, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	e01c      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x35e>
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a60      	ldr	r2, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002966:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fd79 	bl	800147c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fd75 	bl	800147c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0ce      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCC_OscConfig+0x386>
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fd63 	bl	800147c <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fd5f 	bl	800147c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a4 	beq.w	8002b40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d06b      	beq.n	8002adc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d149      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fd30 	bl	800147c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fd2c 	bl	800147c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	4313      	orrs	r3, r2
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fd00 	bl	800147c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fcfc 	bl	800147c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e057      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x478>
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fce6 	bl	800147c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fce2 	bl	800147c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e03d      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4ac>
 8002ad2:	e035      	b.n	8002b40 <HAL_RCC_OscConfig+0x538>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x544>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0d0      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4965      	ldr	r1, [pc, #404]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b8      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb0:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	494d      	ldr	r1, [pc, #308]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d040      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d115      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e073      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06b      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4936      	ldr	r1, [pc, #216]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c44:	f7fe fc1a 	bl	800147c <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4c:	f7fe fc16 	bl	800147c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e053      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1eb      	bne.n	8002c4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d210      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 020f 	bic.w	r2, r3, #15
 8002c8a:	4922      	ldr	r1, [pc, #136]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e032      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4916      	ldr	r1, [pc, #88]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce2:	f000 f821 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	490a      	ldr	r1, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf4:	5ccb      	ldrb	r3, [r1, r3]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1d4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fb76 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08004d78 	.word	0x08004d78
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	20000010 	.word	0x20000010

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b094      	sub	sp, #80	; 0x50
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
 8002d34:	2300      	movs	r3, #0
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d40:	4b79      	ldr	r3, [pc, #484]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	f200 80e1 	bhi.w	8002f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5a:	e0db      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d60:	e0db      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b73      	ldr	r3, [pc, #460]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d66:	e0d8      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d063      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
 8002d92:	2300      	movs	r3, #0
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
 8002d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	f04f 0000 	mov.w	r0, #0
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dac:	0150      	lsls	r0, r2, #5
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4621      	mov	r1, r4
 8002db4:	1a51      	subs	r1, r2, r1
 8002db6:	6139      	str	r1, [r7, #16]
 8002db8:	4629      	mov	r1, r5
 8002dba:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	018b      	lsls	r3, r1, #6
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	018a      	lsls	r2, r1, #6
 8002dda:	4651      	mov	r1, sl
 8002ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8002de0:	4659      	mov	r1, fp
 8002de2:	eb63 0901 	sbc.w	r9, r3, r1
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfa:	4690      	mov	r8, r2
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	eb18 0303 	adds.w	r3, r8, r3
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	462b      	mov	r3, r5
 8002e08:	eb49 0303 	adc.w	r3, r9, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	024b      	lsls	r3, r1, #9
 8002e1e:	4621      	mov	r1, r4
 8002e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e24:	4621      	mov	r1, r4
 8002e26:	024a      	lsls	r2, r1, #9
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2e:	2200      	movs	r2, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e38:	f7fd f9e6 	bl	8000208 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4613      	mov	r3, r2
 8002e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e44:	e058      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4611      	mov	r1, r2
 8002e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f04f 0100 	mov.w	r1, #0
 8002e6c:	0159      	lsls	r1, r3, #5
 8002e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e72:	0150      	lsls	r0, r2, #5
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4641      	mov	r1, r8
 8002e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e7e:	4649      	mov	r1, r9
 8002e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e98:	ebb2 040a 	subs.w	r4, r2, sl
 8002e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	00eb      	lsls	r3, r5, #3
 8002eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eae:	00e2      	lsls	r2, r4, #3
 8002eb0:	4614      	mov	r4, r2
 8002eb2:	461d      	mov	r5, r3
 8002eb4:	4643      	mov	r3, r8
 8002eb6:	18e3      	adds	r3, r4, r3
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	464b      	mov	r3, r9
 8002ebc:	eb45 0303 	adc.w	r3, r5, r3
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	028b      	lsls	r3, r1, #10
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed8:	4621      	mov	r1, r4
 8002eda:	028a      	lsls	r2, r1, #10
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	61fa      	str	r2, [r7, #28]
 8002ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eec:	f7fd f98c 	bl	8000208 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3750      	adds	r7, #80	; 0x50
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200

08002f34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a9b      	lsrs	r3, r3, #10
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	08004d88 	.word	0x08004d88

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffdc 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0b5b      	lsrs	r3, r3, #13
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08004d88 	.word	0x08004d88

08002f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a68      	ldr	r2, [pc, #416]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fce:	6093      	str	r3, [r2, #8]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	4964      	ldr	r1, [pc, #400]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d017      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	4959      	ldr	r1, [pc, #356]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d017      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	494a      	ldr	r1, [pc, #296]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003050:	d101      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 808b 	beq.w	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a39      	ldr	r2, [pc, #228]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe f9ea 	bl	800147c <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fe f9e6 	bl	800147c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e357      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030be:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d035      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d02e      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d114      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f9ae 	bl	800147c <HAL_GetTick>
 8003120:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	e00a      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe f9aa 	bl	800147c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e319      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0ee      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d111      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003162:	400b      	ands	r3, r1
 8003164:	4901      	ldr	r1, [pc, #4]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
 800316a:	e00b      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	0ffffcff 	.word	0x0ffffcff
 8003178:	4baa      	ldr	r3, [pc, #680]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4aa9      	ldr	r2, [pc, #676]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003182:	6093      	str	r3, [r2, #8]
 8003184:	4ba7      	ldr	r3, [pc, #668]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	49a4      	ldr	r1, [pc, #656]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	4313      	orrs	r3, r2
 8003194:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a8:	4a9e      	ldr	r2, [pc, #632]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031b2:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	4999      	ldr	r1, [pc, #612]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d0:	4b94      	ldr	r3, [pc, #592]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031de:	4991      	ldr	r1, [pc, #580]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f2:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003200:	4988      	ldr	r1, [pc, #544]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003214:	4b83      	ldr	r3, [pc, #524]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	4980      	ldr	r1, [pc, #512]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003236:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4977      	ldr	r1, [pc, #476]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003258:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	496f      	ldr	r1, [pc, #444]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f023 020c 	bic.w	r2, r3, #12
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003288:	4966      	ldr	r1, [pc, #408]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800329c:	4b61      	ldr	r3, [pc, #388]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	495e      	ldr	r1, [pc, #376]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	4955      	ldr	r1, [pc, #340]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	494d      	ldr	r1, [pc, #308]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003302:	4b48      	ldr	r3, [pc, #288]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	4944      	ldr	r1, [pc, #272]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003324:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	493c      	ldr	r1, [pc, #240]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003354:	4933      	ldr	r1, [pc, #204]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003376:	492b      	ldr	r1, [pc, #172]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d011      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003398:	4922      	ldr	r1, [pc, #136]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	4912      	ldr	r1, [pc, #72]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fc:	4909      	ldr	r1, [pc, #36]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d006      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80d9 	beq.w	80035ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a01      	ldr	r2, [pc, #4]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003424:	40023800 	.word	0x40023800
 8003428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342a:	f7fe f827 	bl	800147c <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003432:	f7fe f823 	bl	800147c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e194      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003444:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d021      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003464:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003472:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003478:	0e1b      	lsrs	r3, r3, #24
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	019a      	lsls	r2, r3, #6
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	071b      	lsls	r3, r3, #28
 8003498:	4957      	ldr	r1, [pc, #348]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02e      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ca:	d129      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034cc:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	0f1b      	lsrs	r3, r3, #28
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	019a      	lsls	r2, r3, #6
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	071b      	lsls	r3, r3, #28
 8003500:	493d      	ldr	r1, [pc, #244]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003508:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350e:	f023 021f 	bic.w	r2, r3, #31
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	3b01      	subs	r3, #1
 8003518:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01d      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	0e1b      	lsrs	r3, r3, #24
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003540:	0f1b      	lsrs	r3, r3, #28
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	019a      	lsls	r2, r3, #6
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	071b      	lsls	r3, r3, #28
 8003560:	4925      	ldr	r1, [pc, #148]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	019a      	lsls	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	071b      	lsls	r3, r3, #28
 8003590:	4919      	ldr	r1, [pc, #100]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fd ff6a 	bl	800147c <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ac:	f7fd ff66 	bl	800147c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0d7      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	f040 80cd 	bne.w	800376c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035de:	f7fd ff4d 	bl	800147c <HAL_GetTick>
 80035e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035e6:	f7fd ff49 	bl	800147c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d903      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0ba      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035fc:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003608:	d0ed      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02e      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d12a      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	0f1b      	lsrs	r3, r3, #28
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	019a      	lsls	r2, r3, #6
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	071b      	lsls	r3, r3, #28
 8003666:	4944      	ldr	r1, [pc, #272]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	493d      	ldr	r1, [pc, #244]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d022      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800369c:	d11d      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	0e1b      	lsrs	r3, r3, #24
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	0f1b      	lsrs	r3, r3, #28
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	019a      	lsls	r2, r3, #6
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	071b      	lsls	r3, r3, #28
 80036d2:	4929      	ldr	r1, [pc, #164]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d028      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	0e1b      	lsrs	r3, r3, #24
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	019a      	lsls	r2, r3, #6
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	4917      	ldr	r1, [pc, #92]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4911      	ldr	r1, [pc, #68]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fd fe9a 	bl	800147c <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800374c:	f7fd fe96 	bl	800147c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e007      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376a:	d1ef      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e09d      	b.n	80038ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379e:	d009      	beq.n	80037b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
 80037a6:	e005      	b.n	80037b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fbf0 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f4:	d902      	bls.n	80037fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e002      	b.n	8003802 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800380a:	d007      	beq.n	800381c <HAL_SPI_Init+0xa0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003814:	d002      	beq.n	800381c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	ea42 0103 	orr.w	r1, r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 0204 	and.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003898:	ea42 0103 	orr.w	r1, r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e049      	b.n	8003978 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fd fbbd 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 f9f5 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e054      	b.n	8003a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d01d      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d115      	bne.n	8003a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_TIM_Base_Start_IT+0xec>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d015      	beq.n	8003a3e <HAL_TIM_Base_Start_IT+0xbe>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d011      	beq.n	8003a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2a:	e008      	b.n	8003a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e000      	b.n	8003a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40000c00 	.word	0x40000c00
 8003a60:	40010400 	.word	0x40010400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	00010007 	.word	0x00010007

08003a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0202 	mvn.w	r2, #2
 8003a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f905 	bl	8003cc2 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8f7 	bl	8003cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f908 	bl	8003cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0204 	mvn.w	r2, #4
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8db 	bl	8003cc2 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8cd 	bl	8003cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8de 	bl	8003cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0208 	mvn.w	r2, #8
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8b1 	bl	8003cc2 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8a3 	bl	8003cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8b4 	bl	8003cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0210 	mvn.w	r2, #16
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f887 	bl	8003cc2 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f879 	bl	8003cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f88a 	bl	8003cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0201 	mvn.w	r2, #1
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc ffce 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f91a 	bl	8003e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2e:	d10e      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d107      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f90d 	bl	8003e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d10e      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d107      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f838 	bl	8003cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d10e      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d107      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0220 	mvn.w	r2, #32
 8003c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f8cd 	bl	8003e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <TIM_Base_SetConfig+0x114>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d00f      	beq.n	8003d40 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <TIM_Base_SetConfig+0x118>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <TIM_Base_SetConfig+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <TIM_Base_SetConfig+0x120>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3a      	ldr	r2, [pc, #232]	; (8003e24 <TIM_Base_SetConfig+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d108      	bne.n	8003d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <TIM_Base_SetConfig+0x114>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02b      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d027      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2c      	ldr	r2, [pc, #176]	; (8003e18 <TIM_Base_SetConfig+0x118>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d023      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	; (8003e1c <TIM_Base_SetConfig+0x11c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <TIM_Base_SetConfig+0x120>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01b      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <TIM_Base_SetConfig+0x124>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d017      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <TIM_Base_SetConfig+0x128>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <TIM_Base_SetConfig+0x12c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <TIM_Base_SetConfig+0x130>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <TIM_Base_SetConfig+0x134>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <TIM_Base_SetConfig+0x138>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <TIM_Base_SetConfig+0x13c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <TIM_Base_SetConfig+0x114>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0xf8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <TIM_Base_SetConfig+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	40010400 	.word	0x40010400
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800
 8003e34:	40001800 	.word	0x40001800
 8003e38:	40001c00 	.word	0x40001c00
 8003e3c:	40002000 	.word	0x40002000

08003e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e040      	b.n	8003f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd f910 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f82c 	bl	8003f18 <UART_SetConfig>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e022      	b.n	8003f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa84 	bl	80043e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fb0b 	bl	8004524 <UART_CheckIdleState>
 8003f0e:	4603      	mov	r3, r0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4ba6      	ldr	r3, [pc, #664]	; (80041dc <UART_SetConfig+0x2c4>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <UART_SetConfig+0x2c8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0xbe>
 8003f94:	4b93      	ldr	r3, [pc, #588]	; (80041e4 <UART_SetConfig+0x2cc>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d816      	bhi.n	8003fd0 <UART_SetConfig+0xb8>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x90>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc5 	.word	0x08003fc5
 8003fb0:	08003fbf 	.word	0x08003fbf
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e150      	b.n	8004260 <UART_SetConfig+0x348>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e14d      	b.n	8004260 <UART_SetConfig+0x348>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e14a      	b.n	8004260 <UART_SetConfig+0x348>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e147      	b.n	8004260 <UART_SetConfig+0x348>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e144      	b.n	8004260 <UART_SetConfig+0x348>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a83      	ldr	r2, [pc, #524]	; (80041e8 <UART_SetConfig+0x2d0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d132      	bne.n	8004046 <UART_SetConfig+0x12e>
 8003fe0:	4b80      	ldr	r3, [pc, #512]	; (80041e4 <UART_SetConfig+0x2cc>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d828      	bhi.n	8004040 <UART_SetConfig+0x128>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0xdc>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004041 	.word	0x08004041
 8004000:	08004041 	.word	0x08004041
 8004004:	08004035 	.word	0x08004035
 8004008:	08004041 	.word	0x08004041
 800400c:	08004041 	.word	0x08004041
 8004010:	08004041 	.word	0x08004041
 8004014:	0800402f 	.word	0x0800402f
 8004018:	08004041 	.word	0x08004041
 800401c:	08004041 	.word	0x08004041
 8004020:	08004041 	.word	0x08004041
 8004024:	0800403b 	.word	0x0800403b
 8004028:	2300      	movs	r3, #0
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e118      	b.n	8004260 <UART_SetConfig+0x348>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e115      	b.n	8004260 <UART_SetConfig+0x348>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e112      	b.n	8004260 <UART_SetConfig+0x348>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e10f      	b.n	8004260 <UART_SetConfig+0x348>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e10c      	b.n	8004260 <UART_SetConfig+0x348>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a68      	ldr	r2, [pc, #416]	; (80041ec <UART_SetConfig+0x2d4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d120      	bne.n	8004092 <UART_SetConfig+0x17a>
 8004050:	4b64      	ldr	r3, [pc, #400]	; (80041e4 <UART_SetConfig+0x2cc>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d013      	beq.n	8004086 <UART_SetConfig+0x16e>
 800405e:	2b30      	cmp	r3, #48	; 0x30
 8004060:	d814      	bhi.n	800408c <UART_SetConfig+0x174>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d009      	beq.n	800407a <UART_SetConfig+0x162>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d810      	bhi.n	800408c <UART_SetConfig+0x174>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <UART_SetConfig+0x15c>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d006      	beq.n	8004080 <UART_SetConfig+0x168>
 8004072:	e00b      	b.n	800408c <UART_SetConfig+0x174>
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e0f2      	b.n	8004260 <UART_SetConfig+0x348>
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e0ef      	b.n	8004260 <UART_SetConfig+0x348>
 8004080:	2304      	movs	r3, #4
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e0ec      	b.n	8004260 <UART_SetConfig+0x348>
 8004086:	2308      	movs	r3, #8
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e0e9      	b.n	8004260 <UART_SetConfig+0x348>
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e0e6      	b.n	8004260 <UART_SetConfig+0x348>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a56      	ldr	r2, [pc, #344]	; (80041f0 <UART_SetConfig+0x2d8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0x1c6>
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <UART_SetConfig+0x2cc>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040a6:	2bc0      	cmp	r3, #192	; 0xc0
 80040a8:	d013      	beq.n	80040d2 <UART_SetConfig+0x1ba>
 80040aa:	2bc0      	cmp	r3, #192	; 0xc0
 80040ac:	d814      	bhi.n	80040d8 <UART_SetConfig+0x1c0>
 80040ae:	2b80      	cmp	r3, #128	; 0x80
 80040b0:	d009      	beq.n	80040c6 <UART_SetConfig+0x1ae>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d810      	bhi.n	80040d8 <UART_SetConfig+0x1c0>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <UART_SetConfig+0x1a8>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d006      	beq.n	80040cc <UART_SetConfig+0x1b4>
 80040be:	e00b      	b.n	80040d8 <UART_SetConfig+0x1c0>
 80040c0:	2300      	movs	r3, #0
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0cc      	b.n	8004260 <UART_SetConfig+0x348>
 80040c6:	2302      	movs	r3, #2
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0c9      	b.n	8004260 <UART_SetConfig+0x348>
 80040cc:	2304      	movs	r3, #4
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0c6      	b.n	8004260 <UART_SetConfig+0x348>
 80040d2:	2308      	movs	r3, #8
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e0c3      	b.n	8004260 <UART_SetConfig+0x348>
 80040d8:	2310      	movs	r3, #16
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e0c0      	b.n	8004260 <UART_SetConfig+0x348>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a44      	ldr	r2, [pc, #272]	; (80041f4 <UART_SetConfig+0x2dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d125      	bne.n	8004134 <UART_SetConfig+0x21c>
 80040e8:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <UART_SetConfig+0x2cc>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f6:	d017      	beq.n	8004128 <UART_SetConfig+0x210>
 80040f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fc:	d817      	bhi.n	800412e <UART_SetConfig+0x216>
 80040fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004102:	d00b      	beq.n	800411c <UART_SetConfig+0x204>
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d811      	bhi.n	800412e <UART_SetConfig+0x216>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <UART_SetConfig+0x1fe>
 800410e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004112:	d006      	beq.n	8004122 <UART_SetConfig+0x20a>
 8004114:	e00b      	b.n	800412e <UART_SetConfig+0x216>
 8004116:	2300      	movs	r3, #0
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e0a1      	b.n	8004260 <UART_SetConfig+0x348>
 800411c:	2302      	movs	r3, #2
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e09e      	b.n	8004260 <UART_SetConfig+0x348>
 8004122:	2304      	movs	r3, #4
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e09b      	b.n	8004260 <UART_SetConfig+0x348>
 8004128:	2308      	movs	r3, #8
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e098      	b.n	8004260 <UART_SetConfig+0x348>
 800412e:	2310      	movs	r3, #16
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e095      	b.n	8004260 <UART_SetConfig+0x348>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <UART_SetConfig+0x2e0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d125      	bne.n	800418a <UART_SetConfig+0x272>
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <UART_SetConfig+0x2cc>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414c:	d017      	beq.n	800417e <UART_SetConfig+0x266>
 800414e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004152:	d817      	bhi.n	8004184 <UART_SetConfig+0x26c>
 8004154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004158:	d00b      	beq.n	8004172 <UART_SetConfig+0x25a>
 800415a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415e:	d811      	bhi.n	8004184 <UART_SetConfig+0x26c>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <UART_SetConfig+0x254>
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x260>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x26c>
 800416c:	2301      	movs	r3, #1
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e076      	b.n	8004260 <UART_SetConfig+0x348>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e073      	b.n	8004260 <UART_SetConfig+0x348>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e070      	b.n	8004260 <UART_SetConfig+0x348>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e06d      	b.n	8004260 <UART_SetConfig+0x348>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e06a      	b.n	8004260 <UART_SetConfig+0x348>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <UART_SetConfig+0x2e4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d138      	bne.n	8004206 <UART_SetConfig+0x2ee>
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <UART_SetConfig+0x2cc>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800419e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a2:	d017      	beq.n	80041d4 <UART_SetConfig+0x2bc>
 80041a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a8:	d82a      	bhi.n	8004200 <UART_SetConfig+0x2e8>
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	d00b      	beq.n	80041c8 <UART_SetConfig+0x2b0>
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d824      	bhi.n	8004200 <UART_SetConfig+0x2e8>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <UART_SetConfig+0x2aa>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d006      	beq.n	80041ce <UART_SetConfig+0x2b6>
 80041c0:	e01e      	b.n	8004200 <UART_SetConfig+0x2e8>
 80041c2:	2300      	movs	r3, #0
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e04b      	b.n	8004260 <UART_SetConfig+0x348>
 80041c8:	2302      	movs	r3, #2
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e048      	b.n	8004260 <UART_SetConfig+0x348>
 80041ce:	2304      	movs	r3, #4
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e045      	b.n	8004260 <UART_SetConfig+0x348>
 80041d4:	2308      	movs	r3, #8
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e042      	b.n	8004260 <UART_SetConfig+0x348>
 80041da:	bf00      	nop
 80041dc:	efff69f3 	.word	0xefff69f3
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40004400 	.word	0x40004400
 80041ec:	40004800 	.word	0x40004800
 80041f0:	40004c00 	.word	0x40004c00
 80041f4:	40005000 	.word	0x40005000
 80041f8:	40011400 	.word	0x40011400
 80041fc:	40007800 	.word	0x40007800
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e02c      	b.n	8004260 <UART_SetConfig+0x348>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a72      	ldr	r2, [pc, #456]	; (80043d4 <UART_SetConfig+0x4bc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d125      	bne.n	800425c <UART_SetConfig+0x344>
 8004210:	4b71      	ldr	r3, [pc, #452]	; (80043d8 <UART_SetConfig+0x4c0>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800421a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800421e:	d017      	beq.n	8004250 <UART_SetConfig+0x338>
 8004220:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004224:	d817      	bhi.n	8004256 <UART_SetConfig+0x33e>
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	d00b      	beq.n	8004244 <UART_SetConfig+0x32c>
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004230:	d811      	bhi.n	8004256 <UART_SetConfig+0x33e>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <UART_SetConfig+0x326>
 8004236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423a:	d006      	beq.n	800424a <UART_SetConfig+0x332>
 800423c:	e00b      	b.n	8004256 <UART_SetConfig+0x33e>
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e00d      	b.n	8004260 <UART_SetConfig+0x348>
 8004244:	2302      	movs	r3, #2
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e00a      	b.n	8004260 <UART_SetConfig+0x348>
 800424a:	2304      	movs	r3, #4
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e007      	b.n	8004260 <UART_SetConfig+0x348>
 8004250:	2308      	movs	r3, #8
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e004      	b.n	8004260 <UART_SetConfig+0x348>
 8004256:	2310      	movs	r3, #16
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e001      	b.n	8004260 <UART_SetConfig+0x348>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d15b      	bne.n	8004322 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d828      	bhi.n	80042c2 <UART_SetConfig+0x3aa>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x360>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042b3 	.word	0x080042b3
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042c3 	.word	0x080042c3
 8004294:	080042c3 	.word	0x080042c3
 8004298:	080042bb 	.word	0x080042bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fe56 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80042a0:	61b8      	str	r0, [r7, #24]
        break;
 80042a2:	e013      	b.n	80042cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7fe fe66 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 80042a8:	61b8      	str	r0, [r7, #24]
        break;
 80042aa:	e00f      	b.n	80042cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ac:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <UART_SetConfig+0x4c4>)
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e00c      	b.n	80042cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b2:	f7fe fd39 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 80042b6:	61b8      	str	r0, [r7, #24]
        break;
 80042b8:	e008      	b.n	80042cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042be:	61bb      	str	r3, [r7, #24]
        break;
 80042c0:	e004      	b.n	80042cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d074      	beq.n	80043bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	005a      	lsls	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	441a      	add	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	d916      	bls.n	800431c <UART_SetConfig+0x404>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d212      	bcs.n	800431c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f023 030f 	bic.w	r3, r3, #15
 80042fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	b29a      	uxth	r2, r3
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	4313      	orrs	r3, r2
 8004310:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	89fa      	ldrh	r2, [r7, #14]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e04f      	b.n	80043bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77bb      	strb	r3, [r7, #30]
 8004320:	e04c      	b.n	80043bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d828      	bhi.n	800437a <UART_SetConfig+0x462>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x418>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437b 	.word	0x0800437b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800437b 	.word	0x0800437b
 8004348:	0800437b 	.word	0x0800437b
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004373 	.word	0x08004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7fe fdfa 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e013      	b.n	8004384 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fe0a 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <UART_SetConfig+0x4c4>)
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00c      	b.n	8004384 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7fe fcdd 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 800436e:	61b8      	str	r0, [r7, #24]
        break;
 8004370:	e008      	b.n	8004384 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	61bb      	str	r3, [r7, #24]
        break;
 8004378:	e004      	b.n	8004384 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	77bb      	strb	r3, [r7, #30]
        break;
 8004382:	bf00      	nop
    }

    if (pclk != 0U)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	085a      	lsrs	r2, r3, #1
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d909      	bls.n	80043b8 <UART_SetConfig+0x4a0>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043aa:	d205      	bcs.n	80043b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e001      	b.n	80043bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40007c00 	.word	0x40007c00
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400

080043e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044de:	d10a      	bne.n	80044f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004534:	f7fc ffa2 	bl	800147c <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b08      	cmp	r3, #8
 8004546:	d10e      	bne.n	8004566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f81b 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e011      	b.n	800458a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b09c      	sub	sp, #112	; 0x70
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	e0a7      	b.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045aa:	f000 80a3 	beq.w	80046f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fc ff65 	bl	800147c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80045be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d13f      	bne.n	8004644 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d8:	667b      	str	r3, [r7, #100]	; 0x64
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e6      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3308      	adds	r3, #8
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	663b      	str	r3, [r7, #96]	; 0x60
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004616:	64ba      	str	r2, [r7, #72]	; 0x48
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800461c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e068      	b.n	8004716 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d050      	beq.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004660:	d148      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800466a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
 800468c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e6      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	613b      	str	r3, [r7, #16]
   return(result);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3308      	adds	r3, #8
 80046bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046be:	623a      	str	r2, [r7, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e010      	b.n	8004716 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	429a      	cmp	r2, r3
 8004710:	f43f af48 	beq.w	80045a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3770      	adds	r7, #112	; 0x70
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004720:	b084      	sub	sp, #16
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	f107 001c 	add.w	r0, r7, #28
 800472e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b01      	cmp	r3, #1
 8004736:	d120      	bne.n	800477a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <USB_CoreInit+0xac>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800475c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa96 	bl	8004ca0 <USB_CoreReset>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e010      	b.n	800479c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa8a 	bl	8004ca0 <USB_CoreReset>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10b      	bne.n	80047ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f043 0206 	orr.w	r2, r3, #6
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c6:	b004      	add	sp, #16
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	ffbdffbf 	.word	0xffbdffbf

080047d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 0201 	bic.w	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d115      	bne.n	8004840 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004820:	2001      	movs	r0, #1
 8004822:	f7fc fe37 	bl	8001494 <HAL_Delay>
      ms++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa29 	bl	8004c84 <USB_GetMode>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d01e      	beq.n	8004876 <USB_SetCurrentMode+0x84>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b31      	cmp	r3, #49	; 0x31
 800483c:	d9f0      	bls.n	8004820 <USB_SetCurrentMode+0x2e>
 800483e:	e01a      	b.n	8004876 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004852:	2001      	movs	r0, #1
 8004854:	f7fc fe1e 	bl	8001494 <HAL_Delay>
      ms++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa10 	bl	8004c84 <USB_GetMode>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <USB_SetCurrentMode+0x84>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b31      	cmp	r3, #49	; 0x31
 800486e:	d9f0      	bls.n	8004852 <USB_SetCurrentMode+0x60>
 8004870:	e001      	b.n	8004876 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e005      	b.n	8004882 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b32      	cmp	r3, #50	; 0x32
 800487a:	d101      	bne.n	8004880 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800488c:	b084      	sub	sp, #16
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800489a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e009      	b.n	80048c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3340      	adds	r3, #64	; 0x40
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3301      	adds	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0e      	cmp	r3, #14
 80048c4:	d9f2      	bls.n	80048ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11c      	bne.n	8004906 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048da:	f043 0302 	orr.w	r3, r3, #2
 80048de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e005      	b.n	8004912 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004924:	4619      	mov	r1, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	461a      	mov	r2, r3
 800492e:	680b      	ldr	r3, [r1, #0]
 8004930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800493e:	2100      	movs	r1, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f965 	bl	8004c10 <USB_SetDevSpeed>
 8004946:	e008      	b.n	800495a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004948:	2101      	movs	r1, #1
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f960 	bl	8004c10 <USB_SetDevSpeed>
 8004950:	e003      	b.n	800495a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004952:	2103      	movs	r1, #3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f95b 	bl	8004c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800495a:	2110      	movs	r1, #16
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f8f3 	bl	8004b48 <USB_FlushTxFifo>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f91f 	bl	8004bb0 <USB_FlushRxFifo>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	461a      	mov	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	e043      	b.n	8004a2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049bc:	d118      	bne.n	80049f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	461a      	mov	r2, r3
 80049d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e013      	b.n	8004a02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	461a      	mov	r2, r3
 80049e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e008      	b.n	8004a02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	2300      	movs	r3, #0
 8004a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3b7      	bcc.n	80049a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e043      	b.n	8004ac4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a52:	d118      	bne.n	8004a86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e013      	b.n	8004a98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e008      	b.n	8004a98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3b7      	bcc.n	8004a3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <USB_DevInit+0x2b4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f043 0208 	orr.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <USB_DevInit+0x2b8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b3c:	b004      	add	sp, #16
 8004b3e:	4770      	bx	lr
 8004b40:	803c3800 	.word	0x803c3800
 8004b44:	40000004 	.word	0x40000004

08004b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <USB_FlushTxFifo+0x64>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e01b      	b.n	8004ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	daf2      	bge.n	8004b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	019b      	lsls	r3, r3, #6
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <USB_FlushTxFifo+0x64>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e006      	b.n	8004ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d0f0      	beq.n	8004b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	00030d40 	.word	0x00030d40

08004bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <USB_FlushRxFifo+0x5c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e018      	b.n	8004c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	daf2      	bge.n	8004bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2210      	movs	r2, #16
 8004bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <USB_FlushRxFifo+0x5c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e006      	b.n	8004c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d0f0      	beq.n	8004be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	00030d40 	.word	0x00030d40

08004c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0301 	and.w	r3, r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <USB_CoreReset+0x64>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e01b      	b.n	8004cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	daf2      	bge.n	8004cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <USB_CoreReset+0x64>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d0f0      	beq.n	8004cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	00030d40 	.word	0x00030d40

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4d0d      	ldr	r5, [pc, #52]	; (8004d50 <__libc_init_array+0x38>)
 8004d1c:	4c0d      	ldr	r4, [pc, #52]	; (8004d54 <__libc_init_array+0x3c>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	2600      	movs	r6, #0
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	4d0b      	ldr	r5, [pc, #44]	; (8004d58 <__libc_init_array+0x40>)
 8004d2a:	4c0c      	ldr	r4, [pc, #48]	; (8004d5c <__libc_init_array+0x44>)
 8004d2c:	f000 f818 	bl	8004d60 <_init>
 8004d30:	1b64      	subs	r4, r4, r5
 8004d32:	10a4      	asrs	r4, r4, #2
 8004d34:	2600      	movs	r6, #0
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08004d98 	.word	0x08004d98
 8004d54:	08004d98 	.word	0x08004d98
 8004d58:	08004d98 	.word	0x08004d98
 8004d5c:	08004d9c 	.word	0x08004d9c

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
