
F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dec  08006dec  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df4  08006df4  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08006e68  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08006f08  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000049c  200001ac  08006fa8  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000648  08006fa8  00020648  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017eda  00000000  00000000  0002021f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a9e  00000000  00000000  000380f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001488  00000000  00000000  0003ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001033  00000000  00000000  0003c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027c1f  00000000  00000000  0003d053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018e01  00000000  00000000  00064c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9d06  00000000  00000000  0007da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005dec  00000000  00000000  0017777c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0017d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ac 	.word	0x200001ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c84 	.word	0x08006c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b0 	.word	0x200001b0
 800020c:	08006c84 	.word	0x08006c84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f814 	bl	80015ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f855 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa1b 	bl	8000a04 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ce:	f000 f8b9 	bl	8000744 <MX_ETH_Init>
  MX_I2C1_Init();
 80005d2:	f000 f905 	bl	80007e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d6:	f000 f943 	bl	8000860 <MX_SPI1_Init>
  MX_TIM14_Init();
 80005da:	f000 f985 	bl	80008e8 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f9a9 	bl	8000934 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 f9d7 	bl	8000994 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005e6:	f000 fa05 	bl	80009f4 <MX_USB_OTG_FS_USB_Init>
   * UART
   *
   */

  //init listening to UART
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	491d      	ldr	r1, [pc, #116]	; (8000664 <main+0xa8>)
 80005ee:	481e      	ldr	r0, [pc, #120]	; (8000668 <main+0xac>)
 80005f0:	f004 fc09 	bl	8004e06 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setModeLed();
 80005f4:	f000 faf4 	bl	8000be0 <setModeLed>
  while (1)
  {
	  int delayTime = (6 - USER_MODE) * 100;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0xb0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f1c3 0306 	rsb	r3, r3, #6
 8000600:	2264      	movs	r2, #100	; 0x64
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4818      	ldr	r0, [pc, #96]	; (8000670 <main+0xb4>)
 800060e:	f001 ff0b 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <main+0xb4>)
 800061a:	f001 ff05 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f841 	bl	80016a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0xb4>)
 800062e:	f001 fefb 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0xb4>)
 8000638:	f001 fef6 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f832 	bl	80016a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <main+0xb4>)
 800064a:	f001 feed 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <main+0xb4>)
 8000654:	f001 fee8 	bl	8002428 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f824 	bl	80016a8 <HAL_Delay>
  {
 8000660:	e7ca      	b.n	80005f8 <main+0x3c>
 8000662:	bf00      	nop
 8000664:	200004c4 	.word	0x200004c4
 8000668:	200003b4 	.word	0x200003b4
 800066c:	20000000 	.word	0x20000000
 8000670:	40020400 	.word	0x40020400

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fe7a 	bl	800637c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f002 fd86 	bl	80031a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e8:	2348      	movs	r3, #72	; 0x48
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fd65 	bl	80031c8 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 fc14 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fff3 	bl	8003710 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 fbfe 	bl	8000f30 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ETH_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_ETH_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ETH_Init+0x8c>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ETH_Init+0x84>)
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ETH_Init+0x84>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x84>)
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_ETH_Init+0x90>)
 8000784:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_ETH_Init+0x84>)
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x94>)
 800078a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x84>)
 800078e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000792:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x84>)
 8000796:	f001 f95d 	bl	8001a54 <HAL_ETH_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 fbc6 	bl	8000f30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a4:	2238      	movs	r2, #56	; 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x98>)
 80007aa:	f005 fde7 	bl	800637c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_ETH_Init+0x98>)
 80007b0:	2221      	movs	r2, #33	; 0x21
 80007b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_ETH_Init+0x98>)
 80007b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_ETH_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000200 	.word	0x20000200
 80007cc:	40028000 	.word	0x40028000
 80007d0:	200004f0 	.word	0x200004f0
 80007d4:	2000010c 	.word	0x2000010c
 80007d8:	2000006c 	.word	0x2000006c
 80007dc:	200001c8 	.word	0x200001c8

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_I2C1_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_I2C1_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_I2C1_Init+0x74>)
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <MX_I2C1_Init+0x7c>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_I2C1_Init+0x74>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081a:	480e      	ldr	r0, [pc, #56]	; (8000854 <MX_I2C1_Init+0x74>)
 800081c:	f001 fe1e 	bl	800245c <HAL_I2C_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000826:	f000 fb83 	bl	8000f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <MX_I2C1_Init+0x74>)
 800082e:	f002 fc24 	bl	800307a <HAL_I2CEx_ConfigAnalogFilter>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 fb7a 	bl	8000f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_I2C1_Init+0x74>)
 8000840:	f002 fc66 	bl	8003110 <HAL_I2CEx_ConfigDigitalFilter>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084a:	f000 fb71 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002b0 	.word	0x200002b0
 8000858:	40005400 	.word	0x40005400
 800085c:	00808cd2 	.word	0x00808cd2

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_SPI1_Init+0x7c>)
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <MX_SPI1_Init+0x80>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_SPI1_Init+0x7c>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_SPI1_Init+0x7c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_SPI1_Init+0x7c>)
 800087a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI1_Init+0x7c>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_SPI1_Init+0x7c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_SPI1_Init+0x7c>)
 800088e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI1_Init+0x7c>)
 8000896:	2218      	movs	r2, #24
 8000898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_SPI1_Init+0x7c>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_SPI1_Init+0x7c>)
 80008c0:	f003 fd3c 	bl	800433c <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fb31 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  HAL_GPIO_WritePin(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_SPI1_Init+0x84>)
 80008d4:	f001 fda8 	bl	8002428 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000304 	.word	0x20000304
 80008e0:	40013000 	.word	0x40013000
 80008e4:	40020400 	.word	0x40020400

080008e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_TIM14_Init+0x44>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <MX_TIM14_Init+0x48>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_TIM14_Init+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_TIM14_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_TIM14_Init+0x44>)
 8000900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000904:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_TIM14_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_TIM14_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_TIM14_Init+0x44>)
 8000914:	f003 fed1 	bl	80046ba <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800091e:	f000 fb07 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000922:	4802      	ldr	r0, [pc, #8]	; (800092c <MX_TIM14_Init+0x44>)
 8000924:	f003 ff20 	bl	8004768 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000368 	.word	0x20000368
 8000930:	40002000 	.word	0x40002000

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f004 f974 	bl	8004c64 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 fad5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200003b4 	.word	0x200003b4
 8000990:	40004400 	.word	0x40004400

08000994 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART3_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART3_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART3_UART_Init+0x58>)
 80009d8:	f004 f944 	bl	8004c64 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 faa5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000043c 	.word	0x2000043c
 80009f0:	40004800 	.word	0x40004800

080009f4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4b65      	ldr	r3, [pc, #404]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a64      	ldr	r2, [pc, #400]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b62      	ldr	r3, [pc, #392]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b5f      	ldr	r3, [pc, #380]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a5e      	ldr	r2, [pc, #376]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a58      	ldr	r2, [pc, #352]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b56      	ldr	r3, [pc, #344]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a52      	ldr	r2, [pc, #328]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a4c      	ldr	r2, [pc, #304]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <MX_GPIO_Init+0x1ac>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	217c      	movs	r1, #124	; 0x7c
 8000ac6:	483b      	ldr	r0, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x1b0>)
 8000ac8:	f001 fcae 	bl	8002428 <HAL_GPIO_WritePin>
                          |LED_R_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin|LD3_R_Pin|LD2_B_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ad2:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000ad4:	f001 fca8 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_ERR_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2144      	movs	r1, #68	; 0x44
 8000adc:	4837      	ldr	r0, [pc, #220]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000ade:	f001 fca3 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_5_Pin LED_R_2_Pin LED_R_3_Pin
                           LED_R_4_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000ae2:	237c      	movs	r3, #124	; 0x7c
 8000ae4:	61fb      	str	r3, [r7, #28]
                          |LED_R_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x1b0>)
 8000afa:	f001 fad1 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000b16:	f001 fac3 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_G_Pin LD3_R_Pin LD2_B_Pin */
  GPIO_InitStruct.Pin = LD1_G_Pin|LD3_R_Pin|LD2_B_Pin;
 8000b1a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000b34:	f001 fab4 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_R_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_R_Pin|BTN_SET_Pin;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b4c:	f001 faa8 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ERR_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin|USB_PowerSwitchOn_Pin;
 8000b50:	2344      	movs	r3, #68	; 0x44
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b68:	f001 fa9a 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b80:	f001 fa8e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b96:	230a      	movs	r3, #10
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_GPIO_Init+0x1c0>)
 8000ba2:	f001 fa7d 	bl	80020a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3730      	adds	r7, #48	; 0x30
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021800 	.word	0x40021800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <resetModeLed>:

/* USER CODE BEGIN 4 */
void resetModeLed(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000bcc:	2200      	movs	r2, #0
 8000bce:	217c      	movs	r1, #124	; 0x7c
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <resetModeLed+0x14>)
 8000bd2:	f001 fc29 	bl	8002428 <HAL_GPIO_WritePin>
					GPIOE,
					LED_R_1_Pin|LED_R_2_Pin|LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <setModeLed>:

void setModeLed(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if(USER_MODE == 1)
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <setModeLed+0x78>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d106      	bne.n	8000bfa <setModeLed+0x1a>
	{
	  resetModeLed();
 8000bec:	f7ff ffec 	bl	8000bc8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <setModeLed+0x7c>)
 8000bf6:	f001 fc17 	bl	8002428 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 2)
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <setModeLed+0x78>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d106      	bne.n	8000c10 <setModeLed+0x30>
	{
	  resetModeLed();
 8000c02:	f7ff ffe1 	bl	8000bc8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_2_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <setModeLed+0x7c>)
 8000c0c:	f001 fc0c 	bl	8002428 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 3)
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <setModeLed+0x78>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d106      	bne.n	8000c26 <setModeLed+0x46>
	{
	  resetModeLed();
 8000c18:	f7ff ffd6 	bl	8000bc8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_3_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <setModeLed+0x7c>)
 8000c22:	f001 fc01 	bl	8002428 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 4)
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <setModeLed+0x78>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d106      	bne.n	8000c3c <setModeLed+0x5c>
	{
	  resetModeLed();
 8000c2e:	f7ff ffcb 	bl	8000bc8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_4_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <setModeLed+0x7c>)
 8000c38:	f001 fbf6 	bl	8002428 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 5)
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <setModeLed+0x78>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d106      	bne.n	8000c52 <setModeLed+0x72>
	{
	  resetModeLed();
 8000c44:	f7ff ffc0 	bl	8000bc8 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_5_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <setModeLed+0x7c>)
 8000c4e:	f001 fbeb 	bl	8002428 <HAL_GPIO_WritePin>
	}
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	40021000 	.word	0x40021000

08000c60 <UART_Transmit>:

void UART_Transmit(void* data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	char tx_buffer[20];
	sprintf(tx_buffer, "%d", data);
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	490b      	ldr	r1, [pc, #44]	; (8000c9c <UART_Transmit+0x3c>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fad7 	bl	8006224 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 0xFFFF);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fac8 	bl	8000210 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f107 010c 	add.w	r1, r7, #12
 8000c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <UART_Transmit+0x40>)
 8000c8e:	f004 f837 	bl	8004d00 <HAL_UART_Transmit>

}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08006c9c 	.word	0x08006c9c
 8000ca0:	200003b4 	.word	0x200003b4

08000ca4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	if(htim == &htim14)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a7c      	ldr	r2, [pc, #496]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f040 80f0 	bne.w	8000e96 <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_R_Pin);
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	487a      	ldr	r0, [pc, #488]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cba:	f001 fb9d 	bl	80023f8 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b79      	ldr	r3, [pc, #484]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cc4:	801a      	strh	r2, [r3, #0]
		BTN_SET_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_SET_Pin);
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	4876      	ldr	r0, [pc, #472]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cca:	f001 fb95 	bl	80023f8 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cd4:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_B_Pin);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4872      	ldr	r0, [pc, #456]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cda:	f001 fb8d 	bl	80023f8 <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ce4:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 8000ce6:	4b70      	ldr	r3, [pc, #448]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d027      	beq.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x9e>
		{

			++BTN_RED_press_slowCount;
 8000cf2:	4b71      	ldr	r3, [pc, #452]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b6f      	ldr	r3, [pc, #444]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000cfc:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dd1a      	ble.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x9e>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_press_slowCount = 0;
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 8000d12:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d010      	beq.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x9e>
				{
					USER_MODE = USER_MODE + 1;
 8000d20:	4b68      	ldr	r3, [pc, #416]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a67      	ldr	r2, [pc, #412]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d28:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 6)
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d102      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x94>
					{

						USER_MODE = 1;
 8000d32:	4b64      	ldr	r3, [pc, #400]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

					}


					setModeLed();
 8000d38:	f7ff ff52 	bl	8000be0 <setModeLed>
					BTN_RED_isPressed = true;
 8000d3c:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d027      	beq.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0xfa>
		{

			++BTN_BLUE_press_slowCount;
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d58:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd1a      	ble.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0xfa>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_press_slowCount = 0;
 8000d68:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 8000d6e:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d010      	beq.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0xfa>
				{
					USER_MODE = USER_MODE - 1;
 8000d7c:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d84:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 0)
 8000d86:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0xf0>
					{

						USER_MODE = 5;
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d90:	2205      	movs	r2, #5
 8000d92:	601a      	str	r2, [r3, #0]

					}

					setModeLed();
 8000d94:	f7ff ff24 	bl	8000be0 <setModeLed>
					BTN_BLUE_isPressed = true;
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on SET btn
		if(BTN_SET_currentState != BTN_SET_initState)
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d01e      	beq.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x144>
		{

			++BTN_SET_press_slowCount;
 8000daa:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000db4:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000db6:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd11      	ble.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x144>
			{
				//if you are here than RED BTN is pressed
				BTN_SET_press_slowCount = 0;
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_SET_isPressed == false)
 8000dca:	4b44      	ldr	r3, [pc, #272]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x144>
				{

					UART_Transmit(USER_MODE);
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff3f 	bl	8000c60 <UART_Transmit>

					BTN_SET_isPressed = true;
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d116      	bne.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d012      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x17e>
		{

			++BTN_RED_release_slowCount;
 8000dfc:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e06:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dd05      	ble.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x17e>
			{

				BTN_RED_isPressed = false;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
				BTN_RED_release_slowCount = 0;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d116      	bne.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d012      	beq.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>
		{

			++BTN_BLUE_release_slowCount;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e40:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd05      	ble.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>
			{

				BTN_BLUE_isPressed = false;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_release_slowCount = 0;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off SET btn
		if(BTN_SET_currentState == BTN_SET_initState && BTN_SET_isPressed == true)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e5e:	881a      	ldrh	r2, [r3, #0]
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d116      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d012      	beq.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x1f2>
		{

			++BTN_SET_release_slowCount;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e7a:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	dd05      	ble.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x1f2>
			{

				BTN_SET_isPressed = false;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
				BTN_SET_release_slowCount = 0;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000368 	.word	0x20000368
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	200004d8 	.word	0x200004d8
 8000eac:	200004e8 	.word	0x200004e8
 8000eb0:	200004e0 	.word	0x200004e0
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200004da 	.word	0x200004da
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	200004de 	.word	0x200004de
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	2000000a 	.word	0x2000000a
 8000ecc:	200004e2 	.word	0x200004e2
 8000ed0:	200004e6 	.word	0x200004e6
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	200004ea 	.word	0x200004ea
 8000edc:	200004ee 	.word	0x200004ee
 8000ee0:	200004dc 	.word	0x200004dc
 8000ee4:	200004e4 	.word	0x200004e4
 8000ee8:	200004ec 	.word	0x200004ec

08000eec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_UART_RxCpltCallback+0x34>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10c      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0x2c>
  {
	//userCode
    USER_MODE = atoi(rx_buffer);
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_UART_RxCpltCallback+0x38>)
 8000f00:	f005 f98c 	bl	800621c <atoi>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_UART_RxCpltCallback+0x3c>)
 8000f08:	6013      	str	r3, [r2, #0]
    setModeLed();
 8000f0a:	f7ff fe69 	bl	8000be0 <setModeLed>

    //init listening to UART
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <HAL_UART_RxCpltCallback+0x38>)
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <HAL_UART_RxCpltCallback+0x40>)
 8000f14:	f003 ff77 	bl	8004e06 <HAL_UART_Receive_IT>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	200004c4 	.word	0x200004c4
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	200003b4 	.word	0x200003b4

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <Error_Handler+0x14>)
 8000f3e:	f001 fa73 	bl	8002428 <HAL_GPIO_WritePin>
 8000f42:	e7f9      	b.n	8000f38 <Error_Handler+0x8>
 8000f44:	40021800 	.word	0x40021800

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	; 0x38
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_ETH_MspInit+0x158>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	f040 8096 	bne.w	80010e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4b41      	ldr	r3, [pc, #260]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a40      	ldr	r2, [pc, #256]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b35      	ldr	r3, [pc, #212]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a34      	ldr	r2, [pc, #208]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800105c:	2332      	movs	r3, #50	; 0x32
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106c:	230b      	movs	r3, #11
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <HAL_ETH_MspInit+0x160>)
 8001078:	f001 f812 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800107c:	2386      	movs	r3, #134	; 0x86
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4817      	ldr	r0, [pc, #92]	; (80010f4 <HAL_ETH_MspInit+0x164>)
 8001098:	f001 f802 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ae:	230b      	movs	r3, #11
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <HAL_ETH_MspInit+0x168>)
 80010ba:	f000 fff1 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_ETH_MspInit+0x16c>)
 80010dc:	f000 ffe0 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	; 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40028000 	.word	0x40028000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40021800 	.word	0x40021800

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0aa      	sub	sp, #168	; 0xa8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f005 f92b 	bl	800637c <memset>
  if(hi2c->Instance==I2C1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <HAL_I2C_MspInit+0xd4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d14c      	bne.n	80011ca <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001134:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fd0c 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800114a:	f7ff fef1 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800118a:	4619      	mov	r1, r3
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <HAL_I2C_MspInit+0xdc>)
 800118e:	f000 ff87 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 8001198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_I2C_MspInit+0xd8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 14, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210e      	movs	r1, #14
 80011ae:	201f      	movs	r0, #31
 80011b0:	f000 fb79 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011b4:	201f      	movs	r0, #31
 80011b6:	f000 fb92 	bl	80018de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 13, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	210d      	movs	r1, #13
 80011be:	2020      	movs	r0, #32
 80011c0:	f000 fb71 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011c4:	2020      	movs	r0, #32
 80011c6:	f000 fb8a 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	37a8      	adds	r7, #168	; 0xa8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_SPI_MspInit+0xc4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d14b      	bne.n	800129a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_SPI_MspInit+0xc8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800124a:	2310      	movs	r3, #16
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125a:	2305      	movs	r3, #5
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <HAL_SPI_MspInit+0xcc>)
 8001266:	f000 ff1b 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800126a:	2338      	movs	r3, #56	; 0x38
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800127a:	2305      	movs	r3, #5
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <HAL_SPI_MspInit+0xd0>)
 8001286:	f000 ff0b 	bl	80020a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 14, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210e      	movs	r1, #14
 800128e:	2023      	movs	r0, #35	; 0x23
 8001290:	f000 fb09 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001294:	2023      	movs	r0, #35	; 0x23
 8001296:	f000 fb22 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d113      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	210f      	movs	r1, #15
 80012e2:	202d      	movs	r0, #45	; 0x2d
 80012e4:	f000 fadf 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012e8:	202d      	movs	r0, #45	; 0x2d
 80012ea:	f000 faf8 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40002000 	.word	0x40002000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ac      	sub	sp, #176	; 0xb0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	2284      	movs	r2, #132	; 0x84
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f82b 	bl	800637c <memset>
  if(huart->Instance==USART2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a46      	ldr	r2, [pc, #280]	; (8001444 <HAL_UART_MspInit+0x144>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d143      	bne.n	80013b8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fc0d 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001348:	f7ff fdf2 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_UART_MspInit+0x148>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a3d      	ldr	r2, [pc, #244]	; (8001448 <HAL_UART_MspInit+0x148>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_UART_MspInit+0x148>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_UART_MspInit+0x148>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a37      	ldr	r2, [pc, #220]	; (8001448 <HAL_UART_MspInit+0x148>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_UART_MspInit+0x148>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD3     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800137c:	2368      	movs	r3, #104	; 0x68
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139e:	4619      	mov	r1, r3
 80013a0:	482a      	ldr	r0, [pc, #168]	; (800144c <HAL_UART_MspInit+0x14c>)
 80013a2:	f000 fe7d 	bl	80020a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210e      	movs	r1, #14
 80013aa:	2026      	movs	r0, #38	; 0x26
 80013ac:	f000 fa7b 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b0:	2026      	movs	r0, #38	; 0x26
 80013b2:	f000 fa94 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b6:	e041      	b.n	800143c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a24      	ldr	r2, [pc, #144]	; (8001450 <HAL_UART_MspInit+0x150>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d13c      	bne.n	800143c <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fbc3 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80013dc:	f7ff fda8 	bl	8000f30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_UART_MspInit+0x148>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x148>)
 80013e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_UART_MspInit+0x148>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_UART_MspInit+0x148>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_UART_MspInit+0x148>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6313      	str	r3, [r2, #48]	; 0x30
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_UART_MspInit+0x148>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800142a:	2307      	movs	r3, #7
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_MspInit+0x14c>)
 8001438:	f000 fe32 	bl	80020a0 <HAL_GPIO_Init>
}
 800143c:	bf00      	nop
 800143e:	37b0      	adds	r7, #176	; 0xb0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40004400 	.word	0x40004400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40004800 	.word	0x40004800

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f8e2 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <I2C1_EV_IRQHandler+0x10>)
 80014ae:	f001 f865 	bl	800257c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002b0 	.word	0x200002b0

080014bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <I2C1_ER_IRQHandler+0x10>)
 80014c2:	f001 f875 	bl	80025b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002b0 	.word	0x200002b0

080014d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <SPI1_IRQHandler+0x10>)
 80014d6:	f002 ffdd 	bl	8004494 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000304 	.word	0x20000304

080014e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART2_IRQHandler+0x10>)
 80014ea:	f003 fcd1 	bl	8004e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200003b4 	.word	0x200003b4

080014f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80014fe:	f003 f9ab 	bl	8004858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000368 	.word	0x20000368

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 ff26 	bl	800638c <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20050000 	.word	0x20050000
 800156c:	00000400 	.word	0x00000400
 8001570:	200004f8 	.word	0x200004f8
 8001574:	20000648 	.word	0x20000648

08001578 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b8:	4c0b      	ldr	r4, [pc, #44]	; (80015e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c6:	f7ff ffd7 	bl	8001578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f004 fee5 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ce:	f7fe fff5 	bl	80005bc <main>
  bx  lr    
 80015d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015e0:	08006dfc 	.word	0x08006dfc
  ldr r2, =_sbss
 80015e4:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80015e8:	20000648 	.word	0x20000648

080015ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC_IRQHandler>

080015ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 f94c 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f805 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fe:	f7ff fca3 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f967 	bl	80018fa <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001644:	f000 f92f 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000010 	.word	0x20000010
 8001660:	20000018 	.word	0x20000018
 8001664:	20000014 	.word	0x20000014

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000018 	.word	0x20000018
 800168c:	200004fc 	.word	0x200004fc

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200004fc 	.word	0x200004fc

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000018 	.word	0x20000018

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <__NVIC_SetPriorityGrouping+0x40>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	4313      	orrs	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x40>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	05fa0000 	.word	0x05fa0000

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff feb6 	bl	8001690 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e052      	b.n	80019ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0216 	bic.w	r2, r2, #22
 8001952:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001962:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <HAL_DMA_Abort+0x62>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0208 	bic.w	r2, r2, #8
 8001982:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e013      	b.n	80019be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff fe7b 	bl	8001690 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d90c      	bls.n	80019be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e015      	b.n	80019ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e4      	bne.n	8001996 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d004      	beq.n	8001a10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e00c      	b.n	8001a2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2205      	movs	r2, #5
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a44:	b2db      	uxtb	r3, r3
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06a      	b.n	8001b3c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d106      	bne.n	8001a7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2223      	movs	r2, #35	; 0x23
 8001a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fa89 	bl	8000f90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_ETH_Init+0xf0>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a30      	ldr	r2, [pc, #192]	; (8001b44 <HAL_ETH_Init+0xf0>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_ETH_Init+0xf0>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_ETH_Init+0xf4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_ETH_Init+0xf4>)
 8001a9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aa0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_ETH_Init+0xf4>)
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4927      	ldr	r1, [pc, #156]	; (8001b48 <HAL_ETH_Init+0xf4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_ETH_Init+0xf4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff fde0 	bl	8001690 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ad2:	e011      	b.n	8001af8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ad4:	f7ff fddc 	bl	8001690 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ae2:	d909      	bls.n	8001af8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	22e0      	movs	r2, #224	; 0xe0
 8001af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e021      	b.n	8001b3c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e4      	bne.n	8001ad4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f958 	bl	8001dc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f9ff 	bl	8001f14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa55 	bl	8001fc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	461a      	mov	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f9bd 	bl	8001ea4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2210      	movs	r2, #16
 8001b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800

08001b4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <ETH_SetMACConfig+0x15c>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	7c1b      	ldrb	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <ETH_SetMACConfig+0x28>
 8001b6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b72:	e000      	b.n	8001b76 <ETH_SetMACConfig+0x2a>
 8001b74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7c5b      	ldrb	r3, [r3, #17]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <ETH_SetMACConfig+0x38>
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b82:	e000      	b.n	8001b86 <ETH_SetMACConfig+0x3a>
 8001b84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7fdb      	ldrb	r3, [r3, #31]
 8001b92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	7f92      	ldrb	r2, [r2, #30]
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d102      	bne.n	8001baa <ETH_SetMACConfig+0x5e>
 8001ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0x60>
 8001baa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	7f1b      	ldrb	r3, [r3, #28]
 8001bb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001bc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d102      	bne.n	8001bd4 <ETH_SetMACConfig+0x88>
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	e000      	b.n	8001bd6 <ETH_SetMACConfig+0x8a>
 8001bd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7bdb      	ldrb	r3, [r3, #15]
 8001bdc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001be4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff fd4e 	bl	80016a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d101      	bne.n	8001c3a <ETH_SetMACConfig+0xee>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0xf0>
 8001c3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c4a:	2a01      	cmp	r2, #1
 8001c4c:	d101      	bne.n	8001c52 <ETH_SetMACConfig+0x106>
 8001c4e:	2208      	movs	r2, #8
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x108>
 8001c52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001c5c:	2a01      	cmp	r2, #1
 8001c5e:	d101      	bne.n	8001c64 <ETH_SetMACConfig+0x118>
 8001c60:	2204      	movs	r2, #4
 8001c62:	e000      	b.n	8001c66 <ETH_SetMACConfig+0x11a>
 8001c64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d101      	bne.n	8001c76 <ETH_SetMACConfig+0x12a>
 8001c72:	2202      	movs	r2, #2
 8001c74:	e000      	b.n	8001c78 <ETH_SetMACConfig+0x12c>
 8001c76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff fd09 	bl	80016a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ff20810f 	.word	0xff20810f

08001cac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <ETH_SetDMAConfig+0x110>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7b1b      	ldrb	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <ETH_SetDMAConfig+0x2c>
 8001cd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd6:	e000      	b.n	8001cda <ETH_SetDMAConfig+0x2e>
 8001cd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7b5b      	ldrb	r3, [r3, #13]
 8001cde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ce0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	7f52      	ldrb	r2, [r2, #29]
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d102      	bne.n	8001cf0 <ETH_SetDMAConfig+0x44>
 8001cea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cee:	e000      	b.n	8001cf2 <ETH_SetDMAConfig+0x46>
 8001cf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cf2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	7b9b      	ldrb	r3, [r3, #14]
 8001cf8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cfa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	7f1b      	ldrb	r3, [r3, #28]
 8001d06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7f9b      	ldrb	r3, [r3, #30]
 8001d0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff fcb0 	bl	80016a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d50:	461a      	mov	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff fc81 	bl	80016a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f8de3f23 	.word	0xf8de3f23

08001dc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0a6      	sub	sp, #152	; 0x98
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fe86 	bl	8001b4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e44:	2301      	movs	r3, #1
 8001e46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff08 	bl	8001cac <ETH_SetDMAConfig>
}
 8001e9c:	bf00      	nop
 8001e9e:	3798      	adds	r7, #152	; 0x98
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3305      	adds	r3, #5
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	3204      	adds	r2, #4
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <ETH_MACAddressConfig+0x68>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3302      	adds	r3, #2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <ETH_MACAddressConfig+0x6c>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40028040 	.word	0x40028040
 8001f10:	40028044 	.word	0x40028044

08001f14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e03e      	b.n	8001fa0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68d9      	ldr	r1, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	3206      	adds	r2, #6
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d80c      	bhi.n	8001f84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	e004      	b.n	8001f8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d9bd      	bls.n	8001f22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb8:	611a      	str	r2, [r3, #16]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e046      	b.n	8002062 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6919      	ldr	r1, [r3, #16]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002010:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002018:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	3212      	adds	r2, #18
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d80c      	bhi.n	8002052 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	e004      	b.n	800205c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d9b5      	bls.n	8001fd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002092:	60da      	str	r2, [r3, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e175      	b.n	80023ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8164 	bne.w	80023a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x56>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80be 	beq.w	80023a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_GPIO_Init+0x324>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_GPIO_Init+0x324>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002242:	4a61      	ldr	r2, [pc, #388]	; (80023c8 <HAL_GPIO_Init+0x328>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_GPIO_Init+0x32c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d037      	beq.n	80022de <HAL_GPIO_Init+0x23e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d031      	beq.n	80022da <HAL_GPIO_Init+0x23a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x236>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a55      	ldr	r2, [pc, #340]	; (80023d8 <HAL_GPIO_Init+0x338>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x232>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a54      	ldr	r2, [pc, #336]	; (80023dc <HAL_GPIO_Init+0x33c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x22e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a53      	ldr	r2, [pc, #332]	; (80023e0 <HAL_GPIO_Init+0x340>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x22a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_GPIO_Init+0x344>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_GPIO_Init+0x348>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a50      	ldr	r2, [pc, #320]	; (80023ec <HAL_GPIO_Init+0x34c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <HAL_GPIO_Init+0x350>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x21a>
 80022b6:	2309      	movs	r3, #9
 80022b8:	e012      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ba:	230a      	movs	r3, #10
 80022bc:	e010      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00e      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022f0:	4935      	ldr	r1, [pc, #212]	; (80023c8 <HAL_GPIO_Init+0x328>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002322:	4a34      	ldr	r2, [pc, #208]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_GPIO_Init+0x354>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae86 	bls.w	80020c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40021c00 	.word	0x40021c00
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40022400 	.word	0x40022400
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e001      	b.n	800241a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fe3c 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d104      	bne.n	80024f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_I2C_Init+0x11c>)
 8002502:	430b      	orrs	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	68f9      	ldr	r1, [r7, #12]
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
  }
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00f      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00f      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f043 0208 	orr.w	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002644:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 030b 	and.w	r3, r3, #11
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fb77 	bl	8002d4c <I2C_ITError>
  }
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
 800269a:	4613      	mov	r3, r2
 800269c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <I2C_Slave_ISR_IT+0x24>
 8002706:	2302      	movs	r3, #2
 8002708:	e0e1      	b.n	80028ce <I2C_Slave_ISR_IT+0x1e8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002726:	6939      	ldr	r1, [r7, #16]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f9b5 	bl	8002a98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d04b      	beq.n	80027d0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800273e:	2b00      	cmp	r3, #0
 8002740:	d046      	beq.n	80027d0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d128      	bne.n	800279e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b28      	cmp	r3, #40	; 0x28
 8002756:	d108      	bne.n	800276a <I2C_Slave_ISR_IT+0x84>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275e:	d104      	bne.n	800276a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002760:	6939      	ldr	r1, [r7, #16]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fa9e 	bl	8002ca4 <I2C_ITListenCplt>
 8002768:	e031      	b.n	80027ce <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b29      	cmp	r3, #41	; 0x29
 8002774:	d10e      	bne.n	8002794 <I2C_Slave_ISR_IT+0xae>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800277c:	d00a      	beq.n	8002794 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fbd7 	bl	8002f3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f926 	bl	80029de <I2C_ITSlaveSeqCplt>
 8002792:	e01c      	b.n	80027ce <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2210      	movs	r2, #16
 800279a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800279c:	e08f      	b.n	80028be <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2210      	movs	r2, #16
 80027a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <I2C_Slave_ISR_IT+0xda>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027be:	d17e      	bne.n	80028be <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	4619      	mov	r1, r3
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fac0 	bl	8002d4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027cc:	e077      	b.n	80028be <I2C_Slave_ISR_IT+0x1d8>
 80027ce:	e076      	b.n	80028be <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02f      	beq.n	800283a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d02a      	beq.n	800283a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d14b      	bne.n	80028c2 <I2C_Slave_ISR_IT+0x1dc>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002830:	d047      	beq.n	80028c2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f8d3 	bl	80029de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002838:	e043      	b.n	80028c2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800284e:	6939      	ldr	r1, [r7, #16]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f840 	bl	80028d6 <I2C_ITAddrCplt>
 8002856:	e035      	b.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d030      	beq.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02b      	beq.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d018      	beq.n	80028a8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80028a6:	e00d      	b.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ae:	d002      	beq.n	80028b6 <I2C_Slave_ISR_IT+0x1d0>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f891 	bl	80029de <I2C_ITSlaveSeqCplt>
 80028bc:	e002      	b.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80028c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028ec:	2b28      	cmp	r3, #40	; 0x28
 80028ee:	d16a      	bne.n	80029c6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b29b      	uxth	r3, r3
 800290a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800290e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800292a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d138      	bne.n	80029a6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	09db      	lsrs	r3, r3, #7
 8002938:	b29a      	uxth	r2, r3
 800293a:	89bb      	ldrh	r3, [r7, #12]
 800293c:	4053      	eors	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f003 0306 	and.w	r3, r3, #6
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11c      	bne.n	8002982 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	2b02      	cmp	r3, #2
 800295c:	d13b      	bne.n	80029d6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2208      	movs	r2, #8
 800296a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002974:	89ba      	ldrh	r2, [r7, #12]
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fe87 	bl	800268e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002980:	e029      	b.n	80029d6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002982:	893b      	ldrh	r3, [r7, #8]
 8002984:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fb17 	bl	8002fbe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002998:	89ba      	ldrh	r2, [r7, #12]
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fe75 	bl	800268e <HAL_I2C_AddrCallback>
}
 80029a4:	e017      	b.n	80029d6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fb07 	bl	8002fbe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029b8:	89ba      	ldrh	r2, [r7, #12]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fe65 	bl	800268e <HAL_I2C_AddrCallback>
}
 80029c4:	e007      	b.n	80029d6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2208      	movs	r2, #8
 80029cc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e00c      	b.n	8002a2c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b29      	cmp	r3, #41	; 0x29
 8002a36:	d112      	bne.n	8002a5e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2228      	movs	r2, #40	; 0x28
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2221      	movs	r2, #33	; 0x21
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a46:	2101      	movs	r1, #1
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fab8 	bl	8002fbe <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fe05 	bl	8002666 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a5c:	e017      	b.n	8002a8e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b2a      	cmp	r3, #42	; 0x2a
 8002a68:	d111      	bne.n	8002a8e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2228      	movs	r2, #40	; 0x28
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2222      	movs	r2, #34	; 0x22
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa9f 	bl	8002fbe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fdf6 	bl	800267a <HAL_I2C_SlaveRxCpltCallback>
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2220      	movs	r2, #32
 8002abc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b21      	cmp	r3, #33	; 0x21
 8002ac2:	d002      	beq.n	8002aca <I2C_ITSlaveCplt+0x32>
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b29      	cmp	r3, #41	; 0x29
 8002ac8:	d108      	bne.n	8002adc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002aca:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa75 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2221      	movs	r2, #33	; 0x21
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8002ada:	e00d      	b.n	8002af8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b22      	cmp	r3, #34	; 0x22
 8002ae0:	d002      	beq.n	8002ae8 <I2C_ITSlaveCplt+0x50>
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae6:	d107      	bne.n	8002af8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ae8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa66 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2222      	movs	r2, #34	; 0x22
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <I2C_ITSlaveCplt+0x204>)
 8002b14:	400b      	ands	r3, r1
 8002b16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa0e 	bl	8002f3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01f      	beq.n	8002b80 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b4e:	e017      	b.n	8002b80 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d020      	beq.n	8002bcc <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8a4 	bl	8002d4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b28      	cmp	r3, #40	; 0x28
 8002c0e:	d141      	bne.n	8002c94 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f846 	bl	8002ca4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c18:	e03c      	b.n	8002c94 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c22:	d014      	beq.n	8002c4e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff feda 	bl	80029de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <I2C_ITSlaveCplt+0x208>)
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fd2f 	bl	80026aa <HAL_I2C_ListenCpltCallback>
}
 8002c4c:	e022      	b.n	8002c94 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b22      	cmp	r3, #34	; 0x22
 8002c58:	d10e      	bne.n	8002c78 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fd02 	bl	800267a <HAL_I2C_SlaveRxCpltCallback>
}
 8002c76:	e00d      	b.n	8002c94 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fce9 	bl	8002666 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c94:	bf00      	nop
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	fe00e800 	.word	0xfe00e800
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <I2C_ITListenCplt+0xa4>)
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d022      	beq.n	8002d20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d20:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94a 	bl	8002fbe <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fcb5 	bl	80026aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	ffff0000 	.word	0xffff0000

08002d4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <I2C_ITError+0x194>)
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b28      	cmp	r3, #40	; 0x28
 8002d82:	d005      	beq.n	8002d90 <I2C_ITError+0x44>
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b29      	cmp	r3, #41	; 0x29
 8002d88:	d002      	beq.n	8002d90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8e:	d10b      	bne.n	8002da8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d90:	2103      	movs	r1, #3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f913 	bl	8002fbe <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2228      	movs	r2, #40	; 0x28
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <I2C_ITError+0x198>)
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	e011      	b.n	8002dcc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002da8:	f248 0103 	movw	r1, #32771	; 0x8003
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f906 	bl	8002fbe <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b60      	cmp	r3, #96	; 0x60
 8002dbc:	d003      	beq.n	8002dc6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d039      	beq.n	8002e4e <I2C_ITError+0x102>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b11      	cmp	r3, #17
 8002dde:	d002      	beq.n	8002de6 <I2C_ITError+0x9a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b21      	cmp	r3, #33	; 0x21
 8002de4:	d133      	bne.n	8002e4e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df4:	d107      	bne.n	8002e06 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fe13 	bl	8001a36 <HAL_DMA_GetState>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d017      	beq.n	8002e46 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <I2C_ITError+0x19c>)
 8002e1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fde1 	bl	80019f2 <HAL_DMA_Abort_IT>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04d      	beq.n	8002ed2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e44:	e045      	b.n	8002ed2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f850 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e4c:	e041      	b.n	8002ed2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d039      	beq.n	8002eca <I2C_ITError+0x17e>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b12      	cmp	r3, #18
 8002e5a:	d002      	beq.n	8002e62 <I2C_ITError+0x116>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b22      	cmp	r3, #34	; 0x22
 8002e60:	d133      	bne.n	8002eca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d107      	bne.n	8002e82 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fdd5 	bl	8001a36 <HAL_DMA_GetState>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d017      	beq.n	8002ec2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <I2C_ITError+0x19c>)
 8002e98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fda3 	bl	80019f2 <HAL_DMA_Abort_IT>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec0:	e009      	b.n	8002ed6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f812 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec8:	e005      	b.n	8002ed6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f80e 	bl	8002eec <I2C_TreatErrorCallback>
  }
}
 8002ed0:	e002      	b.n	8002ed8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ed6:	bf00      	nop
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	ffff0000 	.word	0xffff0000
 8002ee4:	080026e7 	.word	0x080026e7
 8002ee8:	08002f83 	.word	0x08002f83

08002eec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d10e      	bne.n	8002f1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fbdb 	bl	80026d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f1c:	e009      	b.n	8002f32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fbc6 	bl	80026be <HAL_I2C_ErrorCallback>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d103      	bne.n	8002f58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	619a      	str	r2, [r3, #24]
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	2200      	movs	r2, #0
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff ff9b 	bl	8002eec <I2C_TreatErrorCallback>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00f      	beq.n	8002ff8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002fde:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fec:	2b28      	cmp	r3, #40	; 0x28
 8002fee:	d003      	beq.n	8002ff8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00f      	beq.n	8003022 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003008:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003016:	2b28      	cmp	r3, #40	; 0x28
 8003018:	d003      	beq.n	8003022 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003020:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	da03      	bge.n	8003032 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	2b10      	cmp	r3, #16
 8003036:	d103      	bne.n	8003040 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800303e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	2b20      	cmp	r3, #32
 8003044:	d103      	bne.n	800304e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f043 0320 	orr.w	r3, r3, #32
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d103      	bne.n	800305c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	d138      	bne.n	8003102 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800309a:	2302      	movs	r3, #2
 800309c:	e032      	b.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	d139      	bne.n	800319a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003130:	2302      	movs	r3, #2
 8003132:	e033      	b.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003162:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40007000 	.word	0x40007000

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e291      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f8:	4b93      	ldr	r3, [pc, #588]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
 8003204:	4b90      	ldr	r3, [pc, #576]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x130>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e26b      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a>
 8003234:	4b84      	ldr	r3, [pc, #528]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x9c>
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b7c      	ldr	r3, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7b      	ldr	r2, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xc0>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe f9f2 	bl	8001690 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe f9ee 	bl	8001690 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e21f      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe f9de 	bl	8001690 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe f9da 	bl	8001690 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e20b      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x110>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d069      	beq.n	80033da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1df      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	493d      	ldr	r1, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e040      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d023      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a38      	ldr	r2, [pc, #224]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f990 	bl	8001690 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe f98c 	bl	8001690 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1bd      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4929      	ldr	r1, [pc, #164]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
 80033a6:	e018      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f96c 	bl	8001690 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe f968 	bl	8001690 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e199      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d038      	beq.n	8003458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe f949 	bl	8001690 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe f945 	bl	8001690 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e176      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x23a>
 8003420:	e01a      	b.n	8003458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe f92f 	bl	8001690 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fe f92b 	bl	8001690 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d903      	bls.n	800344c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e15c      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
 8003448:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b91      	ldr	r3, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a4 	beq.w	80035ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a87      	ldr	r2, [pc, #540]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b85      	ldr	r3, [pc, #532]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4b82      	ldr	r3, [pc, #520]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800349a:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7e      	ldr	r2, [pc, #504]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fe f8f3 	bl	8001690 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe f8ef 	bl	8001690 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	; 0x64
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e120      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x31a>
 80034d4:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e02d      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x33c>
 80034ea:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a69      	ldr	r2, [pc, #420]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4b67      	ldr	r3, [pc, #412]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a66      	ldr	r2, [pc, #408]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e01c      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x35e>
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a60      	ldr	r2, [pc, #384]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	e00b      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003526:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5a      	ldr	r2, [pc, #360]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f8a3 	bl	8001690 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe f89f 	bl	8001690 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0ce      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ee      	beq.n	800354e <HAL_RCC_OscConfig+0x386>
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe f88d 	bl	8001690 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe f889 	bl	8001690 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80a4 	beq.w	8003700 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d06b      	beq.n	800369c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d149      	bne.n	8003660 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b31      	ldr	r3, [pc, #196]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a30      	ldr	r2, [pc, #192]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe f85a 	bl	8001690 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe f856 	bl	8001690 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e087      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	4313      	orrs	r3, r2
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f82a 	bl	8001690 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f826 	bl	8001690 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e057      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x478>
 800365e:	e04f      	b.n	8003700 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe f810 	bl	8001690 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe f80c 	bl	8001690 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e03d      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x4ac>
 8003692:	e035      	b.n	8003700 <HAL_RCC_OscConfig+0x538>
 8003694:	40023800 	.word	0x40023800
 8003698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x544>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d028      	beq.n	80036fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d121      	bne.n	80036fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d11a      	bne.n	80036fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d111      	bne.n	80036fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd ff44 	bl	8001690 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fd ff40 	bl	8001690 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fea0 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08006ca0 	.word	0x08006ca0
 80038e0:	20000010 	.word	0x20000010
 80038e4:	20000014 	.word	0x20000014

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b094      	sub	sp, #80	; 0x50
 80038ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	647b      	str	r3, [r7, #68]	; 0x44
 80038f4:	2300      	movs	r3, #0
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	2300      	movs	r3, #0
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003900:	4b79      	ldr	r3, [pc, #484]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d00d      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x40>
 800390c:	2b08      	cmp	r3, #8
 800390e:	f200 80e1 	bhi.w	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x3a>
 800391a:	e0db      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003920:	e0db      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003926:	e0d8      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003932:	4b6d      	ldr	r3, [pc, #436]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	2200      	movs	r2, #0
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
 8003948:	63fa      	str	r2, [r7, #60]	; 0x3c
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
 8003956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4621      	mov	r1, r4
 8003974:	1a51      	subs	r1, r2, r1
 8003976:	6139      	str	r1, [r7, #16]
 8003978:	4629      	mov	r1, r5
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800398c:	4659      	mov	r1, fp
 800398e:	018b      	lsls	r3, r1, #6
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003996:	4651      	mov	r1, sl
 8003998:	018a      	lsls	r2, r1, #6
 800399a:	4651      	mov	r1, sl
 800399c:	ebb2 0801 	subs.w	r8, r2, r1
 80039a0:	4659      	mov	r1, fp
 80039a2:	eb63 0901 	sbc.w	r9, r3, r1
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	eb18 0303 	adds.w	r3, r8, r3
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	462b      	mov	r3, r5
 80039c8:	eb49 0303 	adc.w	r3, r9, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039da:	4629      	mov	r1, r5
 80039dc:	024b      	lsls	r3, r1, #9
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e4:	4621      	mov	r1, r4
 80039e6:	024a      	lsls	r2, r1, #9
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f8:	f7fc fc62 	bl	80002c0 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	e058      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4611      	mov	r1, r2
 8003a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	0159      	lsls	r1, r3, #5
 8003a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a32:	0150      	lsls	r0, r2, #5
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a58:	ebb2 040a 	subs.w	r4, r2, sl
 8003a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	00eb      	lsls	r3, r5, #3
 8003a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6e:	00e2      	lsls	r2, r4, #3
 8003a70:	4614      	mov	r4, r2
 8003a72:	461d      	mov	r5, r3
 8003a74:	4643      	mov	r3, r8
 8003a76:	18e3      	adds	r3, r4, r3
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb45 0303 	adc.w	r3, r5, r3
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	028b      	lsls	r3, r1, #10
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a98:	4621      	mov	r1, r4
 8003a9a:	028a      	lsls	r2, r1, #10
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	61fa      	str	r2, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	f7fc fc08 	bl	80002c0 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3750      	adds	r7, #80	; 0x50
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000010 	.word	0x20000010

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08006cb0 	.word	0x08006cb0

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b38:	f7ff ffdc 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0b5b      	lsrs	r3, r3, #13
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08006cb0 	.word	0x08006cb0

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b84:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a68      	ldr	r2, [pc, #416]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b8e:	6093      	str	r3, [r2, #8]
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4964      	ldr	r1, [pc, #400]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d017      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	4959      	ldr	r1, [pc, #356]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	494a      	ldr	r1, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c10:	d101      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 808b 	beq.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	4a39      	ldr	r2, [pc, #228]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fd fd14 	bl	8001690 <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fd fd10 	bl	8001690 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e357      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c7e:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d035      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d02e      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d114      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fcd8 	bl	8001690 <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fcd4 	bl	8001690 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e319      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ee      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d111      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	4901      	ldr	r1, [pc, #4]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	0ffffcff 	.word	0x0ffffcff
 8003d38:	4baa      	ldr	r3, [pc, #680]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4aa9      	ldr	r2, [pc, #676]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d42:	6093      	str	r3, [r2, #8]
 8003d44:	4ba7      	ldr	r3, [pc, #668]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	49a4      	ldr	r1, [pc, #656]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d010      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d62:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d68:	4a9e      	ldr	r2, [pc, #632]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d72:	4b9c      	ldr	r3, [pc, #624]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4999      	ldr	r1, [pc, #612]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d90:	4b94      	ldr	r3, [pc, #592]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9e:	4991      	ldr	r1, [pc, #580]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db2:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc0:	4988      	ldr	r1, [pc, #544]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd4:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	4980      	ldr	r1, [pc, #512]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003df6:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4977      	ldr	r1, [pc, #476]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e18:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	496f      	ldr	r1, [pc, #444]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f023 020c 	bic.w	r2, r3, #12
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	4966      	ldr	r1, [pc, #408]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	495e      	ldr	r1, [pc, #376]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e7e:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	4955      	ldr	r1, [pc, #340]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	494d      	ldr	r1, [pc, #308]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ec2:	4b48      	ldr	r3, [pc, #288]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	4944      	ldr	r1, [pc, #272]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	493c      	ldr	r1, [pc, #240]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	4933      	ldr	r1, [pc, #204]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f28:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	492b      	ldr	r1, [pc, #172]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f58:	4922      	ldr	r1, [pc, #136]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	4912      	ldr	r1, [pc, #72]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbc:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d006      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80d9 	beq.w	800418a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd8:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a01      	ldr	r2, [pc, #4]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fea:	f7fd fb51 	bl	8001690 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ff2:	f7fd fb4d 	bl	8001690 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d901      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e194      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d021      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11d      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	0e1b      	lsrs	r3, r3, #24
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	019a      	lsls	r2, r3, #6
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	071b      	lsls	r3, r3, #28
 8004058:	4957      	ldr	r1, [pc, #348]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408a:	d129      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800408c:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a0:	0f1b      	lsrs	r3, r3, #28
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	019a      	lsls	r2, r3, #6
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	071b      	lsls	r3, r3, #28
 80040c0:	493d      	ldr	r1, [pc, #244]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040c8:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ce:	f023 021f 	bic.w	r2, r3, #31
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4937      	ldr	r1, [pc, #220]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01d      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040ec:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f2:	0e1b      	lsrs	r3, r3, #24
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040fa:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	0f1b      	lsrs	r3, r3, #28
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	019a      	lsls	r2, r3, #6
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	431a      	orrs	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	431a      	orrs	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	071b      	lsls	r3, r3, #28
 8004120:	4925      	ldr	r1, [pc, #148]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d011      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	019a      	lsls	r2, r3, #6
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	071b      	lsls	r3, r3, #28
 8004150:	4919      	ldr	r1, [pc, #100]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004164:	f7fd fa94 	bl	8001690 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800416c:	f7fd fa90 	bl	8001690 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0d7      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	f040 80cd 	bne.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fd fa77 	bl	8001690 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a6:	f7fd fa73 	bl	8001690 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d903      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0ba      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041bc:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c8:	d0ed      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d02e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d12a      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041f2:	4b51      	ldr	r3, [pc, #324]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004200:	4b4d      	ldr	r3, [pc, #308]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	0f1b      	lsrs	r3, r3, #28
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	4944      	ldr	r1, [pc, #272]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800422e:	4b42      	ldr	r3, [pc, #264]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	493d      	ldr	r1, [pc, #244]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d022      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425c:	d11d      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	0e1b      	lsrs	r3, r3, #24
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	0f1b      	lsrs	r3, r3, #28
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	019a      	lsls	r2, r3, #6
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	4929      	ldr	r1, [pc, #164]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d028      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	0e1b      	lsrs	r3, r3, #24
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	019a      	lsls	r2, r3, #6
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	431a      	orrs	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	071b      	lsls	r3, r3, #28
 80042da:	4917      	ldr	r1, [pc, #92]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4911      	ldr	r1, [pc, #68]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042f8:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004304:	f7fd f9c4 	bl	8001690 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800430c:	f7fd f9c0 	bl	8001690 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e007      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432a:	d1ef      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e09d      	b.n	800448a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc ff26 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b4:	d902      	bls.n	80043bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043ca:	d007      	beq.n	80043dc <HAL_SPI_Init+0xa0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	ea42 0103 	orr.w	r1, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0204 	and.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
    return;
 80044d2:	e0ce      	b.n	8004672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_SPI_IRQHandler+0x5e>
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
    return;
 80044f0:	e0bf      	b.n	8004672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <HAL_SPI_IRQHandler+0x7e>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80b0 	beq.w	8004672 <HAL_SPI_IRQHandler+0x1de>
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80aa 	beq.w	8004672 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d023      	beq.n	8004570 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b03      	cmp	r3, #3
 8004532:	d011      	beq.n	8004558 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	e00b      	b.n	8004570 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
        return;
 800456e:	e080      	b.n	8004672 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d014      	beq.n	80045a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	f043 0208 	orr.w	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d04f      	beq.n	8004670 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_SPI_IRQHandler+0x168>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d034      	beq.n	8004666 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0203 	bic.w	r2, r2, #3
 800460a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_SPI_IRQHandler+0x1e4>)
 800461a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	4618      	mov	r0, r3
 8004622:	f7fd f9e6 	bl	80019f2 <HAL_DMA_Abort_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <HAL_SPI_IRQHandler+0x1e4>)
 8004646:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	4618      	mov	r0, r3
 800464e:	f7fd f9d0 	bl	80019f2 <HAL_DMA_Abort_IT>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004664:	e003      	b.n	800466e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f808 	bl	800467c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800466c:	e000      	b.n	8004670 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800466e:	bf00      	nop
    return;
 8004670:	bf00      	nop
  }
}
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08004691 	.word	0x08004691

0800467c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff ffe5 	bl	800467c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e049      	b.n	8004760 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fde7 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 f9f5 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e054      	b.n	800482a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_TIM_Base_Start_IT+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d01d      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_TIM_Base_Start_IT+0xd4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a21      	ldr	r2, [pc, #132]	; (8004840 <HAL_TIM_Base_Start_IT+0xd8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <HAL_TIM_Base_Start_IT+0xe0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_TIM_Base_Start_IT+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_TIM_Base_Start_IT+0xe8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d115      	bne.n	8004814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_TIM_Base_Start_IT+0xec>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d015      	beq.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d011      	beq.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	e008      	b.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e000      	b.n	8004828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800
 8004854:	00010007 	.word	0x00010007

08004858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0202 	mvn.w	r2, #2
 8004884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f905 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8f7 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f908 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0204 	mvn.w	r2, #4
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8db 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8cd 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8de 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0208 	mvn.w	r2, #8
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8b1 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8a3 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8b4 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b10      	cmp	r3, #16
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f887 	bl	8004aaa <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f879 	bl	8004a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f88a 	bl	8004abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc f964 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f91a 	bl	8004c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d10e      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f90d 	bl	8004c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d10e      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f838 	bl	8004ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d10e      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d107      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f06f 0220 	mvn.w	r2, #32
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8cd 	bl	8004c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <TIM_Base_SetConfig+0x120>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d108      	bne.n	8004b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d02b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d027      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d023      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01f      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <TIM_Base_SetConfig+0x120>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d017      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a28      	ldr	r2, [pc, #160]	; (8004c10 <TIM_Base_SetConfig+0x128>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <TIM_Base_SetConfig+0x12c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00f      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <TIM_Base_SetConfig+0x130>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00b      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <TIM_Base_SetConfig+0x134>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <TIM_Base_SetConfig+0x138>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a23      	ldr	r2, [pc, #140]	; (8004c24 <TIM_Base_SetConfig+0x13c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_Base_SetConfig+0xf8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <TIM_Base_SetConfig+0x124>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d103      	bne.n	8004be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	615a      	str	r2, [r3, #20]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40010400 	.word	0x40010400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	40001800 	.word	0x40001800
 8004c20:	40001c00 	.word	0x40001c00
 8004c24:	40002000 	.word	0x40002000

08004c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e040      	b.n	8004cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fb3a 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	; 0x24
 8004c90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fbe6 	bl	8005474 <UART_SetConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e022      	b.n	8004cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fe3e 	bl	800593c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fec5 	bl	8005a80 <UART_CheckIdleState>
 8004cf6:	4603      	mov	r3, r0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d171      	bne.n	8004dfc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Transmit+0x24>
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e06a      	b.n	8004dfe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2221      	movs	r2, #33	; 0x21
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d36:	f7fc fcab 	bl	8001690 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x68>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d70:	e02c      	b.n	8004dcc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 feb6 	bl	8005aee <UART_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e038      	b.n	8004dfe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3302      	adds	r3, #2
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	e007      	b.n	8004dba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	3301      	adds	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1cc      	bne.n	8004d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fe83 	bl	8005aee <UART_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e005      	b.n	8004dfe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08a      	sub	sp, #40	; 0x28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d132      	bne.n	8004e84 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_UART_Receive_IT+0x24>
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e02b      	b.n	8004e86 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d018      	beq.n	8004e74 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	6a3a      	ldr	r2, [r7, #32]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fefe 	bl	8005c7c <UART_Start_Receive_IT>
 8004e80:	4603      	mov	r3, r0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	; 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b0ba      	sub	sp, #232	; 0xe8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004eba:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d115      	bne.n	8004ef8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8297 	beq.w	800541c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
      }
      return;
 8004ef6:	e291      	b.n	800541c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8117 	beq.w	8005130 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_UART_IRQHandler+0x298>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 810a 	beq.w	8005130 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d011      	beq.n	8004f4c <HAL_UART_IRQHandler+0xbc>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d011      	beq.n	8004f7c <HAL_UART_IRQHandler+0xec>
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_UART_IRQHandler+0x11c>
 8004f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2204      	movs	r2, #4
 8004f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa2:	f043 0202 	orr.w	r2, r3, #2
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d017      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_UART_IRQHandler+0x18a>
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00c      	beq.n	800501a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 81fd 	beq.w	8005420 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d005      	beq.n	8005072 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800506a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04f      	beq.n	8005112 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fec8 	bl	8005e08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d141      	bne.n	800510a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800509c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1d9      	bne.n	8005086 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_UART_IRQHandler+0x29c>)
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fc fc83 	bl	80019f2 <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d017      	beq.n	8005122 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e00f      	b.n	8005122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9a0 	bl	8005448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e00b      	b.n	8005122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f99c 	bl	8005448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	e007      	b.n	8005122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f998 	bl	8005448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005120:	e17e      	b.n	8005420 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005122:	bf00      	nop
    return;
 8005124:	e17c      	b.n	8005420 <HAL_UART_IRQHandler+0x590>
 8005126:	bf00      	nop
 8005128:	04000120 	.word	0x04000120
 800512c:	08005ed1 	.word	0x08005ed1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005134:	2b01      	cmp	r3, #1
 8005136:	f040 814c 	bne.w	80053d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8145 	beq.w	80053d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 813e 	beq.w	80053d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	f040 80b6 	bne.w	80052da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800517a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8150 	beq.w	8005424 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800518a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800518e:	429a      	cmp	r2, r3
 8005190:	f080 8148 	bcs.w	8005424 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800519a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	f000 8086 	beq.w	80052b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1da      	bne.n	80051ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800521a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800521e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800522c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e1      	bne.n	80051f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800525c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e3      	bne.n	8005232 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800529a:	65bb      	str	r3, [r7, #88]	; 0x58
 800529c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e4      	bne.n	8005278 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc fb2d 	bl	8001912 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8c2 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052d8:	e0a4      	b.n	8005424 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8096 	beq.w	8005428 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80052fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8091 	beq.w	8005428 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800531a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800532e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e4      	bne.n	8005306 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	623b      	str	r3, [r7, #32]
   return(result);
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005360:	633a      	str	r2, [r7, #48]	; 0x30
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e3      	bne.n	800533c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	60fb      	str	r3, [r7, #12]
   return(result);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	69b9      	ldr	r1, [r7, #24]
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	617b      	str	r3, [r7, #20]
   return(result);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e4      	bne.n	8005388 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f846 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053d0:	e02a      	b.n	8005428 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01c      	beq.n	800542c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
    }
    return;
 80053fa:	e017      	b.n	800542c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d012      	beq.n	800542e <HAL_UART_IRQHandler+0x59e>
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fd71 	bl	8005efc <UART_EndTransmit_IT>
    return;
 800541a:	e008      	b.n	800542e <HAL_UART_IRQHandler+0x59e>
      return;
 800541c:	bf00      	nop
 800541e:	e006      	b.n	800542e <HAL_UART_IRQHandler+0x59e>
    return;
 8005420:	bf00      	nop
 8005422:	e004      	b.n	800542e <HAL_UART_IRQHandler+0x59e>
      return;
 8005424:	bf00      	nop
 8005426:	e002      	b.n	800542e <HAL_UART_IRQHandler+0x59e>
      return;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <HAL_UART_IRQHandler+0x59e>
    return;
 800542c:	bf00      	nop
  }

}
 800542e:	37e8      	adds	r7, #232	; 0xe8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4ba6      	ldr	r3, [pc, #664]	; (8005738 <UART_SetConfig+0x2c4>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a94      	ldr	r2, [pc, #592]	; (800573c <UART_SetConfig+0x2c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d120      	bne.n	8005532 <UART_SetConfig+0xbe>
 80054f0:	4b93      	ldr	r3, [pc, #588]	; (8005740 <UART_SetConfig+0x2cc>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d816      	bhi.n	800552c <UART_SetConfig+0xb8>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x90>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005515 	.word	0x08005515
 8005508:	08005521 	.word	0x08005521
 800550c:	0800551b 	.word	0x0800551b
 8005510:	08005527 	.word	0x08005527
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e150      	b.n	80057bc <UART_SetConfig+0x348>
 800551a:	2302      	movs	r3, #2
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e14d      	b.n	80057bc <UART_SetConfig+0x348>
 8005520:	2304      	movs	r3, #4
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e14a      	b.n	80057bc <UART_SetConfig+0x348>
 8005526:	2308      	movs	r3, #8
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e147      	b.n	80057bc <UART_SetConfig+0x348>
 800552c:	2310      	movs	r3, #16
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e144      	b.n	80057bc <UART_SetConfig+0x348>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a83      	ldr	r2, [pc, #524]	; (8005744 <UART_SetConfig+0x2d0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d132      	bne.n	80055a2 <UART_SetConfig+0x12e>
 800553c:	4b80      	ldr	r3, [pc, #512]	; (8005740 <UART_SetConfig+0x2cc>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b0c      	cmp	r3, #12
 8005548:	d828      	bhi.n	800559c <UART_SetConfig+0x128>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0xdc>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005585 	.word	0x08005585
 8005554:	0800559d 	.word	0x0800559d
 8005558:	0800559d 	.word	0x0800559d
 800555c:	0800559d 	.word	0x0800559d
 8005560:	08005591 	.word	0x08005591
 8005564:	0800559d 	.word	0x0800559d
 8005568:	0800559d 	.word	0x0800559d
 800556c:	0800559d 	.word	0x0800559d
 8005570:	0800558b 	.word	0x0800558b
 8005574:	0800559d 	.word	0x0800559d
 8005578:	0800559d 	.word	0x0800559d
 800557c:	0800559d 	.word	0x0800559d
 8005580:	08005597 	.word	0x08005597
 8005584:	2300      	movs	r3, #0
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e118      	b.n	80057bc <UART_SetConfig+0x348>
 800558a:	2302      	movs	r3, #2
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e115      	b.n	80057bc <UART_SetConfig+0x348>
 8005590:	2304      	movs	r3, #4
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e112      	b.n	80057bc <UART_SetConfig+0x348>
 8005596:	2308      	movs	r3, #8
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e10f      	b.n	80057bc <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e10c      	b.n	80057bc <UART_SetConfig+0x348>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a68      	ldr	r2, [pc, #416]	; (8005748 <UART_SetConfig+0x2d4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d120      	bne.n	80055ee <UART_SetConfig+0x17a>
 80055ac:	4b64      	ldr	r3, [pc, #400]	; (8005740 <UART_SetConfig+0x2cc>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d013      	beq.n	80055e2 <UART_SetConfig+0x16e>
 80055ba:	2b30      	cmp	r3, #48	; 0x30
 80055bc:	d814      	bhi.n	80055e8 <UART_SetConfig+0x174>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d009      	beq.n	80055d6 <UART_SetConfig+0x162>
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d810      	bhi.n	80055e8 <UART_SetConfig+0x174>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <UART_SetConfig+0x15c>
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d006      	beq.n	80055dc <UART_SetConfig+0x168>
 80055ce:	e00b      	b.n	80055e8 <UART_SetConfig+0x174>
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e0f2      	b.n	80057bc <UART_SetConfig+0x348>
 80055d6:	2302      	movs	r3, #2
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e0ef      	b.n	80057bc <UART_SetConfig+0x348>
 80055dc:	2304      	movs	r3, #4
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e0ec      	b.n	80057bc <UART_SetConfig+0x348>
 80055e2:	2308      	movs	r3, #8
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e0e9      	b.n	80057bc <UART_SetConfig+0x348>
 80055e8:	2310      	movs	r3, #16
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e0e6      	b.n	80057bc <UART_SetConfig+0x348>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a56      	ldr	r2, [pc, #344]	; (800574c <UART_SetConfig+0x2d8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d120      	bne.n	800563a <UART_SetConfig+0x1c6>
 80055f8:	4b51      	ldr	r3, [pc, #324]	; (8005740 <UART_SetConfig+0x2cc>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005602:	2bc0      	cmp	r3, #192	; 0xc0
 8005604:	d013      	beq.n	800562e <UART_SetConfig+0x1ba>
 8005606:	2bc0      	cmp	r3, #192	; 0xc0
 8005608:	d814      	bhi.n	8005634 <UART_SetConfig+0x1c0>
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d009      	beq.n	8005622 <UART_SetConfig+0x1ae>
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d810      	bhi.n	8005634 <UART_SetConfig+0x1c0>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <UART_SetConfig+0x1a8>
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d006      	beq.n	8005628 <UART_SetConfig+0x1b4>
 800561a:	e00b      	b.n	8005634 <UART_SetConfig+0x1c0>
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e0cc      	b.n	80057bc <UART_SetConfig+0x348>
 8005622:	2302      	movs	r3, #2
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e0c9      	b.n	80057bc <UART_SetConfig+0x348>
 8005628:	2304      	movs	r3, #4
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e0c6      	b.n	80057bc <UART_SetConfig+0x348>
 800562e:	2308      	movs	r3, #8
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e0c3      	b.n	80057bc <UART_SetConfig+0x348>
 8005634:	2310      	movs	r3, #16
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e0c0      	b.n	80057bc <UART_SetConfig+0x348>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a44      	ldr	r2, [pc, #272]	; (8005750 <UART_SetConfig+0x2dc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d125      	bne.n	8005690 <UART_SetConfig+0x21c>
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <UART_SetConfig+0x2cc>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005652:	d017      	beq.n	8005684 <UART_SetConfig+0x210>
 8005654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005658:	d817      	bhi.n	800568a <UART_SetConfig+0x216>
 800565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565e:	d00b      	beq.n	8005678 <UART_SetConfig+0x204>
 8005660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005664:	d811      	bhi.n	800568a <UART_SetConfig+0x216>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <UART_SetConfig+0x1fe>
 800566a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800566e:	d006      	beq.n	800567e <UART_SetConfig+0x20a>
 8005670:	e00b      	b.n	800568a <UART_SetConfig+0x216>
 8005672:	2300      	movs	r3, #0
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e0a1      	b.n	80057bc <UART_SetConfig+0x348>
 8005678:	2302      	movs	r3, #2
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e09e      	b.n	80057bc <UART_SetConfig+0x348>
 800567e:	2304      	movs	r3, #4
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e09b      	b.n	80057bc <UART_SetConfig+0x348>
 8005684:	2308      	movs	r3, #8
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e098      	b.n	80057bc <UART_SetConfig+0x348>
 800568a:	2310      	movs	r3, #16
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e095      	b.n	80057bc <UART_SetConfig+0x348>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <UART_SetConfig+0x2e0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d125      	bne.n	80056e6 <UART_SetConfig+0x272>
 800569a:	4b29      	ldr	r3, [pc, #164]	; (8005740 <UART_SetConfig+0x2cc>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a8:	d017      	beq.n	80056da <UART_SetConfig+0x266>
 80056aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ae:	d817      	bhi.n	80056e0 <UART_SetConfig+0x26c>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d00b      	beq.n	80056ce <UART_SetConfig+0x25a>
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ba:	d811      	bhi.n	80056e0 <UART_SetConfig+0x26c>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <UART_SetConfig+0x254>
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d006      	beq.n	80056d4 <UART_SetConfig+0x260>
 80056c6:	e00b      	b.n	80056e0 <UART_SetConfig+0x26c>
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e076      	b.n	80057bc <UART_SetConfig+0x348>
 80056ce:	2302      	movs	r3, #2
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e073      	b.n	80057bc <UART_SetConfig+0x348>
 80056d4:	2304      	movs	r3, #4
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e070      	b.n	80057bc <UART_SetConfig+0x348>
 80056da:	2308      	movs	r3, #8
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e06d      	b.n	80057bc <UART_SetConfig+0x348>
 80056e0:	2310      	movs	r3, #16
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e06a      	b.n	80057bc <UART_SetConfig+0x348>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <UART_SetConfig+0x2e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d138      	bne.n	8005762 <UART_SetConfig+0x2ee>
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <UART_SetConfig+0x2cc>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056fe:	d017      	beq.n	8005730 <UART_SetConfig+0x2bc>
 8005700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005704:	d82a      	bhi.n	800575c <UART_SetConfig+0x2e8>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d00b      	beq.n	8005724 <UART_SetConfig+0x2b0>
 800570c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005710:	d824      	bhi.n	800575c <UART_SetConfig+0x2e8>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <UART_SetConfig+0x2aa>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d006      	beq.n	800572a <UART_SetConfig+0x2b6>
 800571c:	e01e      	b.n	800575c <UART_SetConfig+0x2e8>
 800571e:	2300      	movs	r3, #0
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e04b      	b.n	80057bc <UART_SetConfig+0x348>
 8005724:	2302      	movs	r3, #2
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e048      	b.n	80057bc <UART_SetConfig+0x348>
 800572a:	2304      	movs	r3, #4
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e045      	b.n	80057bc <UART_SetConfig+0x348>
 8005730:	2308      	movs	r3, #8
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e042      	b.n	80057bc <UART_SetConfig+0x348>
 8005736:	bf00      	nop
 8005738:	efff69f3 	.word	0xefff69f3
 800573c:	40011000 	.word	0x40011000
 8005740:	40023800 	.word	0x40023800
 8005744:	40004400 	.word	0x40004400
 8005748:	40004800 	.word	0x40004800
 800574c:	40004c00 	.word	0x40004c00
 8005750:	40005000 	.word	0x40005000
 8005754:	40011400 	.word	0x40011400
 8005758:	40007800 	.word	0x40007800
 800575c:	2310      	movs	r3, #16
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e02c      	b.n	80057bc <UART_SetConfig+0x348>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a72      	ldr	r2, [pc, #456]	; (8005930 <UART_SetConfig+0x4bc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d125      	bne.n	80057b8 <UART_SetConfig+0x344>
 800576c:	4b71      	ldr	r3, [pc, #452]	; (8005934 <UART_SetConfig+0x4c0>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005776:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800577a:	d017      	beq.n	80057ac <UART_SetConfig+0x338>
 800577c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005780:	d817      	bhi.n	80057b2 <UART_SetConfig+0x33e>
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005786:	d00b      	beq.n	80057a0 <UART_SetConfig+0x32c>
 8005788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578c:	d811      	bhi.n	80057b2 <UART_SetConfig+0x33e>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <UART_SetConfig+0x326>
 8005792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005796:	d006      	beq.n	80057a6 <UART_SetConfig+0x332>
 8005798:	e00b      	b.n	80057b2 <UART_SetConfig+0x33e>
 800579a:	2300      	movs	r3, #0
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e00d      	b.n	80057bc <UART_SetConfig+0x348>
 80057a0:	2302      	movs	r3, #2
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e00a      	b.n	80057bc <UART_SetConfig+0x348>
 80057a6:	2304      	movs	r3, #4
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e007      	b.n	80057bc <UART_SetConfig+0x348>
 80057ac:	2308      	movs	r3, #8
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x348>
 80057b2:	2310      	movs	r3, #16
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e001      	b.n	80057bc <UART_SetConfig+0x348>
 80057b8:	2310      	movs	r3, #16
 80057ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c4:	d15b      	bne.n	800587e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d828      	bhi.n	800581e <UART_SetConfig+0x3aa>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <UART_SetConfig+0x360>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	0800581f 	.word	0x0800581f
 80057e4:	0800580f 	.word	0x0800580f
 80057e8:	0800581f 	.word	0x0800581f
 80057ec:	0800581f 	.word	0x0800581f
 80057f0:	0800581f 	.word	0x0800581f
 80057f4:	08005817 	.word	0x08005817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f8:	f7fe f988 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80057fc:	61b8      	str	r0, [r7, #24]
        break;
 80057fe:	e013      	b.n	8005828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005800:	f7fe f998 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8005804:	61b8      	str	r0, [r7, #24]
        break;
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005808:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <UART_SetConfig+0x4c4>)
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e00c      	b.n	8005828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580e:	f7fe f86b 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8005812:	61b8      	str	r0, [r7, #24]
        break;
 8005814:	e008      	b.n	8005828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581a:	61bb      	str	r3, [r7, #24]
        break;
 800581c:	e004      	b.n	8005828 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77bb      	strb	r3, [r7, #30]
        break;
 8005826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d074      	beq.n	8005918 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	005a      	lsls	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b0f      	cmp	r3, #15
 8005848:	d916      	bls.n	8005878 <UART_SetConfig+0x404>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d212      	bcs.n	8005878 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f023 030f 	bic.w	r3, r3, #15
 800585a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	b29a      	uxth	r2, r3
 8005868:	89fb      	ldrh	r3, [r7, #14]
 800586a:	4313      	orrs	r3, r2
 800586c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	89fa      	ldrh	r2, [r7, #14]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	e04f      	b.n	8005918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	77bb      	strb	r3, [r7, #30]
 800587c:	e04c      	b.n	8005918 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d828      	bhi.n	80058d6 <UART_SetConfig+0x462>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x418>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058c1 	.word	0x080058c1
 8005898:	080058d7 	.word	0x080058d7
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	080058d7 	.word	0x080058d7
 80058a4:	080058d7 	.word	0x080058d7
 80058a8:	080058d7 	.word	0x080058d7
 80058ac:	080058cf 	.word	0x080058cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fe f92c 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80058b4:	61b8      	str	r0, [r7, #24]
        break;
 80058b6:	e013      	b.n	80058e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fe f93c 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 80058bc:	61b8      	str	r0, [r7, #24]
        break;
 80058be:	e00f      	b.n	80058e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <UART_SetConfig+0x4c4>)
 80058c2:	61bb      	str	r3, [r7, #24]
        break;
 80058c4:	e00c      	b.n	80058e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c6:	f7fe f80f 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80058ca:	61b8      	str	r0, [r7, #24]
        break;
 80058cc:	e008      	b.n	80058e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d2:	61bb      	str	r3, [r7, #24]
        break;
 80058d4:	e004      	b.n	80058e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	77bb      	strb	r3, [r7, #30]
        break;
 80058de:	bf00      	nop
    }

    if (pclk != 0U)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	085a      	lsrs	r2, r3, #1
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	441a      	add	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b0f      	cmp	r3, #15
 80058fe:	d909      	bls.n	8005914 <UART_SetConfig+0x4a0>
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005906:	d205      	bcs.n	8005914 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	b29a      	uxth	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	e001      	b.n	8005918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005924:	7fbb      	ldrb	r3, [r7, #30]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40007c00 	.word	0x40007c00
 8005934:	40023800 	.word	0x40023800
 8005938:	00f42400 	.word	0x00f42400

0800593c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3a:	d10a      	bne.n	8005a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a90:	f7fb fdfe 	bl	8001690 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d10e      	bne.n	8005ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f81b 	bl	8005aee <UART_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e011      	b.n	8005ae6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b09c      	sub	sp, #112	; 0x70
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afe:	e0a7      	b.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b06:	f000 80a3 	beq.w	8005c50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fb fdc1 	bl	8001690 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d13f      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b34:	667b      	str	r3, [r7, #100]	; 0x64
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e068      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d050      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbc:	d148      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c1a:	623a      	str	r2, [r7, #32]
 8005c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	69f9      	ldr	r1, [r7, #28]
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e5      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e010      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	f43f af48 	beq.w	8005b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3770      	adds	r7, #112	; 0x70
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b097      	sub	sp, #92	; 0x5c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d10e      	bne.n	8005cce <UART_Start_Receive_IT+0x52>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <UART_Start_Receive_IT+0x48>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cc2:	e02d      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ccc:	e028      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <UART_Start_Receive_IT+0x76>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <UART_Start_Receive_IT+0x6c>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	22ff      	movs	r2, #255	; 0xff
 8005ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ce6:	e01b      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	227f      	movs	r2, #127	; 0x7f
 8005cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf0:	e016      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfa:	d10d      	bne.n	8005d18 <UART_Start_Receive_IT+0x9c>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <UART_Start_Receive_IT+0x92>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	227f      	movs	r2, #127	; 0x7f
 8005d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d0c:	e008      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	223f      	movs	r2, #63	; 0x3f
 8005d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d16:	e003      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	657b      	str	r3, [r7, #84]	; 0x54
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d50:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6c:	d107      	bne.n	8005d7e <UART_Start_Receive_IT+0x102>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <UART_Start_Receive_IT+0x184>)
 8005d7a:	669a      	str	r2, [r3, #104]	; 0x68
 8005d7c:	e002      	b.n	8005d84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <UART_Start_Receive_IT+0x188>)
 8005d82:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d019      	beq.n	8005dc0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_Start_Receive_IT+0x110>
 8005dbe:	e018      	b.n	8005df2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f043 0320 	orr.w	r3, r3, #32
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69f9      	ldr	r1, [r7, #28]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	375c      	adds	r7, #92	; 0x5c
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	080060b7 	.word	0x080060b7
 8005e04:	08005f51 	.word	0x08005f51

08005e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b095      	sub	sp, #84	; 0x54
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e5      	bne.n	8005e42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d118      	bne.n	8005eb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0310 	bic.w	r3, r3, #16
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e6      	bne.n	8005e7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ec4:	bf00      	nop
 8005ec6:	3754      	adds	r7, #84	; 0x54
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff faaa 	bl	8005448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e6      	bne.n	8005f04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fa76 	bl	8005434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b096      	sub	sp, #88	; 0x58
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f68:	2b22      	cmp	r3, #34	; 0x22
 8005f6a:	f040 8098 	bne.w	800609e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005f7c:	b2d9      	uxtb	r1, r3
 8005f7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	400a      	ands	r2, r1
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d17b      	bne.n	80060ae <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006008:	633a      	str	r2, [r7, #48]	; 0x30
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006034:	2b01      	cmp	r3, #1
 8006036:	d12e      	bne.n	8006096 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	60fb      	str	r3, [r7, #12]
   return(result);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0310 	bic.w	r3, r3, #16
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b10      	cmp	r3, #16
 800607c:	d103      	bne.n	8006086 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2210      	movs	r2, #16
 8006084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff f9e4 	bl	800545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006094:	e00b      	b.n	80060ae <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fa ff28 	bl	8000eec <HAL_UART_RxCpltCallback>
}
 800609c:	e007      	b.n	80060ae <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0208 	orr.w	r2, r2, #8
 80060ac:	619a      	str	r2, [r3, #24]
}
 80060ae:	bf00      	nop
 80060b0:	3758      	adds	r7, #88	; 0x58
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b096      	sub	sp, #88	; 0x58
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ce:	2b22      	cmp	r3, #34	; 0x22
 80060d0:	f040 8098 	bne.w	8006204 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80060e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80060e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060ec:	4013      	ands	r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d17b      	bne.n	8006214 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613a:	643b      	str	r3, [r7, #64]	; 0x40
 800613c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	61fb      	str	r3, [r7, #28]
   return(result);
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	64bb      	str	r3, [r7, #72]	; 0x48
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619a:	2b01      	cmp	r3, #1
 800619c:	d12e      	bne.n	80061fc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 0310 	bic.w	r3, r3, #16
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6979      	ldr	r1, [r7, #20]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	613b      	str	r3, [r7, #16]
   return(result);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e6      	bne.n	80061a4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d103      	bne.n	80061ec <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2210      	movs	r2, #16
 80061ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff f931 	bl	800545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061fa:	e00b      	b.n	8006214 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fa fe75 	bl	8000eec <HAL_UART_RxCpltCallback>
}
 8006202:	e007      	b.n	8006214 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0208 	orr.w	r2, r2, #8
 8006212:	619a      	str	r2, [r3, #24]
}
 8006214:	bf00      	nop
 8006216:	3758      	adds	r7, #88	; 0x58
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <atoi>:
 800621c:	220a      	movs	r2, #10
 800621e:	2100      	movs	r1, #0
 8006220:	f000 b8a2 	b.w	8006368 <strtol>

08006224 <siprintf>:
 8006224:	b40e      	push	{r1, r2, r3}
 8006226:	b500      	push	{lr}
 8006228:	b09c      	sub	sp, #112	; 0x70
 800622a:	ab1d      	add	r3, sp, #116	; 0x74
 800622c:	9002      	str	r0, [sp, #8]
 800622e:	9006      	str	r0, [sp, #24]
 8006230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006234:	4809      	ldr	r0, [pc, #36]	; (800625c <siprintf+0x38>)
 8006236:	9107      	str	r1, [sp, #28]
 8006238:	9104      	str	r1, [sp, #16]
 800623a:	4909      	ldr	r1, [pc, #36]	; (8006260 <siprintf+0x3c>)
 800623c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006240:	9105      	str	r1, [sp, #20]
 8006242:	6800      	ldr	r0, [r0, #0]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	a902      	add	r1, sp, #8
 8006248:	f000 f926 	bl	8006498 <_svfiprintf_r>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	b01c      	add	sp, #112	; 0x70
 8006254:	f85d eb04 	ldr.w	lr, [sp], #4
 8006258:	b003      	add	sp, #12
 800625a:	4770      	bx	lr
 800625c:	20000068 	.word	0x20000068
 8006260:	ffff0208 	.word	0xffff0208

08006264 <_strtol_l.constprop.0>:
 8006264:	2b01      	cmp	r3, #1
 8006266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626a:	d001      	beq.n	8006270 <_strtol_l.constprop.0+0xc>
 800626c:	2b24      	cmp	r3, #36	; 0x24
 800626e:	d906      	bls.n	800627e <_strtol_l.constprop.0+0x1a>
 8006270:	f000 f88c 	bl	800638c <__errno>
 8006274:	2316      	movs	r3, #22
 8006276:	6003      	str	r3, [r0, #0]
 8006278:	2000      	movs	r0, #0
 800627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006364 <_strtol_l.constprop.0+0x100>
 8006282:	460d      	mov	r5, r1
 8006284:	462e      	mov	r6, r5
 8006286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800628a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800628e:	f017 0708 	ands.w	r7, r7, #8
 8006292:	d1f7      	bne.n	8006284 <_strtol_l.constprop.0+0x20>
 8006294:	2c2d      	cmp	r4, #45	; 0x2d
 8006296:	d132      	bne.n	80062fe <_strtol_l.constprop.0+0x9a>
 8006298:	782c      	ldrb	r4, [r5, #0]
 800629a:	2701      	movs	r7, #1
 800629c:	1cb5      	adds	r5, r6, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05b      	beq.n	800635a <_strtol_l.constprop.0+0xf6>
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d109      	bne.n	80062ba <_strtol_l.constprop.0+0x56>
 80062a6:	2c30      	cmp	r4, #48	; 0x30
 80062a8:	d107      	bne.n	80062ba <_strtol_l.constprop.0+0x56>
 80062aa:	782c      	ldrb	r4, [r5, #0]
 80062ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062b0:	2c58      	cmp	r4, #88	; 0x58
 80062b2:	d14d      	bne.n	8006350 <_strtol_l.constprop.0+0xec>
 80062b4:	786c      	ldrb	r4, [r5, #1]
 80062b6:	2310      	movs	r3, #16
 80062b8:	3502      	adds	r5, #2
 80062ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80062c2:	f04f 0e00 	mov.w	lr, #0
 80062c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80062ca:	4676      	mov	r6, lr
 80062cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80062d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80062d4:	f1bc 0f09 	cmp.w	ip, #9
 80062d8:	d816      	bhi.n	8006308 <_strtol_l.constprop.0+0xa4>
 80062da:	4664      	mov	r4, ip
 80062dc:	42a3      	cmp	r3, r4
 80062de:	dd24      	ble.n	800632a <_strtol_l.constprop.0+0xc6>
 80062e0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80062e4:	d008      	beq.n	80062f8 <_strtol_l.constprop.0+0x94>
 80062e6:	45b1      	cmp	r9, r6
 80062e8:	d31c      	bcc.n	8006324 <_strtol_l.constprop.0+0xc0>
 80062ea:	d101      	bne.n	80062f0 <_strtol_l.constprop.0+0x8c>
 80062ec:	45a2      	cmp	sl, r4
 80062ee:	db19      	blt.n	8006324 <_strtol_l.constprop.0+0xc0>
 80062f0:	fb06 4603 	mla	r6, r6, r3, r4
 80062f4:	f04f 0e01 	mov.w	lr, #1
 80062f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062fc:	e7e8      	b.n	80062d0 <_strtol_l.constprop.0+0x6c>
 80062fe:	2c2b      	cmp	r4, #43	; 0x2b
 8006300:	bf04      	itt	eq
 8006302:	782c      	ldrbeq	r4, [r5, #0]
 8006304:	1cb5      	addeq	r5, r6, #2
 8006306:	e7ca      	b.n	800629e <_strtol_l.constprop.0+0x3a>
 8006308:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800630c:	f1bc 0f19 	cmp.w	ip, #25
 8006310:	d801      	bhi.n	8006316 <_strtol_l.constprop.0+0xb2>
 8006312:	3c37      	subs	r4, #55	; 0x37
 8006314:	e7e2      	b.n	80062dc <_strtol_l.constprop.0+0x78>
 8006316:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800631a:	f1bc 0f19 	cmp.w	ip, #25
 800631e:	d804      	bhi.n	800632a <_strtol_l.constprop.0+0xc6>
 8006320:	3c57      	subs	r4, #87	; 0x57
 8006322:	e7db      	b.n	80062dc <_strtol_l.constprop.0+0x78>
 8006324:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006328:	e7e6      	b.n	80062f8 <_strtol_l.constprop.0+0x94>
 800632a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800632e:	d105      	bne.n	800633c <_strtol_l.constprop.0+0xd8>
 8006330:	2322      	movs	r3, #34	; 0x22
 8006332:	6003      	str	r3, [r0, #0]
 8006334:	4646      	mov	r6, r8
 8006336:	b942      	cbnz	r2, 800634a <_strtol_l.constprop.0+0xe6>
 8006338:	4630      	mov	r0, r6
 800633a:	e79e      	b.n	800627a <_strtol_l.constprop.0+0x16>
 800633c:	b107      	cbz	r7, 8006340 <_strtol_l.constprop.0+0xdc>
 800633e:	4276      	negs	r6, r6
 8006340:	2a00      	cmp	r2, #0
 8006342:	d0f9      	beq.n	8006338 <_strtol_l.constprop.0+0xd4>
 8006344:	f1be 0f00 	cmp.w	lr, #0
 8006348:	d000      	beq.n	800634c <_strtol_l.constprop.0+0xe8>
 800634a:	1e69      	subs	r1, r5, #1
 800634c:	6011      	str	r1, [r2, #0]
 800634e:	e7f3      	b.n	8006338 <_strtol_l.constprop.0+0xd4>
 8006350:	2430      	movs	r4, #48	; 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1b1      	bne.n	80062ba <_strtol_l.constprop.0+0x56>
 8006356:	2308      	movs	r3, #8
 8006358:	e7af      	b.n	80062ba <_strtol_l.constprop.0+0x56>
 800635a:	2c30      	cmp	r4, #48	; 0x30
 800635c:	d0a5      	beq.n	80062aa <_strtol_l.constprop.0+0x46>
 800635e:	230a      	movs	r3, #10
 8006360:	e7ab      	b.n	80062ba <_strtol_l.constprop.0+0x56>
 8006362:	bf00      	nop
 8006364:	08006cb9 	.word	0x08006cb9

08006368 <strtol>:
 8006368:	4613      	mov	r3, r2
 800636a:	460a      	mov	r2, r1
 800636c:	4601      	mov	r1, r0
 800636e:	4802      	ldr	r0, [pc, #8]	; (8006378 <strtol+0x10>)
 8006370:	6800      	ldr	r0, [r0, #0]
 8006372:	f7ff bf77 	b.w	8006264 <_strtol_l.constprop.0>
 8006376:	bf00      	nop
 8006378:	20000068 	.word	0x20000068

0800637c <memset>:
 800637c:	4402      	add	r2, r0
 800637e:	4603      	mov	r3, r0
 8006380:	4293      	cmp	r3, r2
 8006382:	d100      	bne.n	8006386 <memset+0xa>
 8006384:	4770      	bx	lr
 8006386:	f803 1b01 	strb.w	r1, [r3], #1
 800638a:	e7f9      	b.n	8006380 <memset+0x4>

0800638c <__errno>:
 800638c:	4b01      	ldr	r3, [pc, #4]	; (8006394 <__errno+0x8>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000068 	.word	0x20000068

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4d0d      	ldr	r5, [pc, #52]	; (80063d0 <__libc_init_array+0x38>)
 800639c:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	2600      	movs	r6, #0
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	4d0b      	ldr	r5, [pc, #44]	; (80063d8 <__libc_init_array+0x40>)
 80063aa:	4c0c      	ldr	r4, [pc, #48]	; (80063dc <__libc_init_array+0x44>)
 80063ac:	f000 fc6a 	bl	8006c84 <_init>
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	2600      	movs	r6, #0
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	08006df4 	.word	0x08006df4
 80063d4:	08006df4 	.word	0x08006df4
 80063d8:	08006df4 	.word	0x08006df4
 80063dc:	08006df8 	.word	0x08006df8

080063e0 <__retarget_lock_acquire_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__retarget_lock_release_recursive>:
 80063e2:	4770      	bx	lr

080063e4 <__ssputs_r>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	688e      	ldr	r6, [r1, #8]
 80063ea:	461f      	mov	r7, r3
 80063ec:	42be      	cmp	r6, r7
 80063ee:	680b      	ldr	r3, [r1, #0]
 80063f0:	4682      	mov	sl, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	4690      	mov	r8, r2
 80063f6:	d82c      	bhi.n	8006452 <__ssputs_r+0x6e>
 80063f8:	898a      	ldrh	r2, [r1, #12]
 80063fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fe:	d026      	beq.n	800644e <__ssputs_r+0x6a>
 8006400:	6965      	ldr	r5, [r4, #20]
 8006402:	6909      	ldr	r1, [r1, #16]
 8006404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006408:	eba3 0901 	sub.w	r9, r3, r1
 800640c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006410:	1c7b      	adds	r3, r7, #1
 8006412:	444b      	add	r3, r9
 8006414:	106d      	asrs	r5, r5, #1
 8006416:	429d      	cmp	r5, r3
 8006418:	bf38      	it	cc
 800641a:	461d      	movcc	r5, r3
 800641c:	0553      	lsls	r3, r2, #21
 800641e:	d527      	bpl.n	8006470 <__ssputs_r+0x8c>
 8006420:	4629      	mov	r1, r5
 8006422:	f000 f957 	bl	80066d4 <_malloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	b360      	cbz	r0, 8006484 <__ssputs_r+0xa0>
 800642a:	6921      	ldr	r1, [r4, #16]
 800642c:	464a      	mov	r2, r9
 800642e:	f000 fbc7 	bl	8006bc0 <memcpy>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	6126      	str	r6, [r4, #16]
 8006440:	6165      	str	r5, [r4, #20]
 8006442:	444e      	add	r6, r9
 8006444:	eba5 0509 	sub.w	r5, r5, r9
 8006448:	6026      	str	r6, [r4, #0]
 800644a:	60a5      	str	r5, [r4, #8]
 800644c:	463e      	mov	r6, r7
 800644e:	42be      	cmp	r6, r7
 8006450:	d900      	bls.n	8006454 <__ssputs_r+0x70>
 8006452:	463e      	mov	r6, r7
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4632      	mov	r2, r6
 8006458:	4641      	mov	r1, r8
 800645a:	f000 fb86 	bl	8006b6a <memmove>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	1b9b      	subs	r3, r3, r6
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	4433      	add	r3, r6
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	2000      	movs	r0, #0
 800646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006470:	462a      	mov	r2, r5
 8006472:	f000 fb4b 	bl	8006b0c <_realloc_r>
 8006476:	4606      	mov	r6, r0
 8006478:	2800      	cmp	r0, #0
 800647a:	d1e0      	bne.n	800643e <__ssputs_r+0x5a>
 800647c:	6921      	ldr	r1, [r4, #16]
 800647e:	4650      	mov	r0, sl
 8006480:	f000 fbac 	bl	8006bdc <_free_r>
 8006484:	230c      	movs	r3, #12
 8006486:	f8ca 3000 	str.w	r3, [sl]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006496:	e7e9      	b.n	800646c <__ssputs_r+0x88>

08006498 <_svfiprintf_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4698      	mov	r8, r3
 800649e:	898b      	ldrh	r3, [r1, #12]
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	b09d      	sub	sp, #116	; 0x74
 80064a4:	4607      	mov	r7, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	d50e      	bpl.n	80064ca <_svfiprintf_r+0x32>
 80064ac:	690b      	ldr	r3, [r1, #16]
 80064ae:	b963      	cbnz	r3, 80064ca <_svfiprintf_r+0x32>
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	f000 f90f 	bl	80066d4 <_malloc_r>
 80064b6:	6028      	str	r0, [r5, #0]
 80064b8:	6128      	str	r0, [r5, #16]
 80064ba:	b920      	cbnz	r0, 80064c6 <_svfiprintf_r+0x2e>
 80064bc:	230c      	movs	r3, #12
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064c4:	e0d0      	b.n	8006668 <_svfiprintf_r+0x1d0>
 80064c6:	2340      	movs	r3, #64	; 0x40
 80064c8:	616b      	str	r3, [r5, #20]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9309      	str	r3, [sp, #36]	; 0x24
 80064ce:	2320      	movs	r3, #32
 80064d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064d8:	2330      	movs	r3, #48	; 0x30
 80064da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006680 <_svfiprintf_r+0x1e8>
 80064de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e2:	f04f 0901 	mov.w	r9, #1
 80064e6:	4623      	mov	r3, r4
 80064e8:	469a      	mov	sl, r3
 80064ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ee:	b10a      	cbz	r2, 80064f4 <_svfiprintf_r+0x5c>
 80064f0:	2a25      	cmp	r2, #37	; 0x25
 80064f2:	d1f9      	bne.n	80064e8 <_svfiprintf_r+0x50>
 80064f4:	ebba 0b04 	subs.w	fp, sl, r4
 80064f8:	d00b      	beq.n	8006512 <_svfiprintf_r+0x7a>
 80064fa:	465b      	mov	r3, fp
 80064fc:	4622      	mov	r2, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	4638      	mov	r0, r7
 8006502:	f7ff ff6f 	bl	80063e4 <__ssputs_r>
 8006506:	3001      	adds	r0, #1
 8006508:	f000 80a9 	beq.w	800665e <_svfiprintf_r+0x1c6>
 800650c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800650e:	445a      	add	r2, fp
 8006510:	9209      	str	r2, [sp, #36]	; 0x24
 8006512:	f89a 3000 	ldrb.w	r3, [sl]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80a1 	beq.w	800665e <_svfiprintf_r+0x1c6>
 800651c:	2300      	movs	r3, #0
 800651e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006526:	f10a 0a01 	add.w	sl, sl, #1
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	9307      	str	r3, [sp, #28]
 800652e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006532:	931a      	str	r3, [sp, #104]	; 0x68
 8006534:	4654      	mov	r4, sl
 8006536:	2205      	movs	r2, #5
 8006538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653c:	4850      	ldr	r0, [pc, #320]	; (8006680 <_svfiprintf_r+0x1e8>)
 800653e:	f7f9 fe6f 	bl	8000220 <memchr>
 8006542:	9a04      	ldr	r2, [sp, #16]
 8006544:	b9d8      	cbnz	r0, 800657e <_svfiprintf_r+0xe6>
 8006546:	06d0      	lsls	r0, r2, #27
 8006548:	bf44      	itt	mi
 800654a:	2320      	movmi	r3, #32
 800654c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006550:	0711      	lsls	r1, r2, #28
 8006552:	bf44      	itt	mi
 8006554:	232b      	movmi	r3, #43	; 0x2b
 8006556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655a:	f89a 3000 	ldrb.w	r3, [sl]
 800655e:	2b2a      	cmp	r3, #42	; 0x2a
 8006560:	d015      	beq.n	800658e <_svfiprintf_r+0xf6>
 8006562:	9a07      	ldr	r2, [sp, #28]
 8006564:	4654      	mov	r4, sl
 8006566:	2000      	movs	r0, #0
 8006568:	f04f 0c0a 	mov.w	ip, #10
 800656c:	4621      	mov	r1, r4
 800656e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006572:	3b30      	subs	r3, #48	; 0x30
 8006574:	2b09      	cmp	r3, #9
 8006576:	d94d      	bls.n	8006614 <_svfiprintf_r+0x17c>
 8006578:	b1b0      	cbz	r0, 80065a8 <_svfiprintf_r+0x110>
 800657a:	9207      	str	r2, [sp, #28]
 800657c:	e014      	b.n	80065a8 <_svfiprintf_r+0x110>
 800657e:	eba0 0308 	sub.w	r3, r0, r8
 8006582:	fa09 f303 	lsl.w	r3, r9, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	46a2      	mov	sl, r4
 800658c:	e7d2      	b.n	8006534 <_svfiprintf_r+0x9c>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9103      	str	r1, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfbb      	ittet	lt
 800659a:	425b      	neglt	r3, r3
 800659c:	f042 0202 	orrlt.w	r2, r2, #2
 80065a0:	9307      	strge	r3, [sp, #28]
 80065a2:	9307      	strlt	r3, [sp, #28]
 80065a4:	bfb8      	it	lt
 80065a6:	9204      	strlt	r2, [sp, #16]
 80065a8:	7823      	ldrb	r3, [r4, #0]
 80065aa:	2b2e      	cmp	r3, #46	; 0x2e
 80065ac:	d10c      	bne.n	80065c8 <_svfiprintf_r+0x130>
 80065ae:	7863      	ldrb	r3, [r4, #1]
 80065b0:	2b2a      	cmp	r3, #42	; 0x2a
 80065b2:	d134      	bne.n	800661e <_svfiprintf_r+0x186>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	9203      	str	r2, [sp, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfb8      	it	lt
 80065c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065c4:	3402      	adds	r4, #2
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006690 <_svfiprintf_r+0x1f8>
 80065cc:	7821      	ldrb	r1, [r4, #0]
 80065ce:	2203      	movs	r2, #3
 80065d0:	4650      	mov	r0, sl
 80065d2:	f7f9 fe25 	bl	8000220 <memchr>
 80065d6:	b138      	cbz	r0, 80065e8 <_svfiprintf_r+0x150>
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	eba0 000a 	sub.w	r0, r0, sl
 80065de:	2240      	movs	r2, #64	; 0x40
 80065e0:	4082      	lsls	r2, r0
 80065e2:	4313      	orrs	r3, r2
 80065e4:	3401      	adds	r4, #1
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ec:	4825      	ldr	r0, [pc, #148]	; (8006684 <_svfiprintf_r+0x1ec>)
 80065ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065f2:	2206      	movs	r2, #6
 80065f4:	f7f9 fe14 	bl	8000220 <memchr>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d038      	beq.n	800666e <_svfiprintf_r+0x1d6>
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <_svfiprintf_r+0x1f0>)
 80065fe:	bb1b      	cbnz	r3, 8006648 <_svfiprintf_r+0x1b0>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	3307      	adds	r3, #7
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	3308      	adds	r3, #8
 800660a:	9303      	str	r3, [sp, #12]
 800660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660e:	4433      	add	r3, r6
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	e768      	b.n	80064e6 <_svfiprintf_r+0x4e>
 8006614:	fb0c 3202 	mla	r2, ip, r2, r3
 8006618:	460c      	mov	r4, r1
 800661a:	2001      	movs	r0, #1
 800661c:	e7a6      	b.n	800656c <_svfiprintf_r+0xd4>
 800661e:	2300      	movs	r3, #0
 8006620:	3401      	adds	r4, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	4619      	mov	r1, r3
 8006626:	f04f 0c0a 	mov.w	ip, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006630:	3a30      	subs	r2, #48	; 0x30
 8006632:	2a09      	cmp	r2, #9
 8006634:	d903      	bls.n	800663e <_svfiprintf_r+0x1a6>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0c6      	beq.n	80065c8 <_svfiprintf_r+0x130>
 800663a:	9105      	str	r1, [sp, #20]
 800663c:	e7c4      	b.n	80065c8 <_svfiprintf_r+0x130>
 800663e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006642:	4604      	mov	r4, r0
 8006644:	2301      	movs	r3, #1
 8006646:	e7f0      	b.n	800662a <_svfiprintf_r+0x192>
 8006648:	ab03      	add	r3, sp, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	462a      	mov	r2, r5
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <_svfiprintf_r+0x1f4>)
 8006650:	a904      	add	r1, sp, #16
 8006652:	4638      	mov	r0, r7
 8006654:	f3af 8000 	nop.w
 8006658:	1c42      	adds	r2, r0, #1
 800665a:	4606      	mov	r6, r0
 800665c:	d1d6      	bne.n	800660c <_svfiprintf_r+0x174>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	065b      	lsls	r3, r3, #25
 8006662:	f53f af2d 	bmi.w	80064c0 <_svfiprintf_r+0x28>
 8006666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006668:	b01d      	add	sp, #116	; 0x74
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	ab03      	add	r3, sp, #12
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	462a      	mov	r2, r5
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <_svfiprintf_r+0x1f4>)
 8006676:	a904      	add	r1, sp, #16
 8006678:	4638      	mov	r0, r7
 800667a:	f000 f919 	bl	80068b0 <_printf_i>
 800667e:	e7eb      	b.n	8006658 <_svfiprintf_r+0x1c0>
 8006680:	08006db9 	.word	0x08006db9
 8006684:	08006dc3 	.word	0x08006dc3
 8006688:	00000000 	.word	0x00000000
 800668c:	080063e5 	.word	0x080063e5
 8006690:	08006dbf 	.word	0x08006dbf

08006694 <sbrk_aligned>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4e0e      	ldr	r6, [pc, #56]	; (80066d0 <sbrk_aligned+0x3c>)
 8006698:	460c      	mov	r4, r1
 800669a:	6831      	ldr	r1, [r6, #0]
 800669c:	4605      	mov	r5, r0
 800669e:	b911      	cbnz	r1, 80066a6 <sbrk_aligned+0x12>
 80066a0:	f000 fa7e 	bl	8006ba0 <_sbrk_r>
 80066a4:	6030      	str	r0, [r6, #0]
 80066a6:	4621      	mov	r1, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 fa79 	bl	8006ba0 <_sbrk_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d00a      	beq.n	80066c8 <sbrk_aligned+0x34>
 80066b2:	1cc4      	adds	r4, r0, #3
 80066b4:	f024 0403 	bic.w	r4, r4, #3
 80066b8:	42a0      	cmp	r0, r4
 80066ba:	d007      	beq.n	80066cc <sbrk_aligned+0x38>
 80066bc:	1a21      	subs	r1, r4, r0
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fa6e 	bl	8006ba0 <_sbrk_r>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d101      	bne.n	80066cc <sbrk_aligned+0x38>
 80066c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066cc:	4620      	mov	r0, r4
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	20000640 	.word	0x20000640

080066d4 <_malloc_r>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	1ccd      	adds	r5, r1, #3
 80066da:	f025 0503 	bic.w	r5, r5, #3
 80066de:	3508      	adds	r5, #8
 80066e0:	2d0c      	cmp	r5, #12
 80066e2:	bf38      	it	cc
 80066e4:	250c      	movcc	r5, #12
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	4607      	mov	r7, r0
 80066ea:	db01      	blt.n	80066f0 <_malloc_r+0x1c>
 80066ec:	42a9      	cmp	r1, r5
 80066ee:	d905      	bls.n	80066fc <_malloc_r+0x28>
 80066f0:	230c      	movs	r3, #12
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	2600      	movs	r6, #0
 80066f6:	4630      	mov	r0, r6
 80066f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067d0 <_malloc_r+0xfc>
 8006700:	f000 f9f8 	bl	8006af4 <__malloc_lock>
 8006704:	f8d8 3000 	ldr.w	r3, [r8]
 8006708:	461c      	mov	r4, r3
 800670a:	bb5c      	cbnz	r4, 8006764 <_malloc_r+0x90>
 800670c:	4629      	mov	r1, r5
 800670e:	4638      	mov	r0, r7
 8006710:	f7ff ffc0 	bl	8006694 <sbrk_aligned>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	4604      	mov	r4, r0
 8006718:	d155      	bne.n	80067c6 <_malloc_r+0xf2>
 800671a:	f8d8 4000 	ldr.w	r4, [r8]
 800671e:	4626      	mov	r6, r4
 8006720:	2e00      	cmp	r6, #0
 8006722:	d145      	bne.n	80067b0 <_malloc_r+0xdc>
 8006724:	2c00      	cmp	r4, #0
 8006726:	d048      	beq.n	80067ba <_malloc_r+0xe6>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	4631      	mov	r1, r6
 800672c:	4638      	mov	r0, r7
 800672e:	eb04 0903 	add.w	r9, r4, r3
 8006732:	f000 fa35 	bl	8006ba0 <_sbrk_r>
 8006736:	4581      	cmp	r9, r0
 8006738:	d13f      	bne.n	80067ba <_malloc_r+0xe6>
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	1a6d      	subs	r5, r5, r1
 800673e:	4629      	mov	r1, r5
 8006740:	4638      	mov	r0, r7
 8006742:	f7ff ffa7 	bl	8006694 <sbrk_aligned>
 8006746:	3001      	adds	r0, #1
 8006748:	d037      	beq.n	80067ba <_malloc_r+0xe6>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	442b      	add	r3, r5
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	f8d8 3000 	ldr.w	r3, [r8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d038      	beq.n	80067ca <_malloc_r+0xf6>
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	42a2      	cmp	r2, r4
 800675c:	d12b      	bne.n	80067b6 <_malloc_r+0xe2>
 800675e:	2200      	movs	r2, #0
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	e00f      	b.n	8006784 <_malloc_r+0xb0>
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	1b52      	subs	r2, r2, r5
 8006768:	d41f      	bmi.n	80067aa <_malloc_r+0xd6>
 800676a:	2a0b      	cmp	r2, #11
 800676c:	d917      	bls.n	800679e <_malloc_r+0xca>
 800676e:	1961      	adds	r1, r4, r5
 8006770:	42a3      	cmp	r3, r4
 8006772:	6025      	str	r5, [r4, #0]
 8006774:	bf18      	it	ne
 8006776:	6059      	strne	r1, [r3, #4]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	bf08      	it	eq
 800677c:	f8c8 1000 	streq.w	r1, [r8]
 8006780:	5162      	str	r2, [r4, r5]
 8006782:	604b      	str	r3, [r1, #4]
 8006784:	4638      	mov	r0, r7
 8006786:	f104 060b 	add.w	r6, r4, #11
 800678a:	f000 f9b9 	bl	8006b00 <__malloc_unlock>
 800678e:	f026 0607 	bic.w	r6, r6, #7
 8006792:	1d23      	adds	r3, r4, #4
 8006794:	1af2      	subs	r2, r6, r3
 8006796:	d0ae      	beq.n	80066f6 <_malloc_r+0x22>
 8006798:	1b9b      	subs	r3, r3, r6
 800679a:	50a3      	str	r3, [r4, r2]
 800679c:	e7ab      	b.n	80066f6 <_malloc_r+0x22>
 800679e:	42a3      	cmp	r3, r4
 80067a0:	6862      	ldr	r2, [r4, #4]
 80067a2:	d1dd      	bne.n	8006760 <_malloc_r+0x8c>
 80067a4:	f8c8 2000 	str.w	r2, [r8]
 80067a8:	e7ec      	b.n	8006784 <_malloc_r+0xb0>
 80067aa:	4623      	mov	r3, r4
 80067ac:	6864      	ldr	r4, [r4, #4]
 80067ae:	e7ac      	b.n	800670a <_malloc_r+0x36>
 80067b0:	4634      	mov	r4, r6
 80067b2:	6876      	ldr	r6, [r6, #4]
 80067b4:	e7b4      	b.n	8006720 <_malloc_r+0x4c>
 80067b6:	4613      	mov	r3, r2
 80067b8:	e7cc      	b.n	8006754 <_malloc_r+0x80>
 80067ba:	230c      	movs	r3, #12
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	4638      	mov	r0, r7
 80067c0:	f000 f99e 	bl	8006b00 <__malloc_unlock>
 80067c4:	e797      	b.n	80066f6 <_malloc_r+0x22>
 80067c6:	6025      	str	r5, [r4, #0]
 80067c8:	e7dc      	b.n	8006784 <_malloc_r+0xb0>
 80067ca:	605b      	str	r3, [r3, #4]
 80067cc:	deff      	udf	#255	; 0xff
 80067ce:	bf00      	nop
 80067d0:	2000063c 	.word	0x2000063c

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4616      	mov	r6, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bfb8      	it	lt
 80067e8:	4613      	movlt	r3, r2
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f0:	4607      	mov	r7, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b10a      	cbz	r2, 80067fa <_printf_common+0x26>
 80067f6:	3301      	adds	r3, #1
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	6833      	ldrmi	r3, [r6, #0]
 8006802:	3302      	addmi	r3, #2
 8006804:	6033      	strmi	r3, [r6, #0]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d106      	bne.n	800681c <_printf_common+0x48>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc26      	bgt.n	800686a <_printf_common+0x96>
 800681c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006820:	1e13      	subs	r3, r2, #0
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	bf18      	it	ne
 8006826:	2301      	movne	r3, #1
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d42b      	bmi.n	8006884 <_printf_common+0xb0>
 800682c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006830:	4649      	mov	r1, r9
 8006832:	4638      	mov	r0, r7
 8006834:	47c0      	blx	r8
 8006836:	3001      	adds	r0, #1
 8006838:	d01e      	beq.n	8006878 <_printf_common+0xa4>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6922      	ldr	r2, [r4, #16]
 800683e:	f003 0306 	and.w	r3, r3, #6
 8006842:	2b04      	cmp	r3, #4
 8006844:	bf02      	ittt	eq
 8006846:	68e5      	ldreq	r5, [r4, #12]
 8006848:	6833      	ldreq	r3, [r6, #0]
 800684a:	1aed      	subeq	r5, r5, r3
 800684c:	68a3      	ldr	r3, [r4, #8]
 800684e:	bf0c      	ite	eq
 8006850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006854:	2500      	movne	r5, #0
 8006856:	4293      	cmp	r3, r2
 8006858:	bfc4      	itt	gt
 800685a:	1a9b      	subgt	r3, r3, r2
 800685c:	18ed      	addgt	r5, r5, r3
 800685e:	2600      	movs	r6, #0
 8006860:	341a      	adds	r4, #26
 8006862:	42b5      	cmp	r5, r6
 8006864:	d11a      	bne.n	800689c <_printf_common+0xc8>
 8006866:	2000      	movs	r0, #0
 8006868:	e008      	b.n	800687c <_printf_common+0xa8>
 800686a:	2301      	movs	r3, #1
 800686c:	4652      	mov	r2, sl
 800686e:	4649      	mov	r1, r9
 8006870:	4638      	mov	r0, r7
 8006872:	47c0      	blx	r8
 8006874:	3001      	adds	r0, #1
 8006876:	d103      	bne.n	8006880 <_printf_common+0xac>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	3501      	adds	r5, #1
 8006882:	e7c6      	b.n	8006812 <_printf_common+0x3e>
 8006884:	18e1      	adds	r1, r4, r3
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	2030      	movs	r0, #48	; 0x30
 800688a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800688e:	4422      	add	r2, r4
 8006890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006898:	3302      	adds	r3, #2
 800689a:	e7c7      	b.n	800682c <_printf_common+0x58>
 800689c:	2301      	movs	r3, #1
 800689e:	4622      	mov	r2, r4
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d0e6      	beq.n	8006878 <_printf_common+0xa4>
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7d9      	b.n	8006862 <_printf_common+0x8e>
	...

080068b0 <_printf_i>:
 80068b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	7e0f      	ldrb	r7, [r1, #24]
 80068b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068b8:	2f78      	cmp	r7, #120	; 0x78
 80068ba:	4691      	mov	r9, r2
 80068bc:	4680      	mov	r8, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	469a      	mov	sl, r3
 80068c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068c6:	d807      	bhi.n	80068d8 <_printf_i+0x28>
 80068c8:	2f62      	cmp	r7, #98	; 0x62
 80068ca:	d80a      	bhi.n	80068e2 <_printf_i+0x32>
 80068cc:	2f00      	cmp	r7, #0
 80068ce:	f000 80d4 	beq.w	8006a7a <_printf_i+0x1ca>
 80068d2:	2f58      	cmp	r7, #88	; 0x58
 80068d4:	f000 80c0 	beq.w	8006a58 <_printf_i+0x1a8>
 80068d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e0:	e03a      	b.n	8006958 <_printf_i+0xa8>
 80068e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068e6:	2b15      	cmp	r3, #21
 80068e8:	d8f6      	bhi.n	80068d8 <_printf_i+0x28>
 80068ea:	a101      	add	r1, pc, #4	; (adr r1, 80068f0 <_printf_i+0x40>)
 80068ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f0:	08006949 	.word	0x08006949
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	080068d9 	.word	0x080068d9
 80068fc:	080068d9 	.word	0x080068d9
 8006900:	080068d9 	.word	0x080068d9
 8006904:	080068d9 	.word	0x080068d9
 8006908:	0800695d 	.word	0x0800695d
 800690c:	080068d9 	.word	0x080068d9
 8006910:	080068d9 	.word	0x080068d9
 8006914:	080068d9 	.word	0x080068d9
 8006918:	080068d9 	.word	0x080068d9
 800691c:	08006a61 	.word	0x08006a61
 8006920:	08006989 	.word	0x08006989
 8006924:	08006a1b 	.word	0x08006a1b
 8006928:	080068d9 	.word	0x080068d9
 800692c:	080068d9 	.word	0x080068d9
 8006930:	08006a83 	.word	0x08006a83
 8006934:	080068d9 	.word	0x080068d9
 8006938:	08006989 	.word	0x08006989
 800693c:	080068d9 	.word	0x080068d9
 8006940:	080068d9 	.word	0x080068d9
 8006944:	08006a23 	.word	0x08006a23
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	602a      	str	r2, [r5, #0]
 8006950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006958:	2301      	movs	r3, #1
 800695a:	e09f      	b.n	8006a9c <_printf_i+0x1ec>
 800695c:	6820      	ldr	r0, [r4, #0]
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	0607      	lsls	r7, r0, #24
 8006962:	f103 0104 	add.w	r1, r3, #4
 8006966:	6029      	str	r1, [r5, #0]
 8006968:	d501      	bpl.n	800696e <_printf_i+0xbe>
 800696a:	681e      	ldr	r6, [r3, #0]
 800696c:	e003      	b.n	8006976 <_printf_i+0xc6>
 800696e:	0646      	lsls	r6, r0, #25
 8006970:	d5fb      	bpl.n	800696a <_printf_i+0xba>
 8006972:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006976:	2e00      	cmp	r6, #0
 8006978:	da03      	bge.n	8006982 <_printf_i+0xd2>
 800697a:	232d      	movs	r3, #45	; 0x2d
 800697c:	4276      	negs	r6, r6
 800697e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006982:	485a      	ldr	r0, [pc, #360]	; (8006aec <_printf_i+0x23c>)
 8006984:	230a      	movs	r3, #10
 8006986:	e012      	b.n	80069ae <_printf_i+0xfe>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	6029      	str	r1, [r5, #0]
 8006990:	0605      	lsls	r5, r0, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xe8>
 8006994:	681e      	ldr	r6, [r3, #0]
 8006996:	e002      	b.n	800699e <_printf_i+0xee>
 8006998:	0641      	lsls	r1, r0, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xe4>
 800699c:	881e      	ldrh	r6, [r3, #0]
 800699e:	4853      	ldr	r0, [pc, #332]	; (8006aec <_printf_i+0x23c>)
 80069a0:	2f6f      	cmp	r7, #111	; 0x6f
 80069a2:	bf0c      	ite	eq
 80069a4:	2308      	moveq	r3, #8
 80069a6:	230a      	movne	r3, #10
 80069a8:	2100      	movs	r1, #0
 80069aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ae:	6865      	ldr	r5, [r4, #4]
 80069b0:	60a5      	str	r5, [r4, #8]
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	bfa2      	ittt	ge
 80069b6:	6821      	ldrge	r1, [r4, #0]
 80069b8:	f021 0104 	bicge.w	r1, r1, #4
 80069bc:	6021      	strge	r1, [r4, #0]
 80069be:	b90e      	cbnz	r6, 80069c4 <_printf_i+0x114>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	d04b      	beq.n	8006a5c <_printf_i+0x1ac>
 80069c4:	4615      	mov	r5, r2
 80069c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ca:	fb03 6711 	mls	r7, r3, r1, r6
 80069ce:	5dc7      	ldrb	r7, [r0, r7]
 80069d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069d4:	4637      	mov	r7, r6
 80069d6:	42bb      	cmp	r3, r7
 80069d8:	460e      	mov	r6, r1
 80069da:	d9f4      	bls.n	80069c6 <_printf_i+0x116>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d10b      	bne.n	80069f8 <_printf_i+0x148>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07de      	lsls	r6, r3, #31
 80069e4:	d508      	bpl.n	80069f8 <_printf_i+0x148>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6861      	ldr	r1, [r4, #4]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	bfde      	ittt	le
 80069ee:	2330      	movle	r3, #48	; 0x30
 80069f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069f8:	1b52      	subs	r2, r2, r5
 80069fa:	6122      	str	r2, [r4, #16]
 80069fc:	f8cd a000 	str.w	sl, [sp]
 8006a00:	464b      	mov	r3, r9
 8006a02:	aa03      	add	r2, sp, #12
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7ff fee4 	bl	80067d4 <_printf_common>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d14a      	bne.n	8006aa6 <_printf_i+0x1f6>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a14:	b004      	add	sp, #16
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f043 0320 	orr.w	r3, r3, #32
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	4833      	ldr	r0, [pc, #204]	; (8006af0 <_printf_i+0x240>)
 8006a24:	2778      	movs	r7, #120	; 0x78
 8006a26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6829      	ldr	r1, [r5, #0]
 8006a2e:	061f      	lsls	r7, r3, #24
 8006a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a34:	d402      	bmi.n	8006a3c <_printf_i+0x18c>
 8006a36:	065f      	lsls	r7, r3, #25
 8006a38:	bf48      	it	mi
 8006a3a:	b2b6      	uxthmi	r6, r6
 8006a3c:	07df      	lsls	r7, r3, #31
 8006a3e:	bf48      	it	mi
 8006a40:	f043 0320 	orrmi.w	r3, r3, #32
 8006a44:	6029      	str	r1, [r5, #0]
 8006a46:	bf48      	it	mi
 8006a48:	6023      	strmi	r3, [r4, #0]
 8006a4a:	b91e      	cbnz	r6, 8006a54 <_printf_i+0x1a4>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	f023 0320 	bic.w	r3, r3, #32
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	2310      	movs	r3, #16
 8006a56:	e7a7      	b.n	80069a8 <_printf_i+0xf8>
 8006a58:	4824      	ldr	r0, [pc, #144]	; (8006aec <_printf_i+0x23c>)
 8006a5a:	e7e4      	b.n	8006a26 <_printf_i+0x176>
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	e7bd      	b.n	80069dc <_printf_i+0x12c>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	6961      	ldr	r1, [r4, #20]
 8006a66:	1d18      	adds	r0, r3, #4
 8006a68:	6028      	str	r0, [r5, #0]
 8006a6a:	0635      	lsls	r5, r6, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1c4>
 8006a70:	6019      	str	r1, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1ca>
 8006a74:	0670      	lsls	r0, r6, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1c0>
 8006a78:	8019      	strh	r1, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4615      	mov	r5, r2
 8006a80:	e7bc      	b.n	80069fc <_printf_i+0x14c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	602a      	str	r2, [r5, #0]
 8006a88:	681d      	ldr	r5, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f7f9 fbc6 	bl	8000220 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1ea>
 8006a96:	1b40      	subs	r0, r0, r5
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	e7aa      	b.n	80069fc <_printf_i+0x14c>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ad      	beq.n	8006a10 <_printf_i+0x160>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x232>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a6      	b.n	8006a14 <_printf_i+0x164>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09d      	beq.n	8006a10 <_printf_i+0x160>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x216>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x20a>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x226>
 8006aea:	bf00      	nop
 8006aec:	08006dca 	.word	0x08006dca
 8006af0:	08006ddb 	.word	0x08006ddb

08006af4 <__malloc_lock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__malloc_lock+0x8>)
 8006af6:	f7ff bc73 	b.w	80063e0 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	20000638 	.word	0x20000638

08006b00 <__malloc_unlock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__malloc_unlock+0x8>)
 8006b02:	f7ff bc6e 	b.w	80063e2 <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	20000638 	.word	0x20000638

08006b0c <_realloc_r>:
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	4680      	mov	r8, r0
 8006b12:	4614      	mov	r4, r2
 8006b14:	460e      	mov	r6, r1
 8006b16:	b921      	cbnz	r1, 8006b22 <_realloc_r+0x16>
 8006b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	f7ff bdd9 	b.w	80066d4 <_malloc_r>
 8006b22:	b92a      	cbnz	r2, 8006b30 <_realloc_r+0x24>
 8006b24:	f000 f85a 	bl	8006bdc <_free_r>
 8006b28:	4625      	mov	r5, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b30:	f000 f8a0 	bl	8006c74 <_malloc_usable_size_r>
 8006b34:	4284      	cmp	r4, r0
 8006b36:	4607      	mov	r7, r0
 8006b38:	d802      	bhi.n	8006b40 <_realloc_r+0x34>
 8006b3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b3e:	d812      	bhi.n	8006b66 <_realloc_r+0x5a>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4640      	mov	r0, r8
 8006b44:	f7ff fdc6 	bl	80066d4 <_malloc_r>
 8006b48:	4605      	mov	r5, r0
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d0ed      	beq.n	8006b2a <_realloc_r+0x1e>
 8006b4e:	42bc      	cmp	r4, r7
 8006b50:	4622      	mov	r2, r4
 8006b52:	4631      	mov	r1, r6
 8006b54:	bf28      	it	cs
 8006b56:	463a      	movcs	r2, r7
 8006b58:	f000 f832 	bl	8006bc0 <memcpy>
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4640      	mov	r0, r8
 8006b60:	f000 f83c 	bl	8006bdc <_free_r>
 8006b64:	e7e1      	b.n	8006b2a <_realloc_r+0x1e>
 8006b66:	4635      	mov	r5, r6
 8006b68:	e7df      	b.n	8006b2a <_realloc_r+0x1e>

08006b6a <memmove>:
 8006b6a:	4288      	cmp	r0, r1
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	eb01 0402 	add.w	r4, r1, r2
 8006b72:	d902      	bls.n	8006b7a <memmove+0x10>
 8006b74:	4284      	cmp	r4, r0
 8006b76:	4623      	mov	r3, r4
 8006b78:	d807      	bhi.n	8006b8a <memmove+0x20>
 8006b7a:	1e43      	subs	r3, r0, #1
 8006b7c:	42a1      	cmp	r1, r4
 8006b7e:	d008      	beq.n	8006b92 <memmove+0x28>
 8006b80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b88:	e7f8      	b.n	8006b7c <memmove+0x12>
 8006b8a:	4402      	add	r2, r0
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	428a      	cmp	r2, r1
 8006b90:	d100      	bne.n	8006b94 <memmove+0x2a>
 8006b92:	bd10      	pop	{r4, pc}
 8006b94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b9c:	e7f7      	b.n	8006b8e <memmove+0x24>
	...

08006ba0 <_sbrk_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d06      	ldr	r5, [pc, #24]	; (8006bbc <_sbrk_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f7fa fcae 	bl	800150c <_sbrk>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_sbrk_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_sbrk_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20000644 	.word	0x20000644

08006bc0 <memcpy>:
 8006bc0:	440a      	add	r2, r1
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bc8:	d100      	bne.n	8006bcc <memcpy+0xc>
 8006bca:	4770      	bx	lr
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	d1f9      	bne.n	8006bce <memcpy+0xe>
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <_free_r>:
 8006bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bde:	2900      	cmp	r1, #0
 8006be0:	d044      	beq.n	8006c6c <_free_r+0x90>
 8006be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be6:	9001      	str	r0, [sp, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f1a1 0404 	sub.w	r4, r1, #4
 8006bee:	bfb8      	it	lt
 8006bf0:	18e4      	addlt	r4, r4, r3
 8006bf2:	f7ff ff7f 	bl	8006af4 <__malloc_lock>
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <_free_r+0x94>)
 8006bf8:	9801      	ldr	r0, [sp, #4]
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	b933      	cbnz	r3, 8006c0c <_free_r+0x30>
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	b003      	add	sp, #12
 8006c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c08:	f7ff bf7a 	b.w	8006b00 <__malloc_unlock>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d908      	bls.n	8006c22 <_free_r+0x46>
 8006c10:	6825      	ldr	r5, [r4, #0]
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1949      	addeq	r1, r1, r5
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	e7ed      	b.n	8006bfe <_free_r+0x22>
 8006c22:	461a      	mov	r2, r3
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b10b      	cbz	r3, 8006c2c <_free_r+0x50>
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d9fa      	bls.n	8006c22 <_free_r+0x46>
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	1855      	adds	r5, r2, r1
 8006c30:	42a5      	cmp	r5, r4
 8006c32:	d10b      	bne.n	8006c4c <_free_r+0x70>
 8006c34:	6824      	ldr	r4, [r4, #0]
 8006c36:	4421      	add	r1, r4
 8006c38:	1854      	adds	r4, r2, r1
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	d1e0      	bne.n	8006c02 <_free_r+0x26>
 8006c40:	681c      	ldr	r4, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	440c      	add	r4, r1
 8006c48:	6014      	str	r4, [r2, #0]
 8006c4a:	e7da      	b.n	8006c02 <_free_r+0x26>
 8006c4c:	d902      	bls.n	8006c54 <_free_r+0x78>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6003      	str	r3, [r0, #0]
 8006c52:	e7d6      	b.n	8006c02 <_free_r+0x26>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf04      	itt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	bf04      	itt	eq
 8006c64:	1949      	addeq	r1, r1, r5
 8006c66:	6021      	streq	r1, [r4, #0]
 8006c68:	6054      	str	r4, [r2, #4]
 8006c6a:	e7ca      	b.n	8006c02 <_free_r+0x26>
 8006c6c:	b003      	add	sp, #12
 8006c6e:	bd30      	pop	{r4, r5, pc}
 8006c70:	2000063c 	.word	0x2000063c

08006c74 <_malloc_usable_size_r>:
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f18      	subs	r0, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbc      	itt	lt
 8006c7e:	580b      	ldrlt	r3, [r1, r0]
 8006c80:	18c0      	addlt	r0, r0, r3
 8006c82:	4770      	bx	lr

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
