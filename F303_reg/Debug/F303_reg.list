
F303_reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001ed0  08001ed0  00011ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000034f3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ca9  00000000  00000000  00023572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000398  00000000  00000000  00024220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000294  00000000  00000000  000245b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018c71  00000000  00000000  0002484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004824  00000000  00000000  0003d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00092056  00000000  00000000  00041ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000cac  00000000  00000000  000d3d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000d49e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001eb8 	.word	0x08001eb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001eb8 	.word	0x08001eb8

080001c8 <main>:
	PIN_LOW = 0,
	PIN_HI  = 1
} RAL_PinLevel;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8

  HAL_Init();
 80001ce:	f000 fad7 	bl	8000780 <HAL_Init>
  SystemClock_Config();
 80001d2:	f000 f86f 	bl	80002b4 <SystemClock_Config>
  MX_GPIO_Init();
 80001d6:	f000 fa1f 	bl	8000618 <MX_GPIO_Init>
					RAL_PinOutputSpeed speed,
					RAL_PinPullUpPullDownResistor pupd
  					);

  //register     portB, pin3
  if(RAL_pinRegister(GPIOB, 3, OUTPUT, PUSH_PULL, LOW, NO_PUPD) != RAL_OK) Error_Handler();
 80001da:	2300      	movs	r3, #0
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	2300      	movs	r3, #0
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2201      	movs	r2, #1
 80001e6:	2103      	movs	r1, #3
 80001e8:	4831      	ldr	r0, [pc, #196]	; (80002b0 <main+0xe8>)
 80001ea:	f000 f98b 	bl	8000504 <RAL_pinRegister>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <main+0x30>
 80001f4:	f000 fa28 	bl	8000648 <Error_Handler>
  if(RAL_pinRegister(GPIOA, 0, OUTPUT, PUSH_PULL, LOW, NO_PUPD) != RAL_OK) Error_Handler();
 80001f8:	2300      	movs	r3, #0
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	2300      	movs	r3, #0
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	2300      	movs	r3, #0
 8000202:	2201      	movs	r2, #1
 8000204:	2100      	movs	r1, #0
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f000 f97b 	bl	8000504 <RAL_pinRegister>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <main+0x50>
 8000214:	f000 fa18 	bl	8000648 <Error_Handler>
  if(RAL_pinRegister(GPIOA, 1, OUTPUT, PUSH_PULL, LOW, NO_PUPD) != RAL_OK) Error_Handler();
 8000218:	2300      	movs	r3, #0
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	2300      	movs	r3, #0
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2300      	movs	r3, #0
 8000222:	2201      	movs	r2, #1
 8000224:	2101      	movs	r1, #1
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f000 f96b 	bl	8000504 <RAL_pinRegister>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <main+0x70>
 8000234:	f000 fa08 	bl	8000648 <Error_Handler>
  if(RAL_pinRegister(GPIOA, 3, OUTPUT, PUSH_PULL, LOW, NO_PUPD) != RAL_OK) Error_Handler();
 8000238:	2300      	movs	r3, #0
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2300      	movs	r3, #0
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	2201      	movs	r2, #1
 8000244:	2103      	movs	r1, #3
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f000 f95b 	bl	8000504 <RAL_pinRegister>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <main+0x90>
 8000254:	f000 f9f8 	bl	8000648 <Error_Handler>

  if(RAL_pinRegister(GPIOB, 4, INPUT, PUSH_PULL, LOW, PUD) != RAL_OK) Error_Handler();
 8000258:	2302      	movs	r3, #2
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	2300      	movs	r3, #0
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2300      	movs	r3, #0
 8000262:	2200      	movs	r2, #0
 8000264:	2104      	movs	r1, #4
 8000266:	4812      	ldr	r0, [pc, #72]	; (80002b0 <main+0xe8>)
 8000268:	f000 f94c 	bl	8000504 <RAL_pinRegister>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <main+0xae>
 8000272:	f000 f9e9 	bl	8000648 <Error_Handler>

  while (1)
  {
	  if(RAL_readPin(GPIOB, 4) == PIN_HI) {
 8000276:	2104      	movs	r1, #4
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <main+0xe8>)
 800027a:	f000 f92c 	bl	80004d6 <RAL_readPin>
 800027e:	4603      	mov	r3, r0
 8000280:	2b01      	cmp	r3, #1
 8000282:	d106      	bne.n	8000292 <main+0xca>
		  RAL_writePin(GPIOA, 0, PIN_HI);
 8000284:	2201      	movs	r2, #1
 8000286:	2100      	movs	r1, #0
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 f8ca 	bl	8000424 <RAL_writePin>
 8000290:	e7f1      	b.n	8000276 <main+0xae>
	  } else if(RAL_readPin(GPIOB, 4) == PIN_LOW){
 8000292:	2104      	movs	r1, #4
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <main+0xe8>)
 8000296:	f000 f91e 	bl	80004d6 <RAL_readPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1ea      	bne.n	8000276 <main+0xae>
		  RAL_writePin(GPIOA, 0, PIN_LOW);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2100      	movs	r1, #0
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a8:	f000 f8bc 	bl	8000424 <RAL_writePin>
	  if(RAL_readPin(GPIOB, 4) == PIN_HI) {
 80002ac:	e7e3      	b.n	8000276 <main+0xae>
 80002ae:	bf00      	nop
 80002b0:	48000400 	.word	0x48000400

080002b4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	; 0x40
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fdcc 	bl	8001e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fb94 	bl	8000a18 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002f6:	f000 f9a7 	bl	8000648 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fbbe 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f993 	bl	8000648 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	; 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <setTWOBitsHandler>:
 *------------------------------------------------------------------------------
 *------------------------------------------------------------------------------
 */


void setTWOBitsHandler(volatile uint32_t* reg, uint32_t setBit, int position) {
 800032a:	b480      	push	{r7}
 800032c:	b089      	sub	sp, #36	; 0x24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]

	uint32_t resultRegConfig = *reg;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	61fb      	str	r3, [r7, #28]
	uint32_t clearMask = ~(0b11u << position);
 800033c:	2203      	movs	r2, #3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	61bb      	str	r3, [r7, #24]
	resultRegConfig &= clearMask;
 8000348:	69fa      	ldr	r2, [r7, #28]
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	4013      	ands	r3, r2
 800034e:	61fb      	str	r3, [r7, #28]
	uint32_t setBits = ((uint32_t)setBit) << position;
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	617b      	str	r3, [r7, #20]
	resultRegConfig |= setBits;
 800035a:	69fa      	ldr	r2, [r7, #28]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	4313      	orrs	r3, r2
 8000360:	61fb      	str	r3, [r7, #28]

	*reg = resultRegConfig;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	69fa      	ldr	r2, [r7, #28]
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	3724      	adds	r7, #36	; 0x24
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <RAL_portClockEnable>:

RAL_Status RAL_portClockEnable(GPIO_TypeDef* GPIO) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	int portOffset = (GPIO == GPIOA) ? 17 :
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000382:	d01a      	beq.n	80003ba <RAL_portClockEnable+0x46>
	             (GPIO == GPIOB) ? 18 :
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a22      	ldr	r2, [pc, #136]	; (8000410 <RAL_portClockEnable+0x9c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d014      	beq.n	80003b6 <RAL_portClockEnable+0x42>
	             (GPIO == GPIOC) ? 19 :
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a21      	ldr	r2, [pc, #132]	; (8000414 <RAL_portClockEnable+0xa0>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d00e      	beq.n	80003b2 <RAL_portClockEnable+0x3e>
	             (GPIO == GPIOD) ? 20 :
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <RAL_portClockEnable+0xa4>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d008      	beq.n	80003ae <RAL_portClockEnable+0x3a>
//	             (GPIO == GPIOE) ? 21 :
	             (GPIO == GPIOF) ? 22 : -1;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a1f      	ldr	r2, [pc, #124]	; (800041c <RAL_portClockEnable+0xa8>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d101      	bne.n	80003a8 <RAL_portClockEnable+0x34>
 80003a4:	2316      	movs	r3, #22
 80003a6:	e009      	b.n	80003bc <RAL_portClockEnable+0x48>
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003ac:	e006      	b.n	80003bc <RAL_portClockEnable+0x48>
	             (GPIO == GPIOD) ? 20 :
 80003ae:	2314      	movs	r3, #20
 80003b0:	e004      	b.n	80003bc <RAL_portClockEnable+0x48>
	             (GPIO == GPIOC) ? 19 :
 80003b2:	2313      	movs	r3, #19
 80003b4:	e002      	b.n	80003bc <RAL_portClockEnable+0x48>
	             (GPIO == GPIOB) ? 18 :
 80003b6:	2312      	movs	r3, #18
 80003b8:	e000      	b.n	80003bc <RAL_portClockEnable+0x48>
	int portOffset = (GPIO == GPIOA) ? 17 :
 80003ba:	2311      	movs	r3, #17
 80003bc:	60fb      	str	r3, [r7, #12]
//	             (GPIO == GPIOG) ? 23 :
//	             (GPIO == GPIOH) ? 16 : -1;

	if (portOffset != -1) {
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80003c4:	d01c      	beq.n	8000400 <RAL_portClockEnable+0x8c>
		if ((RCC->AHBENR & (1U << portOffset)) == 0) {
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <RAL_portClockEnable+0xac>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	2101      	movs	r1, #1
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d108      	bne.n	80003ea <RAL_portClockEnable+0x76>
			RCC->AHBENR |= 1U << portOffset;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <RAL_portClockEnable+0xac>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	2101      	movs	r1, #1
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	490e      	ldr	r1, [pc, #56]	; (8000420 <RAL_portClockEnable+0xac>)
 80003e6:	4313      	orrs	r3, r2
 80003e8:	614b      	str	r3, [r1, #20]
		}

		if ((RCC->AHBENR & (1U << portOffset)) != 0) {
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <RAL_portClockEnable+0xac>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	2101      	movs	r1, #1
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	4013      	ands	r3, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <RAL_portClockEnable+0x8c>
			return RAL_OK;
 80003fc:	2300      	movs	r3, #0
 80003fe:	e000      	b.n	8000402 <RAL_portClockEnable+0x8e>
		}
	}

	return RAL_ERROR;
 8000400:	2301      	movs	r3, #1
}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	48000400 	.word	0x48000400
 8000414:	48000800 	.word	0x48000800
 8000418:	48000c00 	.word	0x48000c00
 800041c:	48001400 	.word	0x48001400
 8000420:	40021000 	.word	0x40021000

08000424 <RAL_writePin>:

RAL_Status RAL_writePin(
				 GPIO_TypeDef* GPIO,
				 int pinNumber,
				 RAL_PinLevel PinOutputLevel
				 ) {
 8000424:	b480      	push	{r7}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	4613      	mov	r3, r2
 8000430:	71fb      	strb	r3, [r7, #7]
	uint32_t pinSetBit = 1U << pinNumber;
 8000432:	2201      	movs	r2, #1
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	617b      	str	r3, [r7, #20]
	uint32_t pinResetBit = 1U << (pinNumber + 16);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	3310      	adds	r3, #16
 8000440:	2201      	movs	r2, #1
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	613b      	str	r3, [r7, #16]

	if(PinOutputLevel) {
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00d      	beq.n	800046a <RAL_writePin+0x46>
		GPIO->BSRR &= ~pinResetBit;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	43db      	mvns	r3, r3
 8000456:	401a      	ands	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	619a      	str	r2, [r3, #24]
		GPIO->BSRR |= pinSetBit;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	431a      	orrs	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e00c      	b.n	8000484 <RAL_writePin+0x60>
	} else {
		GPIO->BSRR &= ~pinSetBit;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	699a      	ldr	r2, [r3, #24]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	619a      	str	r2, [r3, #24]
		GPIO->BSRR |= pinResetBit;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	431a      	orrs	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	619a      	str	r2, [r3, #24]
	}

	if(
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d10d      	bne.n	80004a6 <RAL_writePin+0x82>
		PinOutputLevel == PIN_HI &&
		(GPIO->BSRR & pinSetBit) == 1 &&
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	4013      	ands	r3, r2
		PinOutputLevel == PIN_HI &&
 8000492:	2b01      	cmp	r3, #1
 8000494:	d107      	bne.n	80004a6 <RAL_writePin+0x82>
		(GPIO->BSRR & pinResetBit) == 0
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	4013      	ands	r3, r2
		(GPIO->BSRR & pinSetBit) == 1 &&
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d101      	bne.n	80004a6 <RAL_writePin+0x82>
	  ) return RAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e011      	b.n	80004ca <RAL_writePin+0xa6>

	if(
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d00d      	beq.n	80004c8 <RAL_writePin+0xa4>
		PinOutputLevel != PIN_LOW &&
		(GPIO->BSRR & pinSetBit) == 0 &&
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	699a      	ldr	r2, [r3, #24]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	4013      	ands	r3, r2
		PinOutputLevel != PIN_LOW &&
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d107      	bne.n	80004c8 <RAL_writePin+0xa4>
		(GPIO->BSRR & pinResetBit) == 1
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	4013      	ands	r3, r2
		(GPIO->BSRR & pinSetBit) == 0 &&
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d101      	bne.n	80004c8 <RAL_writePin+0xa4>
	  ) return RAL_ERROR;
 80004c4:	2301      	movs	r3, #1
 80004c6:	e000      	b.n	80004ca <RAL_writePin+0xa6>

	return RAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	371c      	adds	r7, #28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <RAL_readPin>:


RAL_PinLevel RAL_readPin(GPIO_TypeDef* GPIO, int pinNumber) {
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	6039      	str	r1, [r7, #0]
	return (GPIO->IDR & (1U << pinNumber)) ? PIN_HI : PIN_LOW;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	691a      	ldr	r2, [r3, #16]
 80004e4:	2101      	movs	r1, #1
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	4013      	ands	r3, r2
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bf14      	ite	ne
 80004f2:	2301      	movne	r3, #1
 80004f4:	2300      	moveq	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <RAL_pinRegister>:
					int pinNumber,
					RAL_PinOutputMode mode,
					RAL_PinOutputType type,
					RAL_PinOutputSpeed speed,
					RAL_PinPullUpPullDownResistor pupd
					) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	460b      	mov	r3, r1
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	4613      	mov	r3, r2
 8000518:	71bb      	strb	r3, [r7, #6]
	//set GPIO port AHB bus clock
	RAL_portClockEnable(GPIO);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f7ff ff2a 	bl	8000374 <RAL_portClockEnable>

	if(mode == OUTPUT) {
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d120      	bne.n	8000568 <RAL_pinRegister+0x64>
		//set GPIO pin mode
		setTWOBitsHandler(&GPIO->MODER, (uint32_t)mode, pinNumber * 2);
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	79f9      	ldrb	r1, [r7, #7]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	461a      	mov	r2, r3
 8000530:	f7ff fefb 	bl	800032a <setTWOBitsHandler>
		//set type of pin
		setTWOBitsHandler(&GPIO->OTYPER, (uint32_t)type, pinNumber);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3304      	adds	r3, #4
 8000538:	79b9      	ldrb	r1, [r7, #6]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fef4 	bl	800032a <setTWOBitsHandler>
		//set the output speed
		setTWOBitsHandler(&GPIO->OSPEEDR, (uint32_t)speed, pinNumber * 2);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	f103 0008 	add.w	r0, r3, #8
 8000548:	7e39      	ldrb	r1, [r7, #24]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	461a      	mov	r2, r3
 8000550:	f7ff feeb 	bl	800032a <setTWOBitsHandler>
		//set pull-up/pull-down
		setTWOBitsHandler(&GPIO->PUPDR, (uint32_t)pupd, pinNumber * 2);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f103 000c 	add.w	r0, r3, #12
 800055a:	7f39      	ldrb	r1, [r7, #28]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	461a      	mov	r2, r3
 8000562:	f7ff fee2 	bl	800032a <setTWOBitsHandler>
 8000566:	e012      	b.n	800058e <RAL_pinRegister+0x8a>
	} else if (mode == INPUT){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <RAL_pinRegister+0x8a>
		setTWOBitsHandler(&GPIO->MODER, (uint32_t)mode, pinNumber * 2);
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	79f9      	ldrb	r1, [r7, #7]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	461a      	mov	r2, r3
 8000578:	f7ff fed7 	bl	800032a <setTWOBitsHandler>
		setTWOBitsHandler(&GPIO->PUPDR, (uint32_t)pupd, pinNumber * 2);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f103 000c 	add.w	r0, r3, #12
 8000582:	7f39      	ldrb	r1, [r7, #28]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	461a      	mov	r2, r3
 800058a:	f7ff fece 	bl	800032a <setTWOBitsHandler>
	}


	if(
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d12c      	bne.n	80005ee <RAL_pinRegister+0xea>
	   mode == OUTPUT &&
	   (GPIO->MODER >> (pinNumber * 2) & 0x3U) == (uint32_t)mode &&
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa22 f303 	lsr.w	r3, r2, r3
 80005a0:	f003 0203 	and.w	r2, r3, #3
 80005a4:	79fb      	ldrb	r3, [r7, #7]
	   mode == OUTPUT &&
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d121      	bne.n	80005ee <RAL_pinRegister+0xea>
	   (GPIO->OTYPER >> pinNumber & 0x1U) == (uint32_t)type &&
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	fa22 f303 	lsr.w	r3, r2, r3
 80005b4:	f003 0201 	and.w	r2, r3, #1
 80005b8:	79bb      	ldrb	r3, [r7, #6]
	   (GPIO->MODER >> (pinNumber * 2) & 0x3U) == (uint32_t)mode &&
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d117      	bne.n	80005ee <RAL_pinRegister+0xea>
	   (GPIO->OSPEEDR >> (pinNumber * 2) & 0x3U) == (uint32_t)speed &&
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa22 f303 	lsr.w	r3, r2, r3
 80005ca:	f003 0203 	and.w	r2, r3, #3
 80005ce:	7e3b      	ldrb	r3, [r7, #24]
	   (GPIO->OTYPER >> pinNumber & 0x1U) == (uint32_t)type &&
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d10c      	bne.n	80005ee <RAL_pinRegister+0xea>
	   (GPIO->PUPDR >> (pinNumber * 2) & 0x3U) == (uint32_t)pupd
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa22 f303 	lsr.w	r3, r2, r3
 80005e0:	f003 0203 	and.w	r2, r3, #3
 80005e4:	7f3b      	ldrb	r3, [r7, #28]
	   (GPIO->OSPEEDR >> (pinNumber * 2) & 0x3U) == (uint32_t)speed &&
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d101      	bne.n	80005ee <RAL_pinRegister+0xea>
	  ) return RAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e010      	b.n	8000610 <RAL_pinRegister+0x10c>

	if(
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10c      	bne.n	800060e <RAL_pinRegister+0x10a>
	   mode == INPUT &&
	   (GPIO->MODER >> (pinNumber * 2) & 0x3U) == (uint32_t)mode
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	79fb      	ldrb	r3, [r7, #7]
	   mode == INPUT &&
 8000606:	429a      	cmp	r2, r3
 8000608:	d101      	bne.n	800060e <RAL_pinRegister+0x10a>
      ) return RAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <RAL_pinRegister+0x10c>

	return RAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x2c>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x2c>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x2c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <Error_Handler>:

void Error_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop

  __disable_irq();
  while (1)
  {
	  if(RAL_writePin(GPIOB, 3, PIN_HI)) Error_Handler();
 8000650:	2201      	movs	r2, #1
 8000652:	2103      	movs	r1, #3
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <Error_Handler+0x20>)
 8000656:	f7ff fee5 	bl	8000424 <RAL_writePin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f7      	beq.n	8000650 <Error_Handler+0x8>
 8000660:	f7ff fff2 	bl	8000648 <Error_Handler>
 8000664:	e7f4      	b.n	8000650 <Error_Handler+0x8>
 8000666:	bf00      	nop
 8000668:	48000400 	.word	0x48000400

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x44>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_MspInit+0x44>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x44>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_MspInit+0x44>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_MspInit+0x44>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x44>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f884 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SystemInit+0x20>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <SystemInit+0x20>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff ffea 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f001 fb89 	bl	8001e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd33 	bl	80001c8 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	08001f08 	.word	0x08001f08
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	2000002c 	.word	0x2000002c

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f90d 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff ff66 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f917 	bl	80009fe <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 f8ed 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000028 	.word	0x20000028

08000834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;  
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff47 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff5c 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff8e 	bl	8000904 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffb0 	bl	800096c <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f001 b823 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 817d 	beq.w	8000d4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a54:	4bbc      	ldr	r3, [pc, #752]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d00c      	beq.n	8000a7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a60:	4bb9      	ldr	r3, [pc, #740]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 030c 	and.w	r3, r3, #12
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d15c      	bne.n	8000b26 <HAL_RCC_OscConfig+0x10e>
 8000a6c:	4bb6      	ldr	r3, [pc, #728]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a78:	d155      	bne.n	8000b26 <HAL_RCC_OscConfig+0x10e>
 8000a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a86:	fa93 f3a3 	rbit	r3, r3
 8000a8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a92:	fab3 f383 	clz	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	095b      	lsrs	r3, r3, #5
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d102      	bne.n	8000aac <HAL_RCC_OscConfig+0x94>
 8000aa6:	4ba8      	ldr	r3, [pc, #672]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	e015      	b.n	8000ad8 <HAL_RCC_OscConfig+0xc0>
 8000aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ac8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000acc:	fa93 f3a3 	rbit	r3, r3
 8000ad0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ad4:	4b9c      	ldr	r3, [pc, #624]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000adc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ae0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ae4:	fa92 f2a2 	rbit	r2, r2
 8000ae8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000aec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	f002 021f 	and.w	r2, r2, #31
 8000b00:	2101      	movs	r1, #1
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 811f 	beq.w	8000d4c <HAL_RCC_OscConfig+0x334>
 8000b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8116 	bne.w	8000d4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f000 bfaf 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b36:	d106      	bne.n	8000b46 <HAL_RCC_OscConfig+0x12e>
 8000b38:	4b83      	ldr	r3, [pc, #524]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e036      	b.n	8000bb4 <HAL_RCC_OscConfig+0x19c>
 8000b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10c      	bne.n	8000b70 <HAL_RCC_OscConfig+0x158>
 8000b56:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7b      	ldr	r2, [pc, #492]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	4b79      	ldr	r3, [pc, #484]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a78      	ldr	r2, [pc, #480]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e021      	b.n	8000bb4 <HAL_RCC_OscConfig+0x19c>
 8000b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x184>
 8000b82:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a70      	ldr	r2, [pc, #448]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b6e      	ldr	r3, [pc, #440]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a6d      	ldr	r2, [pc, #436]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_RCC_OscConfig+0x19c>
 8000b9c:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a69      	ldr	r2, [pc, #420]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b67      	ldr	r3, [pc, #412]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a66      	ldr	r2, [pc, #408]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb4:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb8:	f023 020f 	bic.w	r2, r3, #15
 8000bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	495f      	ldr	r1, [pc, #380]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d059      	beq.n	8000c92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bde:	f7ff fe29 	bl	8000834 <HAL_GetTick>
 8000be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	e00a      	b.n	8000bfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fe24 	bl	8000834 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b64      	cmp	r3, #100	; 0x64
 8000bf6:	d902      	bls.n	8000bfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f000 bf43 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 8000bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000c12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_OscConfig+0x218>
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	e015      	b.n	8000c5c <HAL_RCC_OscConfig+0x244>
 8000c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000c64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c68:	fa92 f2a2 	rbit	r2, r2
 8000c6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000c70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	f042 0220 	orr.w	r2, r2, #32
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	f002 021f 	and.w	r2, r2, #31
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0ab      	beq.n	8000be8 <HAL_RCC_OscConfig+0x1d0>
 8000c90:	e05d      	b.n	8000d4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c92:	f7ff fdcf 	bl	8000834 <HAL_GetTick>
 8000c96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e00a      	b.n	8000cb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fdca 	bl	8000834 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b64      	cmp	r3, #100	; 0x64
 8000caa:	d902      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	f000 bee9 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000cc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d102      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x2cc>
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	e015      	b.n	8000d10 <HAL_RCC_OscConfig+0x2f8>
 8000ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000d18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d1c:	fa92 f2a2 	rbit	r2, r2
 8000d20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000d24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	f042 0220 	orr.w	r2, r2, #32
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	f002 021f 	and.w	r2, r2, #31
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1ab      	bne.n	8000c9c <HAL_RCC_OscConfig+0x284>
 8000d44:	e003      	b.n	8000d4e <HAL_RCC_OscConfig+0x336>
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 817d 	beq.w	800105e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d64:	4ba6      	ldr	r3, [pc, #664]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00b      	beq.n	8000d88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d70:	4ba3      	ldr	r3, [pc, #652]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d172      	bne.n	8000e62 <HAL_RCC_OscConfig+0x44a>
 8000d7c:	4ba0      	ldr	r3, [pc, #640]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d16c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x44a>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000d9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	095b      	lsrs	r3, r3, #5
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d102      	bne.n	8000db8 <HAL_RCC_OscConfig+0x3a0>
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	e013      	b.n	8000de0 <HAL_RCC_OscConfig+0x3c8>
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000dd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ddc:	4b88      	ldr	r3, [pc, #544]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	2202      	movs	r2, #2
 8000de2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000de6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000dea:	fa92 f2a2 	rbit	r2, r2
 8000dee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000df2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000df6:	fab2 f282 	clz	r2, r2
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	f002 021f 	and.w	r2, r2, #31
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00a      	beq.n	8000e28 <HAL_RCC_OscConfig+0x410>
 8000e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f000 be2e 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	21f8      	movs	r1, #248	; 0xf8
 8000e3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e46:	fa91 f1a1 	rbit	r1, r1
 8000e4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000e4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000e52:	fab1 f181 	clz	r1, r1
 8000e56:	b2c9      	uxtb	r1, r1
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	4969      	ldr	r1, [pc, #420]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e60:	e0fd      	b.n	800105e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8088 	beq.w	8000f84 <HAL_RCC_OscConfig+0x56c>
 8000e74:	2301      	movs	r3, #1
 8000e76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000e86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fcc8 	bl	8000834 <HAL_GetTick>
 8000ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fcc3 	bl	8000834 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d902      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f000 bde2 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000ed2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	095b      	lsrs	r3, r3, #5
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x4d8>
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	e013      	b.n	8000f18 <HAL_RCC_OscConfig+0x500>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f22:	fa92 f2a2 	rbit	r2, r2
 8000f26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000f2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f2e:	fab2 f282 	clz	r2, r2
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0af      	beq.n	8000eaa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	21f8      	movs	r1, #248	; 0xf8
 8000f60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f68:	fa91 f1a1 	rbit	r1, r1
 8000f6c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000f70:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000f74:	fab1 f181 	clz	r1, r1
 8000f78:	b2c9      	uxtb	r1, r1
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	4920      	ldr	r1, [pc, #128]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
 8000f82:	e06c      	b.n	800105e <HAL_RCC_OscConfig+0x646>
 8000f84:	2301      	movs	r3, #1
 8000f86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	461a      	mov	r2, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fc40 	bl	8000834 <HAL_GetTick>
 8000fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fc3b 	bl	8000834 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d902      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 bd5a 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d104      	bne.n	8001004 <HAL_RCC_OscConfig+0x5ec>
 8000ffa:	4b01      	ldr	r3, [pc, #4]	; (8001000 <HAL_RCC_OscConfig+0x5e8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	e015      	b.n	800102c <HAL_RCC_OscConfig+0x614>
 8001000:	40021000 	.word	0x40021000
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800101c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001028:	4bc8      	ldr	r3, [pc, #800]	; (800134c <HAL_RCC_OscConfig+0x934>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	2202      	movs	r2, #2
 800102e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001032:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001036:	fa92 f2a2 	rbit	r2, r2
 800103a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800103e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001042:	fab2 f282 	clz	r2, r2
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	f042 0220 	orr.w	r2, r2, #32
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	f002 021f 	and.w	r2, r2, #31
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ad      	bne.n	8000fba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8110 	beq.w	8001294 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d079      	beq.n	8001178 <HAL_RCC_OscConfig+0x760>
 8001084:	2301      	movs	r3, #1
 8001086:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4bab      	ldr	r3, [pc, #684]	; (8001350 <HAL_RCC_OscConfig+0x938>)
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	461a      	mov	r2, r3
 80010aa:	2301      	movs	r3, #1
 80010ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fbc1 	bl	8000834 <HAL_GetTick>
 80010b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbbc 	bl	8000834 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d902      	bls.n	80010ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	f000 bcdb 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010e8:	2202      	movs	r2, #2
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	fa93 f2a3 	rbit	r2, r3
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800110c:	2202      	movs	r2, #2
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	fa93 f2a3 	rbit	r2, r3
 800111e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001122:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001126:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x934>)
 800112a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001130:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001134:	2102      	movs	r1, #2
 8001136:	6019      	str	r1, [r3, #0]
 8001138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	fa93 f1a3 	rbit	r1, r3
 8001146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800114e:	6019      	str	r1, [r3, #0]
  return result;
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0a0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x6a0>
 8001176:	e08d      	b.n	8001294 <HAL_RCC_OscConfig+0x87c>
 8001178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001188:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	fa93 f2a3 	rbit	r2, r3
 8001192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001196:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800119a:	601a      	str	r2, [r3, #0]
  return result;
 800119c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x938>)
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	461a      	mov	r2, r3
 80011b6:	2300      	movs	r3, #0
 80011b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fb3b 	bl	8000834 <HAL_GetTick>
 80011be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fb36 	bl	8000834 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d902      	bls.n	80011da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f000 bc55 	b.w	8001a84 <HAL_RCC_OscConfig+0x106c>
 80011da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011e2:	2202      	movs	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	fa93 f2a3 	rbit	r2, r3
 80011f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001206:	2202      	movs	r2, #2
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	fa93 f2a3 	rbit	r2, r3
 8001218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800121c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800122a:	2202      	movs	r2, #2
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001240:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001244:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x934>)
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001252:	2102      	movs	r1, #2
 8001254:	6019      	str	r1, [r3, #0]
 8001256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fa93 f1a3 	rbit	r1, r3
 8001264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001268:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800126c:	6019      	str	r1, [r3, #0]
  return result;
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d197      	bne.n	80011c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 81a1 	beq.w	80015ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_RCC_OscConfig+0x934>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d116      	bne.n	80012ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_RCC_OscConfig+0x934>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_RCC_OscConfig+0x934>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	61d3      	str	r3, [r2, #28]
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_RCC_OscConfig+0x934>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80012e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_RCC_OscConfig+0x93c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d11a      	bne.n	800132c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_RCC_OscConfig+0x93c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <HAL_RCC_OscConfig+0x93c>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fa97 	bl	8000834 <HAL_GetTick>
 8001306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e009      	b.n	8001320 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fa92 	bl	8000834 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e3b1      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_RCC_OscConfig+0x93c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ef      	beq.n	800130c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10d      	bne.n	8001358 <HAL_RCC_OscConfig+0x940>
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_RCC_OscConfig+0x934>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a02      	ldr	r2, [pc, #8]	; (800134c <HAL_RCC_OscConfig+0x934>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	e03c      	b.n	80013c4 <HAL_RCC_OscConfig+0x9ac>
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	10908120 	.word	0x10908120
 8001354:	40007000 	.word	0x40007000
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x96a>
 8001368:	4bc1      	ldr	r3, [pc, #772]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4ac0      	ldr	r2, [pc, #768]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	4bbe      	ldr	r3, [pc, #760]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4abd      	ldr	r2, [pc, #756]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e020      	b.n	80013c4 <HAL_RCC_OscConfig+0x9ac>
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x994>
 8001392:	4bb7      	ldr	r3, [pc, #732]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4ab6      	ldr	r2, [pc, #728]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4bb4      	ldr	r3, [pc, #720]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4ab3      	ldr	r2, [pc, #716]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x9ac>
 80013ac:	4bb0      	ldr	r3, [pc, #704]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4aaf      	ldr	r2, [pc, #700]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	4bad      	ldr	r3, [pc, #692]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4aac      	ldr	r2, [pc, #688]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8081 	beq.w	80014d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fa2d 	bl	8000834 <HAL_GetTick>
 80013da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fa28 	bl	8000834 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e345      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001400:	2202      	movs	r2, #2
 8001402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	fa93 f2a3 	rbit	r2, r3
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800143e:	601a      	str	r2, [r3, #0]
  return result;
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001448:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d102      	bne.n	8001464 <HAL_RCC_OscConfig+0xa4c>
 800145e:	4b84      	ldr	r3, [pc, #528]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	e013      	b.n	800148c <HAL_RCC_OscConfig+0xa74>
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800146c:	2202      	movs	r2, #2
 800146e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4b79      	ldr	r3, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001490:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001494:	2102      	movs	r1, #2
 8001496:	6011      	str	r1, [r2, #0]
 8001498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800149c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	fa92 f1a2 	rbit	r1, r2
 80014a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80014ae:	6011      	str	r1, [r2, #0]
  return result;
 80014b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	fab2 f282 	clz	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d084      	beq.n	80013e0 <HAL_RCC_OscConfig+0x9c8>
 80014d6:	e07f      	b.n	80015d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f9ac 	bl	8000834 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff f9a7 	bl	8000834 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2c4      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001540:	601a      	str	r2, [r3, #0]
  return result;
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800154a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	fab3 f383 	clz	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0xb4e>
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	e013      	b.n	800158e <HAL_RCC_OscConfig+0xb76>
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001592:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001596:	2102      	movs	r1, #2
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800159e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	fa92 f1a2 	rbit	r1, r2
 80015a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80015b0:	6011      	str	r1, [r2, #0]
  return result;
 80015b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	fab2 f282 	clz	r2, r2
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f002 021f 	and.w	r2, r2, #31
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d184      	bne.n	80014e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 80015e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8242 	beq.w	8001a82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0xc58>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	f000 8213 	beq.w	8001a32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 8162 	bne.w	80018e2 <HAL_RCC_OscConfig+0xeca>
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fa93 f2a3 	rbit	r2, r3
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001642:	601a      	str	r2, [r3, #0]
  return result;
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800164c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	461a      	mov	r2, r3
 8001660:	2300      	movs	r3, #0
 8001662:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff f8e6 	bl	8000834 <HAL_GetTick>
 8001668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	e00c      	b.n	8001688 <HAL_RCC_OscConfig+0xc70>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f8de 	bl	8000834 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1fd      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fa93 f2a3 	rbit	r2, r3
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80016ac:	601a      	str	r2, [r3, #0]
  return result;
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80016b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0xcba>
 80016cc:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	e027      	b.n	8001722 <HAL_RCC_OscConfig+0xd0a>
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4b9c      	ldr	r3, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001726:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800172a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800172e:	6011      	str	r1, [r2, #0]
 8001730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001734:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	fa92 f1a2 	rbit	r1, r2
 800173e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001742:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001746:	6011      	str	r1, [r2, #0]
  return result;
 8001748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800174c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	fab2 f282 	clz	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f042 0220 	orr.w	r2, r2, #32
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f002 021f 	and.w	r2, r2, #31
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d182      	bne.n	8001674 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	430b      	orrs	r3, r1
 8001790:	497f      	ldr	r1, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800179e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80017ba:	601a      	str	r2, [r3, #0]
  return result;
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80017c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	461a      	mov	r2, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff f82a 	bl	8000834 <HAL_GetTick>
 80017e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff f825 	bl	8000834 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e144      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800181e:	601a      	str	r2, [r3, #0]
  return result;
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001828:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_RCC_OscConfig+0xe2c>
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	e027      	b.n	8001894 <HAL_RCC_OscConfig+0xe7c>
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800184c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001898:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800189c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018a0:	6011      	str	r1, [r2, #0]
 80018a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fa92 f1a2 	rbit	r1, r2
 80018b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80018b8:	6011      	str	r1, [r2, #0]
  return result;
 80018ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d082      	beq.n	80017e6 <HAL_RCC_OscConfig+0xdce>
 80018e0:	e0cf      	b.n	8001a82 <HAL_RCC_OscConfig+0x106a>
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fa93 f2a3 	rbit	r2, r3
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001906:	601a      	str	r2, [r3, #0]
  return result;
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001910:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	461a      	mov	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe ff84 	bl	8000834 <HAL_GetTick>
 800192c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7fe ff7f 	bl	8000834 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e09e      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800194e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001974:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d104      	bne.n	8001994 <HAL_RCC_OscConfig+0xf7c>
 800198a:	4b01      	ldr	r3, [pc, #4]	; (8001990 <HAL_RCC_OscConfig+0xf78>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e029      	b.n	80019e4 <HAL_RCC_OscConfig+0xfcc>
 8001990:	40021000 	.word	0x40021000
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800199c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80019c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x1078>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80019ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f0:	6011      	str	r1, [r2, #0]
 80019f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	fa92 f1a2 	rbit	r1, r2
 8001a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a08:	6011      	str	r1, [r2, #0]
  return result;
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	fab2 f282 	clz	r2, r2
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f002 021f 	and.w	r2, r2, #31
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d180      	bne.n	8001932 <HAL_RCC_OscConfig+0xf1a>
 8001a30:	e027      	b.n	8001a82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e01e      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x1078>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b09e      	sub	sp, #120	; 0x78
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e162      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b8d      	ldr	r3, [pc, #564]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	498b      	ldr	r1, [pc, #556]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e14a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	497f      	ldr	r1, [pc, #508]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80dc 	beq.w	8001cc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d13c      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xf6>
 8001b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xa6>
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e00f      	b.n	8001b5a <HAL_RCC_ClockConfig+0xc6>
 8001b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
 8001b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b56:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f002 021f 	and.w	r2, r2, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d17b      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0f3      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d13c      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x178>
 8001b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x128>
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_ClockConfig+0x148>
 8001bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd8:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d13a      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b2      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e00d      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1bc>
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	2202      	movs	r2, #2
 8001c52:	61ba      	str	r2, [r7, #24]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	fa92 f2a2 	rbit	r2, r2
 8001c5a:	617a      	str	r2, [r7, #20]
  return result;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e079      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7fe fdd0 	bl	8000834 <HAL_GetTick>
 8001c94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7fe fdcc 	bl	8000834 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e061      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d214      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	491a      	ldr	r1, [pc, #104]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4912      	ldr	r1, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d36:	f000 f829 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	22f0      	movs	r2, #240	; 0xf0
 8001d46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	40d3      	lsrs	r3, r2
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x2ec>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_ClockConfig+0x2f0>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_RCC_ClockConfig+0x2f4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fd1e 	bl	80007ac <HAL_InitTick>
  
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3778      	adds	r7, #120	; 0x78
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08001ed0 	.word	0x08001ed0
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e03c      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	e03c      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	fa92 f2a2 	rbit	r2, r2
 8001dd4:	607a      	str	r2, [r7, #4]
  return result;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	40d3      	lsrs	r3, r2
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	220f      	movs	r2, #15
 8001df0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	fa92 f2a2 	rbit	r2, r2
 8001df8:	60fa      	str	r2, [r7, #12]
  return result;
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	40d3      	lsrs	r3, r2
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e004      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	623b      	str	r3, [r7, #32]
      break;
 8001e34:	e002      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e38:	623b      	str	r3, [r7, #32]
      break;
 8001e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	372c      	adds	r7, #44	; 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	08001ee0 	.word	0x08001ee0
 8001e58:	08001ef0 	.word	0x08001ef0
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <memset>:
 8001e60:	4402      	add	r2, r0
 8001e62:	4603      	mov	r3, r0
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d100      	bne.n	8001e6a <memset+0xa>
 8001e68:	4770      	bx	lr
 8001e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e6e:	e7f9      	b.n	8001e64 <memset+0x4>

08001e70 <__libc_init_array>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	4d0d      	ldr	r5, [pc, #52]	; (8001ea8 <__libc_init_array+0x38>)
 8001e74:	4c0d      	ldr	r4, [pc, #52]	; (8001eac <__libc_init_array+0x3c>)
 8001e76:	1b64      	subs	r4, r4, r5
 8001e78:	10a4      	asrs	r4, r4, #2
 8001e7a:	2600      	movs	r6, #0
 8001e7c:	42a6      	cmp	r6, r4
 8001e7e:	d109      	bne.n	8001e94 <__libc_init_array+0x24>
 8001e80:	4d0b      	ldr	r5, [pc, #44]	; (8001eb0 <__libc_init_array+0x40>)
 8001e82:	4c0c      	ldr	r4, [pc, #48]	; (8001eb4 <__libc_init_array+0x44>)
 8001e84:	f000 f818 	bl	8001eb8 <_init>
 8001e88:	1b64      	subs	r4, r4, r5
 8001e8a:	10a4      	asrs	r4, r4, #2
 8001e8c:	2600      	movs	r6, #0
 8001e8e:	42a6      	cmp	r6, r4
 8001e90:	d105      	bne.n	8001e9e <__libc_init_array+0x2e>
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e98:	4798      	blx	r3
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	e7ee      	b.n	8001e7c <__libc_init_array+0xc>
 8001e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea2:	4798      	blx	r3
 8001ea4:	3601      	adds	r6, #1
 8001ea6:	e7f2      	b.n	8001e8e <__libc_init_array+0x1e>
 8001ea8:	08001f00 	.word	0x08001f00
 8001eac:	08001f00 	.word	0x08001f00
 8001eb0:	08001f00 	.word	0x08001f00
 8001eb4:	08001f04 	.word	0x08001f04

08001eb8 <_init>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr

08001ec4 <_fini>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr
