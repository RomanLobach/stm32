
F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ddc  08006ddc  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08006e50  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08006ef0  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000049c  200001ac  08006f90  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000648  08006f90  00020648  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017edb  00000000  00000000  0002021f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ab9  00000000  00000000  000380fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001488  00000000  00000000  0003abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001032  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027be3  00000000  00000000  0003d072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018dfa  00000000  00000000  00064c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9c0f  00000000  00000000  0007da4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005de8  00000000  00000000  00177660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0017d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ac 	.word	0x200001ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c6c 	.word	0x08006c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b0 	.word	0x200001b0
 800020c:	08006c6c 	.word	0x08006c6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f808 	bl	80015d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f855 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa15 	bl	80009f8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ce:	f000 f8b9 	bl	8000744 <MX_ETH_Init>
  MX_I2C1_Init();
 80005d2:	f000 f905 	bl	80007e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d6:	f000 f943 	bl	8000860 <MX_SPI1_Init>
  MX_TIM14_Init();
 80005da:	f000 f97f 	bl	80008dc <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f9a3 	bl	8000928 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 f9d1 	bl	8000988 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005e6:	f000 f9ff 	bl	80009e8 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  //init listening to UART
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	491d      	ldr	r1, [pc, #116]	; (8000664 <main+0xa8>)
 80005ee:	481e      	ldr	r0, [pc, #120]	; (8000668 <main+0xac>)
 80005f0:	f004 fbfd 	bl	8004dee <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setModeLed();
 80005f4:	f000 faee 	bl	8000bd4 <setModeLed>
  while (1)
  {
	  int delayTime = (6 - USER_MODE) * 100;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0xb0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f1c3 0306 	rsb	r3, r3, #6
 8000600:	2264      	movs	r2, #100	; 0x64
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4818      	ldr	r0, [pc, #96]	; (8000670 <main+0xb4>)
 800060e:	f001 feff 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <main+0xb4>)
 800061a:	f001 fef9 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f835 	bl	8001690 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_R_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0xb4>)
 800062e:	f001 feef 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0xb4>)
 8000638:	f001 feea 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f826 	bl	8001690 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_B_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <main+0xb4>)
 800064a:	f001 fee1 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <main+0xb4>)
 8000654:	f001 fedc 	bl	8002410 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f818 	bl	8001690 <HAL_Delay>
  {
 8000660:	e7ca      	b.n	80005f8 <main+0x3c>
 8000662:	bf00      	nop
 8000664:	200004c4 	.word	0x200004c4
 8000668:	200003b4 	.word	0x200003b4
 800066c:	20000000 	.word	0x20000000
 8000670:	40020400 	.word	0x40020400

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fe6e 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f002 fd7a 	bl	8003190 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e8:	2348      	movs	r3, #72	; 0x48
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fd59 	bl	80031b0 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 fc0e 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 ffe7 	bl	80036f8 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 fbf8 	bl	8000f24 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ETH_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_ETH_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ETH_Init+0x8c>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ETH_Init+0x84>)
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ETH_Init+0x84>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x84>)
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_ETH_Init+0x90>)
 8000784:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_ETH_Init+0x84>)
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x94>)
 800078a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x84>)
 800078e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000792:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x84>)
 8000796:	f001 f951 	bl	8001a3c <HAL_ETH_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 fbc0 	bl	8000f24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a4:	2238      	movs	r2, #56	; 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x98>)
 80007aa:	f005 fddb 	bl	8006364 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_ETH_Init+0x98>)
 80007b0:	2221      	movs	r2, #33	; 0x21
 80007b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_ETH_Init+0x98>)
 80007b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_ETH_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000200 	.word	0x20000200
 80007cc:	40028000 	.word	0x40028000
 80007d0:	200004f0 	.word	0x200004f0
 80007d4:	2000010c 	.word	0x2000010c
 80007d8:	2000006c 	.word	0x2000006c
 80007dc:	200001c8 	.word	0x200001c8

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_I2C1_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_I2C1_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_I2C1_Init+0x74>)
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <MX_I2C1_Init+0x7c>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_I2C1_Init+0x74>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081a:	480e      	ldr	r0, [pc, #56]	; (8000854 <MX_I2C1_Init+0x74>)
 800081c:	f001 fe12 	bl	8002444 <HAL_I2C_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000826:	f000 fb7d 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <MX_I2C1_Init+0x74>)
 800082e:	f002 fc18 	bl	8003062 <HAL_I2CEx_ConfigAnalogFilter>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 fb74 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_I2C1_Init+0x74>)
 8000840:	f002 fc5a 	bl	80030f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084a:	f000 fb6b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002b0 	.word	0x200002b0
 8000858:	40005400 	.word	0x40005400
 800085c:	00808cd2 	.word	0x00808cd2

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0x74>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x74>)
 800087a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x74>)
 800088e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000896:	2218      	movs	r2, #24
 8000898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008c0:	f003 fd30 	bl	8004324 <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fb2b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000304 	.word	0x20000304
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_TIM14_Init+0x44>)
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <MX_TIM14_Init+0x48>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_TIM14_Init+0x44>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_TIM14_Init+0x44>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_TIM14_Init+0x44>)
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_TIM14_Init+0x44>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_TIM14_Init+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM14_Init+0x44>)
 8000908:	f003 fecb 	bl	80046a2 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000912:	f000 fb07 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <MX_TIM14_Init+0x44>)
 8000918:	f003 ff1a 	bl	8004750 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000368 	.word	0x20000368
 8000924:	40002000 	.word	0x40002000

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f004 f96e 	bl	8004c4c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 fad5 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003b4 	.word	0x200003b4
 8000984:	40004400 	.word	0x40004400

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART3_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009cc:	f004 f93e 	bl	8004c4c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 faa5 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000043c 	.word	0x2000043c
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0e:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a64      	ldr	r2, [pc, #400]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a5e      	ldr	r2, [pc, #376]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a58      	ldr	r2, [pc, #352]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a52      	ldr	r2, [pc, #328]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b50      	ldr	r3, [pc, #320]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a4c      	ldr	r2, [pc, #304]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a86:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a46      	ldr	r2, [pc, #280]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a40      	ldr	r2, [pc, #256]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <MX_GPIO_Init+0x1ac>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	217c      	movs	r1, #124	; 0x7c
 8000aba:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x1b0>)
 8000abc:	f001 fca8 	bl	8002410 <HAL_GPIO_WritePin>
                          |LED_R_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_G_Pin|LD3_R_Pin|LD2_B_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ac6:	4839      	ldr	r0, [pc, #228]	; (8000bac <MX_GPIO_Init+0x1b4>)
 8000ac8:	f001 fca2 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4837      	ldr	r0, [pc, #220]	; (8000bb0 <MX_GPIO_Init+0x1b8>)
 8000ad2:	f001 fc9d 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_5_Pin LED_R_2_Pin LED_R_3_Pin
                           LED_R_4_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_5_Pin|LED_R_2_Pin|LED_R_3_Pin
 8000ad6:	237c      	movs	r3, #124	; 0x7c
 8000ad8:	61fb      	str	r3, [r7, #28]
                          |LED_R_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x1b0>)
 8000aee:	f001 facb 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x1bc>)
 8000b0a:	f001 fabd 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_G_Pin LD3_R_Pin LD2_B_Pin */
  GPIO_InitStruct.Pin = LD1_G_Pin|LD3_R_Pin|LD2_B_Pin;
 8000b0e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_GPIO_Init+0x1b4>)
 8000b28:	f001 faae 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_R_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_R_Pin|BTN_SET_Pin;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <MX_GPIO_Init+0x1b8>)
 8000b40:	f001 faa2 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <MX_GPIO_Init+0x1b8>)
 8000b5c:	f001 fa94 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <MX_GPIO_Init+0x1b8>)
 8000b74:	f001 fa88 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_GPIO_Init+0x1c0>)
 8000b96:	f001 fa77 	bl	8002088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <resetModeLed>:

/* USER CODE BEGIN 4 */
void resetModeLed(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	217c      	movs	r1, #124	; 0x7c
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <resetModeLed+0x14>)
 8000bc6:	f001 fc23 	bl	8002410 <HAL_GPIO_WritePin>
					GPIOE,
					LED_R_1_Pin|LED_R_2_Pin|LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <setModeLed>:

void setModeLed(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	if(USER_MODE == 1)
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <setModeLed+0x78>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d106      	bne.n	8000bee <setModeLed+0x1a>
	{
	  resetModeLed();
 8000be0:	f7ff ffec 	bl	8000bbc <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_1_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2104      	movs	r1, #4
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <setModeLed+0x7c>)
 8000bea:	f001 fc11 	bl	8002410 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 2)
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <setModeLed+0x78>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d106      	bne.n	8000c04 <setModeLed+0x30>
	{
	  resetModeLed();
 8000bf6:	f7ff ffe1 	bl	8000bbc <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_2_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <setModeLed+0x7c>)
 8000c00:	f001 fc06 	bl	8002410 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 3)
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <setModeLed+0x78>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d106      	bne.n	8000c1a <setModeLed+0x46>
	{
	  resetModeLed();
 8000c0c:	f7ff ffd6 	bl	8000bbc <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_3_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2120      	movs	r1, #32
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <setModeLed+0x7c>)
 8000c16:	f001 fbfb 	bl	8002410 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 4)
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <setModeLed+0x78>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d106      	bne.n	8000c30 <setModeLed+0x5c>
	{
	  resetModeLed();
 8000c22:	f7ff ffcb 	bl	8000bbc <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_4_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <setModeLed+0x7c>)
 8000c2c:	f001 fbf0 	bl	8002410 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 5)
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <setModeLed+0x78>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d106      	bne.n	8000c46 <setModeLed+0x72>
	{
	  resetModeLed();
 8000c38:	f7ff ffc0 	bl	8000bbc <resetModeLed>
	  HAL_GPIO_WritePin(GPIOE, LED_R_5_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <setModeLed+0x7c>)
 8000c42:	f001 fbe5 	bl	8002410 <HAL_GPIO_WritePin>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	40021000 	.word	0x40021000

08000c54 <UART_Transmit>:

void UART_Transmit(void* data)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	char tx_buffer[20];
	sprintf(tx_buffer, "%d", data);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	490b      	ldr	r1, [pc, #44]	; (8000c90 <UART_Transmit+0x3c>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fad1 	bl	800620c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 0xFFFF);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff face 	bl	8000210 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 010c 	add.w	r1, r7, #12
 8000c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <UART_Transmit+0x40>)
 8000c82:	f004 f831 	bl	8004ce8 <HAL_UART_Transmit>

}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08006c84 	.word	0x08006c84
 8000c94:	200003b4 	.word	0x200003b4

08000c98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	if(htim == &htim14)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a7c      	ldr	r2, [pc, #496]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	f040 80f0 	bne.w	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_R_Pin);
 8000caa:	2102      	movs	r1, #2
 8000cac:	487a      	ldr	r0, [pc, #488]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cae:	f001 fb97 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b79      	ldr	r3, [pc, #484]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cb8:	801a      	strh	r2, [r3, #0]
		BTN_SET_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_SET_Pin);
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4876      	ldr	r0, [pc, #472]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cbe:	f001 fb8f 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b76      	ldr	r3, [pc, #472]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cc8:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOG, BTN_B_Pin);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4872      	ldr	r0, [pc, #456]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cce:	f001 fb87 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000cd8:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	4b72      	ldr	r3, [pc, #456]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d027      	beq.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x9e>
		{

			++BTN_RED_press_slowCount;
 8000ce6:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000cf0:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dd1a      	ble.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x9e>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_press_slowCount = 0;
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 8000d06:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d010      	beq.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x9e>
				{
					USER_MODE = USER_MODE + 1;
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a67      	ldr	r2, [pc, #412]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d1c:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 6)
 8000d1e:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d102      	bne.n	8000d2c <HAL_TIM_PeriodElapsedCallback+0x94>
					{

						USER_MODE = 1;
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

					}


					setModeLed();
 8000d2c:	f7ff ff52 	bl	8000bd4 <setModeLed>
					BTN_RED_isPressed = true;
 8000d30:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d38:	881a      	ldrh	r2, [r3, #0]
 8000d3a:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d027      	beq.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0xfa>
		{

			++BTN_BLUE_press_slowCount;
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d4c:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000d4e:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dd1a      	ble.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0xfa>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_press_slowCount = 0;
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d010      	beq.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0xfa>
				{
					USER_MODE = USER_MODE - 1;
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d78:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 0)
 8000d7a:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0xf0>
					{

						USER_MODE = 5;
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d84:	2205      	movs	r2, #5
 8000d86:	601a      	str	r2, [r3, #0]

					}

					setModeLed();
 8000d88:	f7ff ff24 	bl	8000bd4 <setModeLed>
					BTN_BLUE_isPressed = true;
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on SET btn
		if(BTN_SET_currentState != BTN_SET_initState)
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d94:	881a      	ldrh	r2, [r3, #0]
 8000d96:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d01e      	beq.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x144>
		{

			++BTN_SET_press_slowCount;
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000da8:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000daa:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dd11      	ble.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x144>
			{
				//if you are here than RED BTN is pressed
				BTN_SET_press_slowCount = 0;
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_SET_isPressed == false)
 8000dbe:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x144>
				{

					UART_Transmit(USER_MODE);
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <UART_Transmit>

					BTN_SET_isPressed = true;
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d116      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x17e>
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d012      	beq.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x17e>
		{

			++BTN_RED_release_slowCount;
 8000df0:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000dfa:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dd05      	ble.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x17e>
			{

				BTN_RED_isPressed = false;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
				BTN_RED_release_slowCount = 0;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d116      	bne.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d012      	beq.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		{

			++BTN_BLUE_release_slowCount;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e34:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dd05      	ble.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			{

				BTN_BLUE_isPressed = false;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_release_slowCount = 0;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off SET btn
		if(BTN_SET_currentState == BTN_SET_initState && BTN_SET_isPressed == true)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e52:	881a      	ldrh	r2, [r3, #0]
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d116      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d012      	beq.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1f2>
		{

			++BTN_SET_release_slowCount;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e6e:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dd05      	ble.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			{

				BTN_SET_isPressed = false;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
				BTN_SET_release_slowCount = 0;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000368 	.word	0x20000368
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	200004d8 	.word	0x200004d8
 8000ea0:	200004e8 	.word	0x200004e8
 8000ea4:	200004e0 	.word	0x200004e0
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	200004da 	.word	0x200004da
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	200004de 	.word	0x200004de
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	2000000a 	.word	0x2000000a
 8000ec0:	200004e2 	.word	0x200004e2
 8000ec4:	200004e6 	.word	0x200004e6
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	200004ea 	.word	0x200004ea
 8000ed0:	200004ee 	.word	0x200004ee
 8000ed4:	200004dc 	.word	0x200004dc
 8000ed8:	200004e4 	.word	0x200004e4
 8000edc:	200004ec 	.word	0x200004ec

08000ee0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_UART_RxCpltCallback+0x34>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10c      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x2c>
  {
	//userCode
    USER_MODE = atoi(rx_buffer);
 8000ef2:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_UART_RxCpltCallback+0x38>)
 8000ef4:	f005 f986 	bl	8006204 <atoi>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_UART_RxCpltCallback+0x3c>)
 8000efc:	6013      	str	r3, [r2, #0]
    setModeLed();
 8000efe:	f7ff fe69 	bl	8000bd4 <setModeLed>

    //init listening to UART
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	4904      	ldr	r1, [pc, #16]	; (8000f18 <HAL_UART_RxCpltCallback+0x38>)
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <HAL_UART_RxCpltCallback+0x40>)
 8000f08:	f003 ff71 	bl	8004dee <HAL_UART_Receive_IT>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40004400 	.word	0x40004400
 8000f18:	200004c4 	.word	0x200004c4
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200003b4 	.word	0x200003b4

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_ETH_MspInit+0x158>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f040 8096 	bne.w	80010c8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001044:	2332      	movs	r3, #50	; 0x32
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <HAL_ETH_MspInit+0x160>)
 8001060:	f001 f812 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001064:	2386      	movs	r3, #134	; 0x86
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_ETH_MspInit+0x164>)
 8001080:	f001 f802 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_ETH_MspInit+0x168>)
 80010a2:	f000 fff1 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <HAL_ETH_MspInit+0x16c>)
 80010c4:	f000 ffe0 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40028000 	.word	0x40028000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40021800 	.word	0x40021800

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0aa      	sub	sp, #168	; 0xa8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2284      	movs	r2, #132	; 0x84
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f005 f92b 	bl	8006364 <memset>
  if(hi2c->Instance==I2C1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <HAL_I2C_MspInit+0xd4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d14c      	bne.n	80011b2 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800111c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800111e:	2300      	movs	r3, #0
 8001120:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fd0c 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001132:	f7ff fef7 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001168:	2304      	movs	r3, #4
 800116a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001172:	4619      	mov	r1, r3
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <HAL_I2C_MspInit+0xdc>)
 8001176:	f000 ff87 	bl	8002088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 8001180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_I2C_MspInit+0xd8>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 14, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	210e      	movs	r1, #14
 8001196:	201f      	movs	r0, #31
 8001198:	f000 fb79 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800119c:	201f      	movs	r0, #31
 800119e:	f000 fb92 	bl	80018c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 13, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	210d      	movs	r1, #13
 80011a6:	2020      	movs	r0, #32
 80011a8:	f000 fb71 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011ac:	2020      	movs	r0, #32
 80011ae:	f000 fb8a 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	37a8      	adds	r7, #168	; 0xa8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_SPI_MspInit+0xc4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d14b      	bne.n	8001282 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a28      	ldr	r2, [pc, #160]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_SPI_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001232:	2310      	movs	r3, #16
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001242:	2305      	movs	r3, #5
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <HAL_SPI_MspInit+0xcc>)
 800124e:	f000 ff1b 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001252:	2338      	movs	r3, #56	; 0x38
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001262:	2305      	movs	r3, #5
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <HAL_SPI_MspInit+0xd0>)
 800126e:	f000 ff0b 	bl	8002088 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 14, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	210e      	movs	r1, #14
 8001276:	2023      	movs	r0, #35	; 0x23
 8001278:	f000 fb09 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800127c:	2023      	movs	r0, #35	; 0x23
 800127e:	f000 fb22 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40013000 	.word	0x40013000
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d113      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_TIM_Base_MspInit+0x48>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x48>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x48>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	210f      	movs	r1, #15
 80012ca:	202d      	movs	r0, #45	; 0x2d
 80012cc:	f000 fadf 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012d0:	202d      	movs	r0, #45	; 0x2d
 80012d2:	f000 faf8 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40002000 	.word	0x40002000
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ac      	sub	sp, #176	; 0xb0
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2284      	movs	r2, #132	; 0x84
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f005 f82b 	bl	8006364 <memset>
  if(huart->Instance==USART2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a46      	ldr	r2, [pc, #280]	; (800142c <HAL_UART_MspInit+0x144>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d143      	bne.n	80013a0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fc0d 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001330:	f7ff fdf8 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_UART_MspInit+0x148>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <HAL_UART_MspInit+0x148>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_UART_MspInit+0x148>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_UART_MspInit+0x148>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_UART_MspInit+0x148>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_UART_MspInit+0x148>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD3     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8001364:	2368      	movs	r3, #104	; 0x68
 8001366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137c:	2307      	movs	r3, #7
 800137e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001386:	4619      	mov	r1, r3
 8001388:	482a      	ldr	r0, [pc, #168]	; (8001434 <HAL_UART_MspInit+0x14c>)
 800138a:	f000 fe7d 	bl	8002088 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210e      	movs	r1, #14
 8001392:	2026      	movs	r0, #38	; 0x26
 8001394:	f000 fa7b 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f000 fa94 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800139e:	e041      	b.n	8001424 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a24      	ldr	r2, [pc, #144]	; (8001438 <HAL_UART_MspInit+0x150>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d13c      	bne.n	8001424 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbc3 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80013c4:	f7ff fdae 	bl	8000f24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6313      	str	r3, [r2, #48]	; 0x30
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_UART_MspInit+0x148>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001406:	2301      	movs	r3, #1
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001412:	2307      	movs	r3, #7
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_UART_MspInit+0x14c>)
 8001420:	f000 fe32 	bl	8002088 <HAL_GPIO_Init>
}
 8001424:	bf00      	nop
 8001426:	37b0      	adds	r7, #176	; 0xb0
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40004400 	.word	0x40004400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40004800 	.word	0x40004800

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f8e2 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <I2C1_EV_IRQHandler+0x10>)
 8001496:	f001 f865 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002b0 	.word	0x200002b0

080014a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <I2C1_ER_IRQHandler+0x10>)
 80014aa:	f001 f875 	bl	8002598 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002b0 	.word	0x200002b0

080014b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <SPI1_IRQHandler+0x10>)
 80014be:	f002 ffdd 	bl	800447c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000304 	.word	0x20000304

080014cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART2_IRQHandler+0x10>)
 80014d2:	f003 fcd1 	bl	8004e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200003b4 	.word	0x200003b4

080014e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80014e6:	f003 f9ab 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000368 	.word	0x20000368

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f004 ff26 	bl	8006374 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20050000 	.word	0x20050000
 8001554:	00000400 	.word	0x00000400
 8001558:	200004f8 	.word	0x200004f8
 800155c:	20000648 	.word	0x20000648

08001560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a0:	4c0b      	ldr	r4, [pc, #44]	; (80015d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ae:	f7ff ffd7 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f004 fee5 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff f801 	bl	80005bc <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015c8:	08006de4 	.word	0x08006de4
  ldr r2, =_sbss
 80015cc:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80015d0:	20000648 	.word	0x20000648

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>

080015d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f000 f94c 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f805 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e6:	f7ff fca3 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f967 	bl	80018e2 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162c:	f000 f92f 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000010 	.word	0x20000010
 8001648:	20000018 	.word	0x20000018
 800164c:	20000014 	.word	0x20000014

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000018 	.word	0x20000018
 8001674:	200004fc 	.word	0x200004fc

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200004fc 	.word	0x200004fc

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000018 	.word	0x20000018

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	05fa0000 	.word	0x05fa0000

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff3e 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff31 	bl	800173c <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff feb6 	bl	8001678 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d008      	beq.n	800192c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e052      	b.n	80019d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0216 	bic.w	r2, r2, #22
 800193a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <HAL_DMA_Abort+0x62>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0208 	bic.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197c:	e013      	b.n	80019a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197e:	f7ff fe7b 	bl	8001678 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b05      	cmp	r3, #5
 800198a:	d90c      	bls.n	80019a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e015      	b.n	80019d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e4      	bne.n	800197e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	223f      	movs	r2, #63	; 0x3f
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d004      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e00c      	b.n	8001a12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2205      	movs	r2, #5
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06a      	b.n	8001b24 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d106      	bne.n	8001a66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2223      	movs	r2, #35	; 0x23
 8001a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fa89 	bl	8000f78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_ETH_Init+0xf0>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_ETH_Init+0xf0>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_ETH_Init+0xf0>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_ETH_Init+0xf4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_ETH_Init+0xf4>)
 8001a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_ETH_Init+0xf4>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4927      	ldr	r1, [pc, #156]	; (8001b30 <HAL_ETH_Init+0xf4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_ETH_Init+0xf4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab4:	f7ff fde0 	bl	8001678 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001aba:	e011      	b.n	8001ae0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001abc:	f7ff fddc 	bl	8001678 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aca:	d909      	bls.n	8001ae0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	22e0      	movs	r2, #224	; 0xe0
 8001ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e021      	b.n	8001b24 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e4      	bne.n	8001abc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f958 	bl	8001da8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f9ff 	bl	8001efc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fa55 	bl	8001fae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9bd 	bl	8001e8c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800

08001b34 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <ETH_SetMACConfig+0x15c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7c1b      	ldrb	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <ETH_SetMACConfig+0x28>
 8001b56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b5a:	e000      	b.n	8001b5e <ETH_SetMACConfig+0x2a>
 8001b5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	7c5b      	ldrb	r3, [r3, #17]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <ETH_SetMACConfig+0x38>
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	e000      	b.n	8001b6e <ETH_SetMACConfig+0x3a>
 8001b6c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7fdb      	ldrb	r3, [r3, #31]
 8001b7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	7f92      	ldrb	r2, [r2, #30]
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d102      	bne.n	8001b92 <ETH_SetMACConfig+0x5e>
 8001b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b90:	e000      	b.n	8001b94 <ETH_SetMACConfig+0x60>
 8001b92:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	7f1b      	ldrb	r3, [r3, #28]
 8001b9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d102      	bne.n	8001bbc <ETH_SetMACConfig+0x88>
 8001bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bba:	e000      	b.n	8001bbe <ETH_SetMACConfig+0x8a>
 8001bbc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7bdb      	ldrb	r3, [r3, #15]
 8001bc4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bc6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fd4e 	bl	8001690 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d101      	bne.n	8001c22 <ETH_SetMACConfig+0xee>
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	e000      	b.n	8001c24 <ETH_SetMACConfig+0xf0>
 8001c22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001c32:	2a01      	cmp	r2, #1
 8001c34:	d101      	bne.n	8001c3a <ETH_SetMACConfig+0x106>
 8001c36:	2208      	movs	r2, #8
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0x108>
 8001c3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001c44:	2a01      	cmp	r2, #1
 8001c46:	d101      	bne.n	8001c4c <ETH_SetMACConfig+0x118>
 8001c48:	2204      	movs	r2, #4
 8001c4a:	e000      	b.n	8001c4e <ETH_SetMACConfig+0x11a>
 8001c4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001c56:	2a01      	cmp	r2, #1
 8001c58:	d101      	bne.n	8001c5e <ETH_SetMACConfig+0x12a>
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	e000      	b.n	8001c60 <ETH_SetMACConfig+0x12c>
 8001c5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c60:	4313      	orrs	r3, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fd09 	bl	8001690 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	ff20810f 	.word	0xff20810f

08001c94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <ETH_SetDMAConfig+0x110>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7b1b      	ldrb	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <ETH_SetDMAConfig+0x2c>
 8001cba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cbe:	e000      	b.n	8001cc2 <ETH_SetDMAConfig+0x2e>
 8001cc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	7b5b      	ldrb	r3, [r3, #13]
 8001cc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	7f52      	ldrb	r2, [r2, #29]
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d102      	bne.n	8001cd8 <ETH_SetDMAConfig+0x44>
 8001cd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cd6:	e000      	b.n	8001cda <ETH_SetDMAConfig+0x46>
 8001cd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7b9b      	ldrb	r3, [r3, #14]
 8001ce0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ce2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7f1b      	ldrb	r3, [r3, #28]
 8001cee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001cf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7f9b      	ldrb	r3, [r3, #30]
 8001cf6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cf8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cfe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff fcb0 	bl	8001690 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff fc81 	bl	8001690 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f8de3f23 	.word	0xf8de3f23

08001da8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0a6      	sub	sp, #152	; 0x98
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001de4:	2300      	movs	r3, #0
 8001de6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fe86 	bl	8001b34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e54:	2301      	movs	r3, #1
 8001e56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff08 	bl	8001c94 <ETH_SetDMAConfig>
}
 8001e84:	bf00      	nop
 8001e86:	3798      	adds	r7, #152	; 0x98
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	3204      	adds	r2, #4
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <ETH_MACAddressConfig+0x68>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <ETH_MACAddressConfig+0x6c>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40028040 	.word	0x40028040
 8001ef8:	40028044 	.word	0x40028044

08001efc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e03e      	b.n	8001f88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	3206      	adds	r2, #6
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d80c      	bhi.n	8001f6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68d9      	ldr	r1, [r3, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	e004      	b.n	8001f76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d9bd      	bls.n	8001f0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e046      	b.n	800204a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6919      	ldr	r1, [r3, #16]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002000:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	3212      	adds	r2, #18
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d80c      	bhi.n	800203a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6919      	ldr	r1, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	e004      	b.n	8002044 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d9b5      	bls.n	8001fbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207a:	60da      	str	r2, [r3, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e175      	b.n	8002394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8164 	bne.w	800238e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x56>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80be 	beq.w	800238e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a65      	ldr	r2, [pc, #404]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800222a:	4a61      	ldr	r2, [pc, #388]	; (80023b0 <HAL_GPIO_Init+0x328>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_GPIO_Init+0x32c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d037      	beq.n	80022c6 <HAL_GPIO_Init+0x23e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x330>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_GPIO_Init+0x23a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a56      	ldr	r2, [pc, #344]	; (80023bc <HAL_GPIO_Init+0x334>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02b      	beq.n	80022be <HAL_GPIO_Init+0x236>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a55      	ldr	r2, [pc, #340]	; (80023c0 <HAL_GPIO_Init+0x338>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d025      	beq.n	80022ba <HAL_GPIO_Init+0x232>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_GPIO_Init+0x33c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <HAL_GPIO_Init+0x22e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <HAL_GPIO_Init+0x340>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x22a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x344>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x226>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_GPIO_Init+0x348>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x222>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_GPIO_Init+0x34c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x21e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <HAL_GPIO_Init+0x350>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x21a>
 800229e:	2309      	movs	r3, #9
 80022a0:	e012      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022a2:	230a      	movs	r3, #10
 80022a4:	e010      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022a6:	2308      	movs	r3, #8
 80022a8:	e00e      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x240>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x328>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_GPIO_Init+0x354>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a34      	ldr	r2, [pc, #208]	; (80023dc <HAL_GPIO_Init+0x354>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_GPIO_Init+0x354>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_GPIO_Init+0x354>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_GPIO_Init+0x354>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae86 	bls.w	80020a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022400 	.word	0x40022400
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fe3c 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e006      	b.n	80024cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d104      	bne.n	80024de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_I2C_Init+0x11c>)
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69d9      	ldr	r1, [r3, #28]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	02008000 	.word	0x02008000

08002564 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
  }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00f      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00f      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0208 	orr.w	r2, r3, #8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002602:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00f      	beq.n	800262e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0202 	orr.w	r2, r3, #2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030b 	and.w	r3, r3, #11
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fb77 	bl	8002d34 <I2C_ITError>
  }
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
 8002682:	4613      	mov	r3, r2
 8002684:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <I2C_Slave_ISR_IT+0x24>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0e1      	b.n	80028b6 <I2C_Slave_ISR_IT+0x1e8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800270e:	6939      	ldr	r1, [r7, #16]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f9b5 	bl	8002a80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d04b      	beq.n	80027b8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002726:	2b00      	cmp	r3, #0
 8002728:	d046      	beq.n	80027b8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d128      	bne.n	8002786 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b28      	cmp	r3, #40	; 0x28
 800273e:	d108      	bne.n	8002752 <I2C_Slave_ISR_IT+0x84>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002746:	d104      	bne.n	8002752 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002748:	6939      	ldr	r1, [r7, #16]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa9e 	bl	8002c8c <I2C_ITListenCplt>
 8002750:	e031      	b.n	80027b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b29      	cmp	r3, #41	; 0x29
 800275c:	d10e      	bne.n	800277c <I2C_Slave_ISR_IT+0xae>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002764:	d00a      	beq.n	800277c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fbd7 	bl	8002f22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f926 	bl	80029c6 <I2C_ITSlaveSeqCplt>
 800277a:	e01c      	b.n	80027b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002784:	e08f      	b.n	80028a6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2210      	movs	r2, #16
 800278c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <I2C_Slave_ISR_IT+0xda>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a6:	d17e      	bne.n	80028a6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	4619      	mov	r1, r3
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fac0 	bl	8002d34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027b4:	e077      	b.n	80028a6 <I2C_Slave_ISR_IT+0x1d8>
 80027b6:	e076      	b.n	80028a6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02f      	beq.n	8002822 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02a      	beq.n	8002822 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d14b      	bne.n	80028aa <I2C_Slave_ISR_IT+0x1dc>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002818:	d047      	beq.n	80028aa <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8d3 	bl	80029c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002820:	e043      	b.n	80028aa <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002836:	6939      	ldr	r1, [r7, #16]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f840 	bl	80028be <I2C_ITAddrCplt>
 800283e:	e035      	b.n	80028ac <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d030      	beq.n	80028ac <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02b      	beq.n	80028ac <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d018      	beq.n	8002890 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
 800288e:	e00d      	b.n	80028ac <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002896:	d002      	beq.n	800289e <I2C_Slave_ISR_IT+0x1d0>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f891 	bl	80029c6 <I2C_ITSlaveSeqCplt>
 80028a4:	e002      	b.n	80028ac <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80028aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028d4:	2b28      	cmp	r3, #40	; 0x28
 80028d6:	d16a      	bne.n	80029ae <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028f6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002912:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d138      	bne.n	800298e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	09db      	lsrs	r3, r3, #7
 8002920:	b29a      	uxth	r2, r3
 8002922:	89bb      	ldrh	r3, [r7, #12]
 8002924:	4053      	eors	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	f003 0306 	and.w	r3, r3, #6
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11c      	bne.n	800296a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	2b02      	cmp	r3, #2
 8002944:	d13b      	bne.n	80029be <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2208      	movs	r2, #8
 8002952:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800295c:	89ba      	ldrh	r2, [r7, #12]
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fe87 	bl	8002676 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002968:	e029      	b.n	80029be <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800296e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fb17 	bl	8002fa6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002980:	89ba      	ldrh	r2, [r7, #12]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fe75 	bl	8002676 <HAL_I2C_AddrCallback>
}
 800298c:	e017      	b.n	80029be <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800298e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb07 	bl	8002fa6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029a0:	89ba      	ldrh	r2, [r7, #12]
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fe65 	bl	8002676 <HAL_I2C_AddrCallback>
}
 80029ac:	e007      	b.n	80029be <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2208      	movs	r2, #8
 80029b4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e00c      	b.n	8002a14 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b29      	cmp	r3, #41	; 0x29
 8002a1e:	d112      	bne.n	8002a46 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2228      	movs	r2, #40	; 0x28
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fab8 	bl	8002fa6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff fe05 	bl	800264e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a44:	e017      	b.n	8002a76 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a50:	d111      	bne.n	8002a76 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2228      	movs	r2, #40	; 0x28
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2222      	movs	r2, #34	; 0x22
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a60:	2102      	movs	r1, #2
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa9f 	bl	8002fa6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fdf6 	bl	8002662 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b21      	cmp	r3, #33	; 0x21
 8002aaa:	d002      	beq.n	8002ab2 <I2C_ITSlaveCplt+0x32>
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b29      	cmp	r3, #41	; 0x29
 8002ab0:	d108      	bne.n	8002ac4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ab2:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa75 	bl	8002fa6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2221      	movs	r2, #33	; 0x21
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac2:	e00d      	b.n	8002ae0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b22      	cmp	r3, #34	; 0x22
 8002ac8:	d002      	beq.n	8002ad0 <I2C_ITSlaveCplt+0x50>
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ace:	d107      	bne.n	8002ae0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ad0:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fa66 	bl	8002fa6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2222      	movs	r2, #34	; 0x22
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <I2C_ITSlaveCplt+0x204>)
 8002afc:	400b      	ands	r3, r1
 8002afe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa0e 	bl	8002f22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01f      	beq.n	8002b68 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b36:	e017      	b.n	8002b68 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d012      	beq.n	8002b68 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8a4 	bl	8002d34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b28      	cmp	r3, #40	; 0x28
 8002bf6:	d141      	bne.n	8002c7c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f846 	bl	8002c8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c00:	e03c      	b.n	8002c7c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0a:	d014      	beq.n	8002c36 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff feda 	bl	80029c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <I2C_ITSlaveCplt+0x208>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fd2f 	bl	8002692 <HAL_I2C_ListenCpltCallback>
}
 8002c34:	e022      	b.n	8002c7c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	d10e      	bne.n	8002c60 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fd02 	bl	8002662 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c5e:	e00d      	b.n	8002c7c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fce9 	bl	800264e <HAL_I2C_SlaveTxCpltCallback>
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fe00e800 	.word	0xfe00e800
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <I2C_ITListenCplt+0xa4>)
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d08:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f94a 	bl	8002fa6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2210      	movs	r2, #16
 8002d18:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fcb5 	bl	8002692 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <I2C_ITError+0x194>)
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b28      	cmp	r3, #40	; 0x28
 8002d6a:	d005      	beq.n	8002d78 <I2C_ITError+0x44>
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b29      	cmp	r3, #41	; 0x29
 8002d70:	d002      	beq.n	8002d78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b2a      	cmp	r3, #42	; 0x2a
 8002d76:	d10b      	bne.n	8002d90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d78:	2103      	movs	r1, #3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f913 	bl	8002fa6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2228      	movs	r2, #40	; 0x28
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <I2C_ITError+0x198>)
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	e011      	b.n	8002db4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d90:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f906 	bl	8002fa6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b60      	cmp	r3, #96	; 0x60
 8002da4:	d003      	beq.n	8002dae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d039      	beq.n	8002e36 <I2C_ITError+0x102>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b11      	cmp	r3, #17
 8002dc6:	d002      	beq.n	8002dce <I2C_ITError+0x9a>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b21      	cmp	r3, #33	; 0x21
 8002dcc:	d133      	bne.n	8002e36 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ddc:	d107      	bne.n	8002dee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fe13 	bl	8001a1e <HAL_DMA_GetState>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d017      	beq.n	8002e2e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <I2C_ITError+0x19c>)
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fde1 	bl	80019da <HAL_DMA_Abort_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04d      	beq.n	8002eba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e2c:	e045      	b.n	8002eba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f850 	bl	8002ed4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e34:	e041      	b.n	8002eba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d039      	beq.n	8002eb2 <I2C_ITError+0x17e>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d002      	beq.n	8002e4a <I2C_ITError+0x116>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b22      	cmp	r3, #34	; 0x22
 8002e48:	d133      	bne.n	8002eb2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d107      	bne.n	8002e6a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fdd5 	bl	8001a1e <HAL_DMA_GetState>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d017      	beq.n	8002eaa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <I2C_ITError+0x19c>)
 8002e80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fda3 	bl	80019da <HAL_DMA_Abort_IT>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ea8:	e009      	b.n	8002ebe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f812 	bl	8002ed4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb0:	e005      	b.n	8002ebe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f80e 	bl	8002ed4 <I2C_TreatErrorCallback>
  }
}
 8002eb8:	e002      	b.n	8002ec0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ebe:	bf00      	nop
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	ffff0000 	.word	0xffff0000
 8002ecc:	080026cf 	.word	0x080026cf
 8002ed0:	08002f6b 	.word	0x08002f6b

08002ed4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d10e      	bne.n	8002f06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fbdb 	bl	80026ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f04:	e009      	b.n	8002f1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fbc6 	bl	80026a6 <HAL_I2C_ErrorCallback>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d103      	bne.n	8002f40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d007      	beq.n	8002f5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	619a      	str	r2, [r3, #24]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	2200      	movs	r2, #0
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2200      	movs	r2, #0
 8002f96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff ff9b 	bl	8002ed4 <I2C_TreatErrorCallback>
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fd4:	2b28      	cmp	r3, #40	; 0x28
 8002fd6:	d003      	beq.n	8002fe0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002fde:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00f      	beq.n	800300a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002ff0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ffe:	2b28      	cmp	r3, #40	; 0x28
 8003000:	d003      	beq.n	800300a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003008:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800300a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da03      	bge.n	800301a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003018:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	2b10      	cmp	r3, #16
 800301e:	d103      	bne.n	8003028 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003026:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d103      	bne.n	8003036 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d103      	bne.n	8003044 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43da      	mvns	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	400a      	ands	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d138      	bne.n	80030ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003082:	2302      	movs	r3, #2
 8003084:	e032      	b.n	80030ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b20      	cmp	r3, #32
 800310c:	d139      	bne.n	8003182 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003118:	2302      	movs	r3, #2
 800311a:	e033      	b.n	8003184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800314a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40007000 	.word	0x40007000

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e291      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8087 	beq.w	80032e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00c      	beq.n	80031fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e0:	4b93      	ldr	r3, [pc, #588]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d112      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
 80031ec:	4b90      	ldr	r3, [pc, #576]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d10b      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fa:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d06c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x130>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d168      	bne.n	80032e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e26b      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x7a>
 800321c:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a83      	ldr	r2, [pc, #524]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	e02e      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x9c>
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7b      	ldr	r2, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0xc0>
 8003256:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 8003270:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f9f2 	bl	8001678 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe f9ee 	bl	8001678 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e21f      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xe8>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe f9de 	bl	8001678 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe f9da 	bl	8001678 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e20b      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x110>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d069      	beq.n	80033c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b08      	cmp	r3, #8
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1df      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e040      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d023      	beq.n	8003390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f990 	bl	8001678 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe f98c 	bl	8001678 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1bd      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4929      	ldr	r1, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
 800338e:	e018      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f96c 	bl	8001678 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe f968 	bl	8001678 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e199      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d038      	beq.n	8003440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fe f949 	bl	8001678 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe f945 	bl	8001678 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e176      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x23a>
 8003408:	e01a      	b.n	8003440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe f92f 	bl	8001678 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe f92b 	bl	8001678 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d903      	bls.n	8003434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e15c      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
 8003430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b91      	ldr	r3, [pc, #580]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a4 	beq.w	8003596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a87      	ldr	r2, [pc, #540]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b85      	ldr	r3, [pc, #532]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4b82      	ldr	r3, [pc, #520]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003482:	4b7f      	ldr	r3, [pc, #508]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7e      	ldr	r2, [pc, #504]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe f8f3 	bl	8001678 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe f8ef 	bl	8001678 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e120      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	4b75      	ldr	r3, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x31a>
 80034bc:	4b6f      	ldr	r3, [pc, #444]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a6e      	ldr	r2, [pc, #440]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x33c>
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a66      	ldr	r2, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x35e>
 80034f4:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5a      	ldr	r2, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f8a3 	bl	8001678 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe f89f 	bl	8001678 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0ce      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCC_OscConfig+0x386>
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fe f88d 	bl	8001678 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe f889 	bl	8001678 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a4 	beq.w	80036e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d06b      	beq.n	8003684 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d149      	bne.n	8003648 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f85a 	bl	8001678 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe f856 	bl	8001678 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e087      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	4313      	orrs	r3, r2
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800360e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003612:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f82a 	bl	8001678 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fe f826 	bl	8001678 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e057      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x478>
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800364e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe f810 	bl	8001678 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f80c 	bl	8001678 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e03d      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x4ac>
 800367a:	e035      	b.n	80036e8 <HAL_RCC_OscConfig+0x538>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x544>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d028      	beq.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 020f 	bic.w	r2, r3, #15
 8003726:	4965      	ldr	r1, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd ff44 	bl	8001678 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd ff40 	bl	8001678 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 020f 	bic.w	r2, r3, #15
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1cc>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d0>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fea0 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08006c88 	.word	0x08006c88
 80038c8:	20000010 	.word	0x20000010
 80038cc:	20000014 	.word	0x20000014

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b094      	sub	sp, #80	; 0x50
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	647b      	str	r3, [r7, #68]	; 0x44
 80038dc:	2300      	movs	r3, #0
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	2300      	movs	r3, #0
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80e1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e0db      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003908:	e0db      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b73      	ldr	r3, [pc, #460]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390e:	e0d8      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
 800393e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003942:	4622      	mov	r2, r4
 8003944:	462b      	mov	r3, r5
 8003946:	f04f 0000 	mov.w	r0, #0
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	0159      	lsls	r1, r3, #5
 8003950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003954:	0150      	lsls	r0, r2, #5
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4621      	mov	r1, r4
 800395c:	1a51      	subs	r1, r2, r1
 800395e:	6139      	str	r1, [r7, #16]
 8003960:	4629      	mov	r1, r5
 8003962:	eb63 0301 	sbc.w	r3, r3, r1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003974:	4659      	mov	r1, fp
 8003976:	018b      	lsls	r3, r1, #6
 8003978:	4651      	mov	r1, sl
 800397a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397e:	4651      	mov	r1, sl
 8003980:	018a      	lsls	r2, r1, #6
 8003982:	4651      	mov	r1, sl
 8003984:	ebb2 0801 	subs.w	r8, r2, r1
 8003988:	4659      	mov	r1, fp
 800398a:	eb63 0901 	sbc.w	r9, r3, r1
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a2:	4690      	mov	r8, r2
 80039a4:	4699      	mov	r9, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	eb18 0303 	adds.w	r3, r8, r3
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	462b      	mov	r3, r5
 80039b0:	eb49 0303 	adc.w	r3, r9, r3
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039c2:	4629      	mov	r1, r5
 80039c4:	024b      	lsls	r3, r1, #9
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039cc:	4621      	mov	r1, r4
 80039ce:	024a      	lsls	r2, r1, #9
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e0:	f7fc fc6e 	bl	80002c0 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	e058      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	2200      	movs	r2, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	4611      	mov	r1, r2
 80039fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	f04f 0000 	mov.w	r0, #0
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	0159      	lsls	r1, r3, #5
 8003a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1a:	0150      	lsls	r0, r2, #5
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4641      	mov	r1, r8
 8003a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a40:	ebb2 040a 	subs.w	r4, r2, sl
 8003a44:	eb63 050b 	sbc.w	r5, r3, fp
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb45 0303 	adc.w	r3, r5, r3
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	61fa      	str	r2, [r7, #28]
 8003a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a94:	f7fc fc14 	bl	80002c0 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3750      	adds	r7, #80	; 0x50
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000010 	.word	0x20000010

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08006c98 	.word	0x08006c98

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b20:	f7ff ffdc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0b5b      	lsrs	r3, r3, #13
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08006c98 	.word	0x08006c98

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b6c:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a68      	ldr	r2, [pc, #416]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	4964      	ldr	r1, [pc, #400]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	4959      	ldr	r1, [pc, #356]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bda:	4b4e      	ldr	r3, [pc, #312]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	494a      	ldr	r1, [pc, #296]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 808b 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	4a39      	ldr	r2, [pc, #228]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6413      	str	r3, [r2, #64]	; 0x40
 8003c34:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fd14 	bl	8001678 <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fd fd10 	bl	8001678 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e357      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d035      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d114      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fcd8 	bl	8001678 <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fcd4 	bl	8001678 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e319      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ee      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	4901      	ldr	r1, [pc, #4]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	0ffffcff 	.word	0x0ffffcff
 8003d20:	4baa      	ldr	r3, [pc, #680]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4aa9      	ldr	r2, [pc, #676]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	4ba7      	ldr	r3, [pc, #668]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	49a4      	ldr	r1, [pc, #656]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d4a:	4ba0      	ldr	r3, [pc, #640]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	4a9e      	ldr	r2, [pc, #632]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d5a:	4b9c      	ldr	r3, [pc, #624]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	4999      	ldr	r1, [pc, #612]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d78:	4b94      	ldr	r3, [pc, #592]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d86:	4991      	ldr	r1, [pc, #580]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d9a:	4b8c      	ldr	r3, [pc, #560]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da8:	4988      	ldr	r1, [pc, #544]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dbc:	4b83      	ldr	r3, [pc, #524]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	4980      	ldr	r1, [pc, #512]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dde:	4b7b      	ldr	r3, [pc, #492]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4977      	ldr	r1, [pc, #476]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e00:	4b72      	ldr	r3, [pc, #456]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	496f      	ldr	r1, [pc, #444]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e22:	4b6a      	ldr	r3, [pc, #424]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f023 020c 	bic.w	r2, r3, #12
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e30:	4966      	ldr	r1, [pc, #408]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	495e      	ldr	r1, [pc, #376]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	4955      	ldr	r1, [pc, #340]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	494d      	ldr	r1, [pc, #308]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eaa:	4b48      	ldr	r3, [pc, #288]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	4944      	ldr	r1, [pc, #272]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ecc:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	493c      	ldr	r1, [pc, #240]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	4933      	ldr	r1, [pc, #204]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f10:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1e:	492b      	ldr	r1, [pc, #172]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d011      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f40:	4922      	ldr	r1, [pc, #136]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f50:	d101      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f72:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f80:	4912      	ldr	r1, [pc, #72]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa4:	4909      	ldr	r1, [pc, #36]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d006      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80d9 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a01      	ldr	r2, [pc, #4]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fca:	e001      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fd fb51 	bl	8001678 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fda:	f7fd fb4d 	bl	8001678 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	; 0x64
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e194      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fec:	4b6c      	ldr	r3, [pc, #432]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11d      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800400c:	4b64      	ldr	r3, [pc, #400]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800401a:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	019a      	lsls	r2, r3, #6
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	071b      	lsls	r3, r3, #28
 8004040:	4957      	ldr	r1, [pc, #348]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004072:	d129      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004074:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004088:	0f1b      	lsrs	r3, r3, #28
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	019a      	lsls	r2, r3, #6
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	071b      	lsls	r3, r3, #28
 80040a8:	493d      	ldr	r1, [pc, #244]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b6:	f023 021f 	bic.w	r2, r3, #31
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	3b01      	subs	r3, #1
 80040c0:	4937      	ldr	r1, [pc, #220]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040da:	0e1b      	lsrs	r3, r3, #24
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e2:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e8:	0f1b      	lsrs	r3, r3, #28
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	019a      	lsls	r2, r3, #6
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	431a      	orrs	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	431a      	orrs	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	071b      	lsls	r3, r3, #28
 8004108:	4925      	ldr	r1, [pc, #148]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	019a      	lsls	r2, r3, #6
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	071b      	lsls	r3, r3, #28
 8004138:	4919      	ldr	r1, [pc, #100]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800414a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7fd fa94 	bl	8001678 <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004154:	f7fd fa90 	bl	8001678 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0d7      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80cd 	bne.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004186:	f7fd fa77 	bl	8001678 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800418e:	f7fd fa73 	bl	8001678 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	; 0x64
 800419a:	d903      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0ba      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a4:	4b5e      	ldr	r3, [pc, #376]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d0ed      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02e      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041da:	4b51      	ldr	r3, [pc, #324]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	0f1b      	lsrs	r3, r3, #28
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	019a      	lsls	r2, r3, #6
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	4944      	ldr	r1, [pc, #272]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004216:	4b42      	ldr	r3, [pc, #264]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	493d      	ldr	r1, [pc, #244]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d022      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d11d      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004246:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	019a      	lsls	r2, r3, #6
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	4929      	ldr	r1, [pc, #164]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d028      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	019a      	lsls	r2, r3, #6
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	431a      	orrs	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	071b      	lsls	r3, r3, #28
 80042c2:	4917      	ldr	r1, [pc, #92]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4911      	ldr	r1, [pc, #68]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fd f9c4 	bl	8001678 <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f4:	f7fd f9c0 	bl	8001678 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e007      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004312:	d1ef      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023800 	.word	0x40023800

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e09d      	b.n	8004472 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004346:	d009      	beq.n	800435c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
 800434e:	e005      	b.n	800435c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc ff26 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800439c:	d902      	bls.n	80043a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e002      	b.n	80043aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043b2:	d007      	beq.n	80043c4 <HAL_SPI_Init+0xa0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	ea42 0103 	orr.w	r1, r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	f003 0204 	and.w	r2, r3, #4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10e      	bne.n	80044bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
    return;
 80044ba:	e0ce      	b.n	800465a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_SPI_IRQHandler+0x5e>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
    return;
 80044d8:	e0bf      	b.n	800465a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_SPI_IRQHandler+0x7e>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b0 	beq.w	800465a <HAL_SPI_IRQHandler+0x1de>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80aa 	beq.w	800465a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b03      	cmp	r3, #3
 800451a:	d011      	beq.n	8004540 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	e00b      	b.n	8004558 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
        return;
 8004556:	e080      	b.n	800465a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459a:	f043 0208 	orr.w	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d04f      	beq.n	8004658 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_SPI_IRQHandler+0x168>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d034      	beq.n	800464e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0203 	bic.w	r2, r2, #3
 80045f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_SPI_IRQHandler+0x1e4>)
 8004602:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd f9e6 	bl	80019da <HAL_DMA_Abort_IT>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	2b00      	cmp	r3, #0
 8004626:	d016      	beq.n	8004656 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <HAL_SPI_IRQHandler+0x1e4>)
 800462e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd f9d0 	bl	80019da <HAL_DMA_Abort_IT>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800464c:	e003      	b.n	8004656 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f808 	bl	8004664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004654:	e000      	b.n	8004658 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004656:	bf00      	nop
    return;
 8004658:	bf00      	nop
  }
}
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08004679 	.word	0x08004679

08004664 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff ffe5 	bl	8004664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e049      	b.n	8004748 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fc fde7 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 f9f5 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e054      	b.n	8004812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a26      	ldr	r2, [pc, #152]	; (8004820 <HAL_TIM_Base_Start_IT+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d01d      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_TIM_Base_Start_IT+0xd4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	; (8004828 <HAL_TIM_Base_Start_IT+0xd8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_TIM_Base_Start_IT+0xdc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIM_Base_Start_IT+0xe0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_Base_Start_IT+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIM_Base_Start_IT+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d115      	bne.n	80047fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_TIM_Base_Start_IT+0xec>)
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d015      	beq.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d011      	beq.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	e008      	b.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e000      	b.n	8004810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f905 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8f7 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f908 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8db 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8cd 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8de 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0208 	mvn.w	r2, #8
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8b1 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8a3 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8b4 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b10      	cmp	r3, #16
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0210 	mvn.w	r2, #16
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2208      	movs	r2, #8
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f887 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f879 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f88a 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0201 	mvn.w	r2, #1
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc f96a 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f91a 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f90d 	bl	8004c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f838 	bl	8004aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0220 	mvn.w	r2, #32
 8004a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8cd 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d00f      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3d      	ldr	r2, [pc, #244]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3c      	ldr	r2, [pc, #240]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d108      	bne.n	8004b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d027      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d023      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d017      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <TIM_Base_SetConfig+0x128>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <TIM_Base_SetConfig+0x12c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM_Base_SetConfig+0x130>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <TIM_Base_SetConfig+0x134>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <TIM_Base_SetConfig+0x138>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <TIM_Base_SetConfig+0x13c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d108      	bne.n	8004b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0xf8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40001800 	.word	0x40001800
 8004c08:	40001c00 	.word	0x40001c00
 8004c0c:	40002000 	.word	0x40002000

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e040      	b.n	8004ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fb3a 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	; 0x24
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fbe6 	bl	800545c <UART_SetConfig>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e022      	b.n	8004ce0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fe3e 	bl	8005924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fec5 	bl	8005a68 <UART_CheckIdleState>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d171      	bne.n	8004de4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Transmit+0x24>
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e06a      	b.n	8004de6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2221      	movs	r2, #33	; 0x21
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1e:	f7fc fcab 	bl	8001678 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	d108      	bne.n	8004d50 <HAL_UART_Transmit+0x68>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	e003      	b.n	8004d58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d58:	e02c      	b.n	8004db4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 feb6 	bl	8005ad6 <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e038      	b.n	8004de6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1cc      	bne.n	8004d5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fe83 	bl	8005ad6 <UART_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e005      	b.n	8004de6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b08a      	sub	sp, #40	; 0x28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d132      	bne.n	8004e6c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_UART_Receive_IT+0x24>
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e02b      	b.n	8004e6e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	613b      	str	r3, [r7, #16]
   return(result);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	6a3a      	ldr	r2, [r7, #32]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fefe 	bl	8005c64 <UART_Start_Receive_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3728      	adds	r7, #40	; 0x28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0ba      	sub	sp, #232	; 0xe8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ea2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d115      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00f      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8297 	beq.w	8005404 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
      }
      return;
 8004ede:	e291      	b.n	8005404 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8117 	beq.w	8005118 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ef6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004efa:	4b85      	ldr	r3, [pc, #532]	; (8005110 <HAL_UART_IRQHandler+0x298>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 810a 	beq.w	8005118 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d011      	beq.n	8004f34 <HAL_UART_IRQHandler+0xbc>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2201      	movs	r2, #1
 8004f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d011      	beq.n	8004f64 <HAL_UART_IRQHandler+0xec>
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00b      	beq.n	8004f64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2202      	movs	r2, #2
 8004f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5a:	f043 0204 	orr.w	r2, r3, #4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d011      	beq.n	8004f94 <HAL_UART_IRQHandler+0x11c>
 8004f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2204      	movs	r2, #4
 8004f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	f043 0202 	orr.w	r2, r3, #2
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d017      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	f043 0208 	orr.w	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d012      	beq.n	8005002 <HAL_UART_IRQHandler+0x18a>
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00c      	beq.n	8005002 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 81fd 	beq.w	8005408 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d005      	beq.n	800505a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d04f      	beq.n	80050fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fec8 	bl	8005df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d141      	bne.n	80050f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800509a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800509e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1d9      	bne.n	800506e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	4a13      	ldr	r2, [pc, #76]	; (8005114 <HAL_UART_IRQHandler+0x29c>)
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc fc83 	bl	80019da <HAL_DMA_Abort_IT>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d017      	beq.n	800510a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e00f      	b.n	800510a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9a0 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00b      	b.n	800510a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f99c 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e007      	b.n	800510a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f998 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005108:	e17e      	b.n	8005408 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510a:	bf00      	nop
    return;
 800510c:	e17c      	b.n	8005408 <HAL_UART_IRQHandler+0x590>
 800510e:	bf00      	nop
 8005110:	04000120 	.word	0x04000120
 8005114:	08005eb9 	.word	0x08005eb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	2b01      	cmp	r3, #1
 800511e:	f040 814c 	bne.w	80053ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8145 	beq.w	80053ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 813e 	beq.w	80053ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2210      	movs	r2, #16
 8005144:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	f040 80b6 	bne.w	80052c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005162:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8150 	beq.w	800540c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005176:	429a      	cmp	r2, r3
 8005178:	f080 8148 	bcs.w	800540c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005182:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005190:	f000 8086 	beq.w	80052a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1da      	bne.n	8005194 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800520a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e1      	bne.n	80051de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800522a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800523e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800524c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e3      	bne.n	800521a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800526e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005282:	65bb      	str	r3, [r7, #88]	; 0x58
 8005284:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e4      	bne.n	8005260 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc fb2d 	bl	80018fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8c2 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052c0:	e0a4      	b.n	800540c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8096 	beq.w	8005410 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8091 	beq.w	8005410 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
 8005312:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e4      	bne.n	80052ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	623b      	str	r3, [r7, #32]
   return(result);
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005348:	633a      	str	r2, [r7, #48]	; 0x30
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800534e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e3      	bne.n	8005324 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60fb      	str	r3, [r7, #12]
   return(result);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0310 	bic.w	r3, r3, #16
 8005384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	617b      	str	r3, [r7, #20]
   return(result);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e4      	bne.n	8005370 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f846 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053b8:	e02a      	b.n	8005410 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01c      	beq.n	8005414 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
    }
    return;
 80053e2:	e017      	b.n	8005414 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_UART_IRQHandler+0x59e>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fd71 	bl	8005ee4 <UART_EndTransmit_IT>
    return;
 8005402:	e008      	b.n	8005416 <HAL_UART_IRQHandler+0x59e>
      return;
 8005404:	bf00      	nop
 8005406:	e006      	b.n	8005416 <HAL_UART_IRQHandler+0x59e>
    return;
 8005408:	bf00      	nop
 800540a:	e004      	b.n	8005416 <HAL_UART_IRQHandler+0x59e>
      return;
 800540c:	bf00      	nop
 800540e:	e002      	b.n	8005416 <HAL_UART_IRQHandler+0x59e>
      return;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_UART_IRQHandler+0x59e>
    return;
 8005414:	bf00      	nop
  }

}
 8005416:	37e8      	adds	r7, #232	; 0xe8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4ba6      	ldr	r3, [pc, #664]	; (8005720 <UART_SetConfig+0x2c4>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	430b      	orrs	r3, r1
 8005492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a94      	ldr	r2, [pc, #592]	; (8005724 <UART_SetConfig+0x2c8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d120      	bne.n	800551a <UART_SetConfig+0xbe>
 80054d8:	4b93      	ldr	r3, [pc, #588]	; (8005728 <UART_SetConfig+0x2cc>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d816      	bhi.n	8005514 <UART_SetConfig+0xb8>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x90>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005503 	.word	0x08005503
 80054f8:	0800550f 	.word	0x0800550f
 80054fc:	2301      	movs	r3, #1
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e150      	b.n	80057a4 <UART_SetConfig+0x348>
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e14d      	b.n	80057a4 <UART_SetConfig+0x348>
 8005508:	2304      	movs	r3, #4
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e14a      	b.n	80057a4 <UART_SetConfig+0x348>
 800550e:	2308      	movs	r3, #8
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e147      	b.n	80057a4 <UART_SetConfig+0x348>
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e144      	b.n	80057a4 <UART_SetConfig+0x348>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a83      	ldr	r2, [pc, #524]	; (800572c <UART_SetConfig+0x2d0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d132      	bne.n	800558a <UART_SetConfig+0x12e>
 8005524:	4b80      	ldr	r3, [pc, #512]	; (8005728 <UART_SetConfig+0x2cc>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d828      	bhi.n	8005584 <UART_SetConfig+0x128>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0xdc>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005585 	.word	0x08005585
 8005540:	08005585 	.word	0x08005585
 8005544:	08005585 	.word	0x08005585
 8005548:	08005579 	.word	0x08005579
 800554c:	08005585 	.word	0x08005585
 8005550:	08005585 	.word	0x08005585
 8005554:	08005585 	.word	0x08005585
 8005558:	08005573 	.word	0x08005573
 800555c:	08005585 	.word	0x08005585
 8005560:	08005585 	.word	0x08005585
 8005564:	08005585 	.word	0x08005585
 8005568:	0800557f 	.word	0x0800557f
 800556c:	2300      	movs	r3, #0
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e118      	b.n	80057a4 <UART_SetConfig+0x348>
 8005572:	2302      	movs	r3, #2
 8005574:	77fb      	strb	r3, [r7, #31]
 8005576:	e115      	b.n	80057a4 <UART_SetConfig+0x348>
 8005578:	2304      	movs	r3, #4
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e112      	b.n	80057a4 <UART_SetConfig+0x348>
 800557e:	2308      	movs	r3, #8
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e10f      	b.n	80057a4 <UART_SetConfig+0x348>
 8005584:	2310      	movs	r3, #16
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e10c      	b.n	80057a4 <UART_SetConfig+0x348>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a68      	ldr	r2, [pc, #416]	; (8005730 <UART_SetConfig+0x2d4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d120      	bne.n	80055d6 <UART_SetConfig+0x17a>
 8005594:	4b64      	ldr	r3, [pc, #400]	; (8005728 <UART_SetConfig+0x2cc>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800559e:	2b30      	cmp	r3, #48	; 0x30
 80055a0:	d013      	beq.n	80055ca <UART_SetConfig+0x16e>
 80055a2:	2b30      	cmp	r3, #48	; 0x30
 80055a4:	d814      	bhi.n	80055d0 <UART_SetConfig+0x174>
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d009      	beq.n	80055be <UART_SetConfig+0x162>
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d810      	bhi.n	80055d0 <UART_SetConfig+0x174>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <UART_SetConfig+0x15c>
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d006      	beq.n	80055c4 <UART_SetConfig+0x168>
 80055b6:	e00b      	b.n	80055d0 <UART_SetConfig+0x174>
 80055b8:	2300      	movs	r3, #0
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e0f2      	b.n	80057a4 <UART_SetConfig+0x348>
 80055be:	2302      	movs	r3, #2
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e0ef      	b.n	80057a4 <UART_SetConfig+0x348>
 80055c4:	2304      	movs	r3, #4
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e0ec      	b.n	80057a4 <UART_SetConfig+0x348>
 80055ca:	2308      	movs	r3, #8
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e0e9      	b.n	80057a4 <UART_SetConfig+0x348>
 80055d0:	2310      	movs	r3, #16
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e0e6      	b.n	80057a4 <UART_SetConfig+0x348>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a56      	ldr	r2, [pc, #344]	; (8005734 <UART_SetConfig+0x2d8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d120      	bne.n	8005622 <UART_SetConfig+0x1c6>
 80055e0:	4b51      	ldr	r3, [pc, #324]	; (8005728 <UART_SetConfig+0x2cc>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055ea:	2bc0      	cmp	r3, #192	; 0xc0
 80055ec:	d013      	beq.n	8005616 <UART_SetConfig+0x1ba>
 80055ee:	2bc0      	cmp	r3, #192	; 0xc0
 80055f0:	d814      	bhi.n	800561c <UART_SetConfig+0x1c0>
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d009      	beq.n	800560a <UART_SetConfig+0x1ae>
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d810      	bhi.n	800561c <UART_SetConfig+0x1c0>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <UART_SetConfig+0x1a8>
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d006      	beq.n	8005610 <UART_SetConfig+0x1b4>
 8005602:	e00b      	b.n	800561c <UART_SetConfig+0x1c0>
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e0cc      	b.n	80057a4 <UART_SetConfig+0x348>
 800560a:	2302      	movs	r3, #2
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e0c9      	b.n	80057a4 <UART_SetConfig+0x348>
 8005610:	2304      	movs	r3, #4
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e0c6      	b.n	80057a4 <UART_SetConfig+0x348>
 8005616:	2308      	movs	r3, #8
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e0c3      	b.n	80057a4 <UART_SetConfig+0x348>
 800561c:	2310      	movs	r3, #16
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e0c0      	b.n	80057a4 <UART_SetConfig+0x348>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a44      	ldr	r2, [pc, #272]	; (8005738 <UART_SetConfig+0x2dc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d125      	bne.n	8005678 <UART_SetConfig+0x21c>
 800562c:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <UART_SetConfig+0x2cc>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d017      	beq.n	800566c <UART_SetConfig+0x210>
 800563c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005640:	d817      	bhi.n	8005672 <UART_SetConfig+0x216>
 8005642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005646:	d00b      	beq.n	8005660 <UART_SetConfig+0x204>
 8005648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564c:	d811      	bhi.n	8005672 <UART_SetConfig+0x216>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <UART_SetConfig+0x1fe>
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	d006      	beq.n	8005666 <UART_SetConfig+0x20a>
 8005658:	e00b      	b.n	8005672 <UART_SetConfig+0x216>
 800565a:	2300      	movs	r3, #0
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e0a1      	b.n	80057a4 <UART_SetConfig+0x348>
 8005660:	2302      	movs	r3, #2
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e09e      	b.n	80057a4 <UART_SetConfig+0x348>
 8005666:	2304      	movs	r3, #4
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e09b      	b.n	80057a4 <UART_SetConfig+0x348>
 800566c:	2308      	movs	r3, #8
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e098      	b.n	80057a4 <UART_SetConfig+0x348>
 8005672:	2310      	movs	r3, #16
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e095      	b.n	80057a4 <UART_SetConfig+0x348>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2f      	ldr	r2, [pc, #188]	; (800573c <UART_SetConfig+0x2e0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d125      	bne.n	80056ce <UART_SetConfig+0x272>
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <UART_SetConfig+0x2cc>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800568c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005690:	d017      	beq.n	80056c2 <UART_SetConfig+0x266>
 8005692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005696:	d817      	bhi.n	80056c8 <UART_SetConfig+0x26c>
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569c:	d00b      	beq.n	80056b6 <UART_SetConfig+0x25a>
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a2:	d811      	bhi.n	80056c8 <UART_SetConfig+0x26c>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <UART_SetConfig+0x254>
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d006      	beq.n	80056bc <UART_SetConfig+0x260>
 80056ae:	e00b      	b.n	80056c8 <UART_SetConfig+0x26c>
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e076      	b.n	80057a4 <UART_SetConfig+0x348>
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e073      	b.n	80057a4 <UART_SetConfig+0x348>
 80056bc:	2304      	movs	r3, #4
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e070      	b.n	80057a4 <UART_SetConfig+0x348>
 80056c2:	2308      	movs	r3, #8
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e06d      	b.n	80057a4 <UART_SetConfig+0x348>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e06a      	b.n	80057a4 <UART_SetConfig+0x348>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <UART_SetConfig+0x2e4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d138      	bne.n	800574a <UART_SetConfig+0x2ee>
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <UART_SetConfig+0x2cc>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056e6:	d017      	beq.n	8005718 <UART_SetConfig+0x2bc>
 80056e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ec:	d82a      	bhi.n	8005744 <UART_SetConfig+0x2e8>
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f2:	d00b      	beq.n	800570c <UART_SetConfig+0x2b0>
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f8:	d824      	bhi.n	8005744 <UART_SetConfig+0x2e8>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <UART_SetConfig+0x2aa>
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005702:	d006      	beq.n	8005712 <UART_SetConfig+0x2b6>
 8005704:	e01e      	b.n	8005744 <UART_SetConfig+0x2e8>
 8005706:	2300      	movs	r3, #0
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e04b      	b.n	80057a4 <UART_SetConfig+0x348>
 800570c:	2302      	movs	r3, #2
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e048      	b.n	80057a4 <UART_SetConfig+0x348>
 8005712:	2304      	movs	r3, #4
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e045      	b.n	80057a4 <UART_SetConfig+0x348>
 8005718:	2308      	movs	r3, #8
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e042      	b.n	80057a4 <UART_SetConfig+0x348>
 800571e:	bf00      	nop
 8005720:	efff69f3 	.word	0xefff69f3
 8005724:	40011000 	.word	0x40011000
 8005728:	40023800 	.word	0x40023800
 800572c:	40004400 	.word	0x40004400
 8005730:	40004800 	.word	0x40004800
 8005734:	40004c00 	.word	0x40004c00
 8005738:	40005000 	.word	0x40005000
 800573c:	40011400 	.word	0x40011400
 8005740:	40007800 	.word	0x40007800
 8005744:	2310      	movs	r3, #16
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e02c      	b.n	80057a4 <UART_SetConfig+0x348>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a72      	ldr	r2, [pc, #456]	; (8005918 <UART_SetConfig+0x4bc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d125      	bne.n	80057a0 <UART_SetConfig+0x344>
 8005754:	4b71      	ldr	r3, [pc, #452]	; (800591c <UART_SetConfig+0x4c0>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800575e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005762:	d017      	beq.n	8005794 <UART_SetConfig+0x338>
 8005764:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005768:	d817      	bhi.n	800579a <UART_SetConfig+0x33e>
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d00b      	beq.n	8005788 <UART_SetConfig+0x32c>
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005774:	d811      	bhi.n	800579a <UART_SetConfig+0x33e>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <UART_SetConfig+0x326>
 800577a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577e:	d006      	beq.n	800578e <UART_SetConfig+0x332>
 8005780:	e00b      	b.n	800579a <UART_SetConfig+0x33e>
 8005782:	2300      	movs	r3, #0
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e00d      	b.n	80057a4 <UART_SetConfig+0x348>
 8005788:	2302      	movs	r3, #2
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e00a      	b.n	80057a4 <UART_SetConfig+0x348>
 800578e:	2304      	movs	r3, #4
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e007      	b.n	80057a4 <UART_SetConfig+0x348>
 8005794:	2308      	movs	r3, #8
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e004      	b.n	80057a4 <UART_SetConfig+0x348>
 800579a:	2310      	movs	r3, #16
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e001      	b.n	80057a4 <UART_SetConfig+0x348>
 80057a0:	2310      	movs	r3, #16
 80057a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	d15b      	bne.n	8005866 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057ae:	7ffb      	ldrb	r3, [r7, #31]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d828      	bhi.n	8005806 <UART_SetConfig+0x3aa>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0x360>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	08005807 	.word	0x08005807
 80057cc:	080057f7 	.word	0x080057f7
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
 80057dc:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fe f988 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80057e4:	61b8      	str	r0, [r7, #24]
        break;
 80057e6:	e013      	b.n	8005810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7fe f998 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80057ec:	61b8      	str	r0, [r7, #24]
        break;
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b4b      	ldr	r3, [pc, #300]	; (8005920 <UART_SetConfig+0x4c4>)
 80057f2:	61bb      	str	r3, [r7, #24]
        break;
 80057f4:	e00c      	b.n	8005810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fe f86b 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 80057fa:	61b8      	str	r0, [r7, #24]
        break;
 80057fc:	e008      	b.n	8005810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	61bb      	str	r3, [r7, #24]
        break;
 8005804:	e004      	b.n	8005810 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	77bb      	strb	r3, [r7, #30]
        break;
 800580e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d074      	beq.n	8005900 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	005a      	lsls	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	441a      	add	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b0f      	cmp	r3, #15
 8005830:	d916      	bls.n	8005860 <UART_SetConfig+0x404>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005838:	d212      	bcs.n	8005860 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f023 030f 	bic.w	r3, r3, #15
 8005842:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	b29a      	uxth	r2, r3
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	4313      	orrs	r3, r2
 8005854:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	89fa      	ldrh	r2, [r7, #14]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e04f      	b.n	8005900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	77bb      	strb	r3, [r7, #30]
 8005864:	e04c      	b.n	8005900 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005866:	7ffb      	ldrb	r3, [r7, #31]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d828      	bhi.n	80058be <UART_SetConfig+0x462>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x418>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005899 	.word	0x08005899
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058bf 	.word	0x080058bf
 8005884:	080058af 	.word	0x080058af
 8005888:	080058bf 	.word	0x080058bf
 800588c:	080058bf 	.word	0x080058bf
 8005890:	080058bf 	.word	0x080058bf
 8005894:	080058b7 	.word	0x080058b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe f92c 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 800589c:	61b8      	str	r0, [r7, #24]
        break;
 800589e:	e013      	b.n	80058c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a0:	f7fe f93c 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80058a4:	61b8      	str	r0, [r7, #24]
        break;
 80058a6:	e00f      	b.n	80058c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <UART_SetConfig+0x4c4>)
 80058aa:	61bb      	str	r3, [r7, #24]
        break;
 80058ac:	e00c      	b.n	80058c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ae:	f7fe f80f 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 80058b2:	61b8      	str	r0, [r7, #24]
        break;
 80058b4:	e008      	b.n	80058c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ba:	61bb      	str	r3, [r7, #24]
        break;
 80058bc:	e004      	b.n	80058c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	77bb      	strb	r3, [r7, #30]
        break;
 80058c6:	bf00      	nop
    }

    if (pclk != 0U)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d018      	beq.n	8005900 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	085a      	lsrs	r2, r3, #1
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	441a      	add	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d909      	bls.n	80058fc <UART_SetConfig+0x4a0>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ee:	d205      	bcs.n	80058fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e001      	b.n	8005900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800590c:	7fbb      	ldrb	r3, [r7, #30]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40007c00 	.word	0x40007c00
 800591c:	40023800 	.word	0x40023800
 8005920:	00f42400 	.word	0x00f42400

08005924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d10a      	bne.n	8005a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a78:	f7fb fdfe 	bl	8001678 <HAL_GetTick>
 8005a7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d10e      	bne.n	8005aaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f81b 	bl	8005ad6 <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e011      	b.n	8005ace <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b09c      	sub	sp, #112	; 0x70
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae6:	e0a7      	b.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aee:	f000 80a3 	beq.w	8005c38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fb fdc1 	bl	8001678 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13f      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e6      	bne.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	663b      	str	r3, [r7, #96]	; 0x60
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e5      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e068      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d050      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba4:	d148      	bne.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e6      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c02:	623a      	str	r2, [r7, #32]
 8005c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	69f9      	ldr	r1, [r7, #28]
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e5      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e010      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4013      	ands	r3, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	f43f af48 	beq.w	8005ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3770      	adds	r7, #112	; 0x70
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b097      	sub	sp, #92	; 0x5c
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c96:	d10e      	bne.n	8005cb6 <UART_Start_Receive_IT+0x52>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <UART_Start_Receive_IT+0x48>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005caa:	e02d      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	; 0xff
 8005cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb4:	e028      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <UART_Start_Receive_IT+0x76>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <UART_Start_Receive_IT+0x6c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cce:	e01b      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	227f      	movs	r2, #127	; 0x7f
 8005cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd8:	e016      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ce2:	d10d      	bne.n	8005d00 <UART_Start_Receive_IT+0x9c>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <UART_Start_Receive_IT+0x92>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	227f      	movs	r2, #127	; 0x7f
 8005cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf4:	e008      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	223f      	movs	r2, #63	; 0x3f
 8005cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cfe:	e003      	b.n	8005d08 <UART_Start_Receive_IT+0xa4>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2222      	movs	r2, #34	; 0x22
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d38:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d107      	bne.n	8005d66 <UART_Start_Receive_IT+0x102>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <UART_Start_Receive_IT+0x184>)
 8005d62:	669a      	str	r2, [r3, #104]	; 0x68
 8005d64:	e002      	b.n	8005d6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <UART_Start_Receive_IT+0x188>)
 8005d6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d019      	beq.n	8005da8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e6      	bne.n	8005d74 <UART_Start_Receive_IT+0x110>
 8005da6:	e018      	b.n	8005dda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	613b      	str	r3, [r7, #16]
   return(result);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f043 0320 	orr.w	r3, r3, #32
 8005dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	69f9      	ldr	r1, [r7, #28]
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	375c      	adds	r7, #92	; 0x5c
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	0800609f 	.word	0x0800609f
 8005dec:	08005f39 	.word	0x08005f39

08005df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b095      	sub	sp, #84	; 0x54
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e16:	643b      	str	r3, [r7, #64]	; 0x40
 8005e18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e6      	bne.n	8005df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d118      	bne.n	8005e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	613b      	str	r3, [r7, #16]
   return(result);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e6      	bne.n	8005e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005eac:	bf00      	nop
 8005eae:	3754      	adds	r7, #84	; 0x54
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff faaa 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	613b      	str	r3, [r7, #16]
   return(result);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e6      	bne.n	8005eec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fa76 	bl	800541c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f30:	bf00      	nop
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b096      	sub	sp, #88	; 0x58
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f46:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f50:	2b22      	cmp	r3, #34	; 0x22
 8005f52:	f040 8098 	bne.w	8006086 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f60:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005f64:	b2d9      	uxtb	r1, r3
 8005f66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	400a      	ands	r2, r1
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d17b      	bne.n	8006096 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12e      	bne.n	800607e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60fb      	str	r3, [r7, #12]
   return(result);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	64bb      	str	r3, [r7, #72]	; 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	69b9      	ldr	r1, [r7, #24]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	617b      	str	r3, [r7, #20]
   return(result);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b10      	cmp	r3, #16
 8006064:	d103      	bne.n	800606e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff f9e4 	bl	8005444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800607c:	e00b      	b.n	8006096 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fa ff2e 	bl	8000ee0 <HAL_UART_RxCpltCallback>
}
 8006084:	e007      	b.n	8006096 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0208 	orr.w	r2, r2, #8
 8006094:	619a      	str	r2, [r3, #24]
}
 8006096:	bf00      	nop
 8006098:	3758      	adds	r7, #88	; 0x58
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b096      	sub	sp, #88	; 0x58
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b6:	2b22      	cmp	r3, #34	; 0x22
 80060b8:	f040 8098 	bne.w	80061ec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80060cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80060d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060d4:	4013      	ands	r3, r2
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d17b      	bne.n	80061fc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006122:	643b      	str	r3, [r7, #64]	; 0x40
 8006124:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e6      	bne.n	8006104 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	61fb      	str	r3, [r7, #28]
   return(result);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	64bb      	str	r3, [r7, #72]	; 0x48
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e5      	bne.n	8006136 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006182:	2b01      	cmp	r3, #1
 8006184:	d12e      	bne.n	80061e4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	60bb      	str	r3, [r7, #8]
   return(result);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6979      	ldr	r1, [r7, #20]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	613b      	str	r3, [r7, #16]
   return(result);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e6      	bne.n	800618c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d103      	bne.n	80061d4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff f931 	bl	8005444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061e2:	e00b      	b.n	80061fc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fa fe7b 	bl	8000ee0 <HAL_UART_RxCpltCallback>
}
 80061ea:	e007      	b.n	80061fc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	619a      	str	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	3758      	adds	r7, #88	; 0x58
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <atoi>:
 8006204:	220a      	movs	r2, #10
 8006206:	2100      	movs	r1, #0
 8006208:	f000 b8a2 	b.w	8006350 <strtol>

0800620c <siprintf>:
 800620c:	b40e      	push	{r1, r2, r3}
 800620e:	b500      	push	{lr}
 8006210:	b09c      	sub	sp, #112	; 0x70
 8006212:	ab1d      	add	r3, sp, #116	; 0x74
 8006214:	9002      	str	r0, [sp, #8]
 8006216:	9006      	str	r0, [sp, #24]
 8006218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800621c:	4809      	ldr	r0, [pc, #36]	; (8006244 <siprintf+0x38>)
 800621e:	9107      	str	r1, [sp, #28]
 8006220:	9104      	str	r1, [sp, #16]
 8006222:	4909      	ldr	r1, [pc, #36]	; (8006248 <siprintf+0x3c>)
 8006224:	f853 2b04 	ldr.w	r2, [r3], #4
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	a902      	add	r1, sp, #8
 8006230:	f000 f926 	bl	8006480 <_svfiprintf_r>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	b01c      	add	sp, #112	; 0x70
 800623c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006240:	b003      	add	sp, #12
 8006242:	4770      	bx	lr
 8006244:	20000068 	.word	0x20000068
 8006248:	ffff0208 	.word	0xffff0208

0800624c <_strtol_l.constprop.0>:
 800624c:	2b01      	cmp	r3, #1
 800624e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006252:	d001      	beq.n	8006258 <_strtol_l.constprop.0+0xc>
 8006254:	2b24      	cmp	r3, #36	; 0x24
 8006256:	d906      	bls.n	8006266 <_strtol_l.constprop.0+0x1a>
 8006258:	f000 f88c 	bl	8006374 <__errno>
 800625c:	2316      	movs	r3, #22
 800625e:	6003      	str	r3, [r0, #0]
 8006260:	2000      	movs	r0, #0
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800634c <_strtol_l.constprop.0+0x100>
 800626a:	460d      	mov	r5, r1
 800626c:	462e      	mov	r6, r5
 800626e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006272:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006276:	f017 0708 	ands.w	r7, r7, #8
 800627a:	d1f7      	bne.n	800626c <_strtol_l.constprop.0+0x20>
 800627c:	2c2d      	cmp	r4, #45	; 0x2d
 800627e:	d132      	bne.n	80062e6 <_strtol_l.constprop.0+0x9a>
 8006280:	782c      	ldrb	r4, [r5, #0]
 8006282:	2701      	movs	r7, #1
 8006284:	1cb5      	adds	r5, r6, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d05b      	beq.n	8006342 <_strtol_l.constprop.0+0xf6>
 800628a:	2b10      	cmp	r3, #16
 800628c:	d109      	bne.n	80062a2 <_strtol_l.constprop.0+0x56>
 800628e:	2c30      	cmp	r4, #48	; 0x30
 8006290:	d107      	bne.n	80062a2 <_strtol_l.constprop.0+0x56>
 8006292:	782c      	ldrb	r4, [r5, #0]
 8006294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006298:	2c58      	cmp	r4, #88	; 0x58
 800629a:	d14d      	bne.n	8006338 <_strtol_l.constprop.0+0xec>
 800629c:	786c      	ldrb	r4, [r5, #1]
 800629e:	2310      	movs	r3, #16
 80062a0:	3502      	adds	r5, #2
 80062a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80062aa:	f04f 0e00 	mov.w	lr, #0
 80062ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80062b2:	4676      	mov	r6, lr
 80062b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80062b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80062bc:	f1bc 0f09 	cmp.w	ip, #9
 80062c0:	d816      	bhi.n	80062f0 <_strtol_l.constprop.0+0xa4>
 80062c2:	4664      	mov	r4, ip
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	dd24      	ble.n	8006312 <_strtol_l.constprop.0+0xc6>
 80062c8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80062cc:	d008      	beq.n	80062e0 <_strtol_l.constprop.0+0x94>
 80062ce:	45b1      	cmp	r9, r6
 80062d0:	d31c      	bcc.n	800630c <_strtol_l.constprop.0+0xc0>
 80062d2:	d101      	bne.n	80062d8 <_strtol_l.constprop.0+0x8c>
 80062d4:	45a2      	cmp	sl, r4
 80062d6:	db19      	blt.n	800630c <_strtol_l.constprop.0+0xc0>
 80062d8:	fb06 4603 	mla	r6, r6, r3, r4
 80062dc:	f04f 0e01 	mov.w	lr, #1
 80062e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062e4:	e7e8      	b.n	80062b8 <_strtol_l.constprop.0+0x6c>
 80062e6:	2c2b      	cmp	r4, #43	; 0x2b
 80062e8:	bf04      	itt	eq
 80062ea:	782c      	ldrbeq	r4, [r5, #0]
 80062ec:	1cb5      	addeq	r5, r6, #2
 80062ee:	e7ca      	b.n	8006286 <_strtol_l.constprop.0+0x3a>
 80062f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062f4:	f1bc 0f19 	cmp.w	ip, #25
 80062f8:	d801      	bhi.n	80062fe <_strtol_l.constprop.0+0xb2>
 80062fa:	3c37      	subs	r4, #55	; 0x37
 80062fc:	e7e2      	b.n	80062c4 <_strtol_l.constprop.0+0x78>
 80062fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006302:	f1bc 0f19 	cmp.w	ip, #25
 8006306:	d804      	bhi.n	8006312 <_strtol_l.constprop.0+0xc6>
 8006308:	3c57      	subs	r4, #87	; 0x57
 800630a:	e7db      	b.n	80062c4 <_strtol_l.constprop.0+0x78>
 800630c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006310:	e7e6      	b.n	80062e0 <_strtol_l.constprop.0+0x94>
 8006312:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006316:	d105      	bne.n	8006324 <_strtol_l.constprop.0+0xd8>
 8006318:	2322      	movs	r3, #34	; 0x22
 800631a:	6003      	str	r3, [r0, #0]
 800631c:	4646      	mov	r6, r8
 800631e:	b942      	cbnz	r2, 8006332 <_strtol_l.constprop.0+0xe6>
 8006320:	4630      	mov	r0, r6
 8006322:	e79e      	b.n	8006262 <_strtol_l.constprop.0+0x16>
 8006324:	b107      	cbz	r7, 8006328 <_strtol_l.constprop.0+0xdc>
 8006326:	4276      	negs	r6, r6
 8006328:	2a00      	cmp	r2, #0
 800632a:	d0f9      	beq.n	8006320 <_strtol_l.constprop.0+0xd4>
 800632c:	f1be 0f00 	cmp.w	lr, #0
 8006330:	d000      	beq.n	8006334 <_strtol_l.constprop.0+0xe8>
 8006332:	1e69      	subs	r1, r5, #1
 8006334:	6011      	str	r1, [r2, #0]
 8006336:	e7f3      	b.n	8006320 <_strtol_l.constprop.0+0xd4>
 8006338:	2430      	movs	r4, #48	; 0x30
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1b1      	bne.n	80062a2 <_strtol_l.constprop.0+0x56>
 800633e:	2308      	movs	r3, #8
 8006340:	e7af      	b.n	80062a2 <_strtol_l.constprop.0+0x56>
 8006342:	2c30      	cmp	r4, #48	; 0x30
 8006344:	d0a5      	beq.n	8006292 <_strtol_l.constprop.0+0x46>
 8006346:	230a      	movs	r3, #10
 8006348:	e7ab      	b.n	80062a2 <_strtol_l.constprop.0+0x56>
 800634a:	bf00      	nop
 800634c:	08006ca1 	.word	0x08006ca1

08006350 <strtol>:
 8006350:	4613      	mov	r3, r2
 8006352:	460a      	mov	r2, r1
 8006354:	4601      	mov	r1, r0
 8006356:	4802      	ldr	r0, [pc, #8]	; (8006360 <strtol+0x10>)
 8006358:	6800      	ldr	r0, [r0, #0]
 800635a:	f7ff bf77 	b.w	800624c <_strtol_l.constprop.0>
 800635e:	bf00      	nop
 8006360:	20000068 	.word	0x20000068

08006364 <memset>:
 8006364:	4402      	add	r2, r0
 8006366:	4603      	mov	r3, r0
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	f803 1b01 	strb.w	r1, [r3], #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	; (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000068 	.word	0x20000068

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 fc6a 	bl	8006c6c <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006ddc 	.word	0x08006ddc
 80063bc:	08006ddc 	.word	0x08006ddc
 80063c0:	08006ddc 	.word	0x08006ddc
 80063c4:	08006de0 	.word	0x08006de0

080063c8 <__retarget_lock_acquire_recursive>:
 80063c8:	4770      	bx	lr

080063ca <__retarget_lock_release_recursive>:
 80063ca:	4770      	bx	lr

080063cc <__ssputs_r>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	688e      	ldr	r6, [r1, #8]
 80063d2:	461f      	mov	r7, r3
 80063d4:	42be      	cmp	r6, r7
 80063d6:	680b      	ldr	r3, [r1, #0]
 80063d8:	4682      	mov	sl, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	4690      	mov	r8, r2
 80063de:	d82c      	bhi.n	800643a <__ssputs_r+0x6e>
 80063e0:	898a      	ldrh	r2, [r1, #12]
 80063e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063e6:	d026      	beq.n	8006436 <__ssputs_r+0x6a>
 80063e8:	6965      	ldr	r5, [r4, #20]
 80063ea:	6909      	ldr	r1, [r1, #16]
 80063ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f0:	eba3 0901 	sub.w	r9, r3, r1
 80063f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063f8:	1c7b      	adds	r3, r7, #1
 80063fa:	444b      	add	r3, r9
 80063fc:	106d      	asrs	r5, r5, #1
 80063fe:	429d      	cmp	r5, r3
 8006400:	bf38      	it	cc
 8006402:	461d      	movcc	r5, r3
 8006404:	0553      	lsls	r3, r2, #21
 8006406:	d527      	bpl.n	8006458 <__ssputs_r+0x8c>
 8006408:	4629      	mov	r1, r5
 800640a:	f000 f957 	bl	80066bc <_malloc_r>
 800640e:	4606      	mov	r6, r0
 8006410:	b360      	cbz	r0, 800646c <__ssputs_r+0xa0>
 8006412:	6921      	ldr	r1, [r4, #16]
 8006414:	464a      	mov	r2, r9
 8006416:	f000 fbc7 	bl	8006ba8 <memcpy>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	6126      	str	r6, [r4, #16]
 8006428:	6165      	str	r5, [r4, #20]
 800642a:	444e      	add	r6, r9
 800642c:	eba5 0509 	sub.w	r5, r5, r9
 8006430:	6026      	str	r6, [r4, #0]
 8006432:	60a5      	str	r5, [r4, #8]
 8006434:	463e      	mov	r6, r7
 8006436:	42be      	cmp	r6, r7
 8006438:	d900      	bls.n	800643c <__ssputs_r+0x70>
 800643a:	463e      	mov	r6, r7
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4632      	mov	r2, r6
 8006440:	4641      	mov	r1, r8
 8006442:	f000 fb86 	bl	8006b52 <memmove>
 8006446:	68a3      	ldr	r3, [r4, #8]
 8006448:	1b9b      	subs	r3, r3, r6
 800644a:	60a3      	str	r3, [r4, #8]
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	4433      	add	r3, r6
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	462a      	mov	r2, r5
 800645a:	f000 fb4b 	bl	8006af4 <_realloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	2800      	cmp	r0, #0
 8006462:	d1e0      	bne.n	8006426 <__ssputs_r+0x5a>
 8006464:	6921      	ldr	r1, [r4, #16]
 8006466:	4650      	mov	r0, sl
 8006468:	f000 fbac 	bl	8006bc4 <_free_r>
 800646c:	230c      	movs	r3, #12
 800646e:	f8ca 3000 	str.w	r3, [sl]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800647e:	e7e9      	b.n	8006454 <__ssputs_r+0x88>

08006480 <_svfiprintf_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	4698      	mov	r8, r3
 8006486:	898b      	ldrh	r3, [r1, #12]
 8006488:	061b      	lsls	r3, r3, #24
 800648a:	b09d      	sub	sp, #116	; 0x74
 800648c:	4607      	mov	r7, r0
 800648e:	460d      	mov	r5, r1
 8006490:	4614      	mov	r4, r2
 8006492:	d50e      	bpl.n	80064b2 <_svfiprintf_r+0x32>
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	b963      	cbnz	r3, 80064b2 <_svfiprintf_r+0x32>
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	f000 f90f 	bl	80066bc <_malloc_r>
 800649e:	6028      	str	r0, [r5, #0]
 80064a0:	6128      	str	r0, [r5, #16]
 80064a2:	b920      	cbnz	r0, 80064ae <_svfiprintf_r+0x2e>
 80064a4:	230c      	movs	r3, #12
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ac:	e0d0      	b.n	8006650 <_svfiprintf_r+0x1d0>
 80064ae:	2340      	movs	r3, #64	; 0x40
 80064b0:	616b      	str	r3, [r5, #20]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9309      	str	r3, [sp, #36]	; 0x24
 80064b6:	2320      	movs	r3, #32
 80064b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c0:	2330      	movs	r3, #48	; 0x30
 80064c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006668 <_svfiprintf_r+0x1e8>
 80064c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ca:	f04f 0901 	mov.w	r9, #1
 80064ce:	4623      	mov	r3, r4
 80064d0:	469a      	mov	sl, r3
 80064d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d6:	b10a      	cbz	r2, 80064dc <_svfiprintf_r+0x5c>
 80064d8:	2a25      	cmp	r2, #37	; 0x25
 80064da:	d1f9      	bne.n	80064d0 <_svfiprintf_r+0x50>
 80064dc:	ebba 0b04 	subs.w	fp, sl, r4
 80064e0:	d00b      	beq.n	80064fa <_svfiprintf_r+0x7a>
 80064e2:	465b      	mov	r3, fp
 80064e4:	4622      	mov	r2, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff6f 	bl	80063cc <__ssputs_r>
 80064ee:	3001      	adds	r0, #1
 80064f0:	f000 80a9 	beq.w	8006646 <_svfiprintf_r+0x1c6>
 80064f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f6:	445a      	add	r2, fp
 80064f8:	9209      	str	r2, [sp, #36]	; 0x24
 80064fa:	f89a 3000 	ldrb.w	r3, [sl]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80a1 	beq.w	8006646 <_svfiprintf_r+0x1c6>
 8006504:	2300      	movs	r3, #0
 8006506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800650a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800650e:	f10a 0a01 	add.w	sl, sl, #1
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651a:	931a      	str	r3, [sp, #104]	; 0x68
 800651c:	4654      	mov	r4, sl
 800651e:	2205      	movs	r2, #5
 8006520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006524:	4850      	ldr	r0, [pc, #320]	; (8006668 <_svfiprintf_r+0x1e8>)
 8006526:	f7f9 fe7b 	bl	8000220 <memchr>
 800652a:	9a04      	ldr	r2, [sp, #16]
 800652c:	b9d8      	cbnz	r0, 8006566 <_svfiprintf_r+0xe6>
 800652e:	06d0      	lsls	r0, r2, #27
 8006530:	bf44      	itt	mi
 8006532:	2320      	movmi	r3, #32
 8006534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006538:	0711      	lsls	r1, r2, #28
 800653a:	bf44      	itt	mi
 800653c:	232b      	movmi	r3, #43	; 0x2b
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006542:	f89a 3000 	ldrb.w	r3, [sl]
 8006546:	2b2a      	cmp	r3, #42	; 0x2a
 8006548:	d015      	beq.n	8006576 <_svfiprintf_r+0xf6>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	4654      	mov	r4, sl
 800654e:	2000      	movs	r0, #0
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	4621      	mov	r1, r4
 8006556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655a:	3b30      	subs	r3, #48	; 0x30
 800655c:	2b09      	cmp	r3, #9
 800655e:	d94d      	bls.n	80065fc <_svfiprintf_r+0x17c>
 8006560:	b1b0      	cbz	r0, 8006590 <_svfiprintf_r+0x110>
 8006562:	9207      	str	r2, [sp, #28]
 8006564:	e014      	b.n	8006590 <_svfiprintf_r+0x110>
 8006566:	eba0 0308 	sub.w	r3, r0, r8
 800656a:	fa09 f303 	lsl.w	r3, r9, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	46a2      	mov	sl, r4
 8006574:	e7d2      	b.n	800651c <_svfiprintf_r+0x9c>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	1d19      	adds	r1, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	9103      	str	r1, [sp, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bfbb      	ittet	lt
 8006582:	425b      	neglt	r3, r3
 8006584:	f042 0202 	orrlt.w	r2, r2, #2
 8006588:	9307      	strge	r3, [sp, #28]
 800658a:	9307      	strlt	r3, [sp, #28]
 800658c:	bfb8      	it	lt
 800658e:	9204      	strlt	r2, [sp, #16]
 8006590:	7823      	ldrb	r3, [r4, #0]
 8006592:	2b2e      	cmp	r3, #46	; 0x2e
 8006594:	d10c      	bne.n	80065b0 <_svfiprintf_r+0x130>
 8006596:	7863      	ldrb	r3, [r4, #1]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d134      	bne.n	8006606 <_svfiprintf_r+0x186>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	9203      	str	r2, [sp, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfb8      	it	lt
 80065a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065ac:	3402      	adds	r4, #2
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006678 <_svfiprintf_r+0x1f8>
 80065b4:	7821      	ldrb	r1, [r4, #0]
 80065b6:	2203      	movs	r2, #3
 80065b8:	4650      	mov	r0, sl
 80065ba:	f7f9 fe31 	bl	8000220 <memchr>
 80065be:	b138      	cbz	r0, 80065d0 <_svfiprintf_r+0x150>
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	eba0 000a 	sub.w	r0, r0, sl
 80065c6:	2240      	movs	r2, #64	; 0x40
 80065c8:	4082      	lsls	r2, r0
 80065ca:	4313      	orrs	r3, r2
 80065cc:	3401      	adds	r4, #1
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d4:	4825      	ldr	r0, [pc, #148]	; (800666c <_svfiprintf_r+0x1ec>)
 80065d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065da:	2206      	movs	r2, #6
 80065dc:	f7f9 fe20 	bl	8000220 <memchr>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d038      	beq.n	8006656 <_svfiprintf_r+0x1d6>
 80065e4:	4b22      	ldr	r3, [pc, #136]	; (8006670 <_svfiprintf_r+0x1f0>)
 80065e6:	bb1b      	cbnz	r3, 8006630 <_svfiprintf_r+0x1b0>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	3307      	adds	r3, #7
 80065ec:	f023 0307 	bic.w	r3, r3, #7
 80065f0:	3308      	adds	r3, #8
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f6:	4433      	add	r3, r6
 80065f8:	9309      	str	r3, [sp, #36]	; 0x24
 80065fa:	e768      	b.n	80064ce <_svfiprintf_r+0x4e>
 80065fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006600:	460c      	mov	r4, r1
 8006602:	2001      	movs	r0, #1
 8006604:	e7a6      	b.n	8006554 <_svfiprintf_r+0xd4>
 8006606:	2300      	movs	r3, #0
 8006608:	3401      	adds	r4, #1
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 0c0a 	mov.w	ip, #10
 8006612:	4620      	mov	r0, r4
 8006614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006618:	3a30      	subs	r2, #48	; 0x30
 800661a:	2a09      	cmp	r2, #9
 800661c:	d903      	bls.n	8006626 <_svfiprintf_r+0x1a6>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0c6      	beq.n	80065b0 <_svfiprintf_r+0x130>
 8006622:	9105      	str	r1, [sp, #20]
 8006624:	e7c4      	b.n	80065b0 <_svfiprintf_r+0x130>
 8006626:	fb0c 2101 	mla	r1, ip, r1, r2
 800662a:	4604      	mov	r4, r0
 800662c:	2301      	movs	r3, #1
 800662e:	e7f0      	b.n	8006612 <_svfiprintf_r+0x192>
 8006630:	ab03      	add	r3, sp, #12
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	462a      	mov	r2, r5
 8006636:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <_svfiprintf_r+0x1f4>)
 8006638:	a904      	add	r1, sp, #16
 800663a:	4638      	mov	r0, r7
 800663c:	f3af 8000 	nop.w
 8006640:	1c42      	adds	r2, r0, #1
 8006642:	4606      	mov	r6, r0
 8006644:	d1d6      	bne.n	80065f4 <_svfiprintf_r+0x174>
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	065b      	lsls	r3, r3, #25
 800664a:	f53f af2d 	bmi.w	80064a8 <_svfiprintf_r+0x28>
 800664e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006650:	b01d      	add	sp, #116	; 0x74
 8006652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_svfiprintf_r+0x1f4>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4638      	mov	r0, r7
 8006662:	f000 f919 	bl	8006898 <_printf_i>
 8006666:	e7eb      	b.n	8006640 <_svfiprintf_r+0x1c0>
 8006668:	08006da1 	.word	0x08006da1
 800666c:	08006dab 	.word	0x08006dab
 8006670:	00000000 	.word	0x00000000
 8006674:	080063cd 	.word	0x080063cd
 8006678:	08006da7 	.word	0x08006da7

0800667c <sbrk_aligned>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4e0e      	ldr	r6, [pc, #56]	; (80066b8 <sbrk_aligned+0x3c>)
 8006680:	460c      	mov	r4, r1
 8006682:	6831      	ldr	r1, [r6, #0]
 8006684:	4605      	mov	r5, r0
 8006686:	b911      	cbnz	r1, 800668e <sbrk_aligned+0x12>
 8006688:	f000 fa7e 	bl	8006b88 <_sbrk_r>
 800668c:	6030      	str	r0, [r6, #0]
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 fa79 	bl	8006b88 <_sbrk_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d00a      	beq.n	80066b0 <sbrk_aligned+0x34>
 800669a:	1cc4      	adds	r4, r0, #3
 800669c:	f024 0403 	bic.w	r4, r4, #3
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d007      	beq.n	80066b4 <sbrk_aligned+0x38>
 80066a4:	1a21      	subs	r1, r4, r0
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 fa6e 	bl	8006b88 <_sbrk_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d101      	bne.n	80066b4 <sbrk_aligned+0x38>
 80066b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066b4:	4620      	mov	r0, r4
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	20000640 	.word	0x20000640

080066bc <_malloc_r>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	1ccd      	adds	r5, r1, #3
 80066c2:	f025 0503 	bic.w	r5, r5, #3
 80066c6:	3508      	adds	r5, #8
 80066c8:	2d0c      	cmp	r5, #12
 80066ca:	bf38      	it	cc
 80066cc:	250c      	movcc	r5, #12
 80066ce:	2d00      	cmp	r5, #0
 80066d0:	4607      	mov	r7, r0
 80066d2:	db01      	blt.n	80066d8 <_malloc_r+0x1c>
 80066d4:	42a9      	cmp	r1, r5
 80066d6:	d905      	bls.n	80066e4 <_malloc_r+0x28>
 80066d8:	230c      	movs	r3, #12
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	2600      	movs	r6, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067b8 <_malloc_r+0xfc>
 80066e8:	f000 f9f8 	bl	8006adc <__malloc_lock>
 80066ec:	f8d8 3000 	ldr.w	r3, [r8]
 80066f0:	461c      	mov	r4, r3
 80066f2:	bb5c      	cbnz	r4, 800674c <_malloc_r+0x90>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	f7ff ffc0 	bl	800667c <sbrk_aligned>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	4604      	mov	r4, r0
 8006700:	d155      	bne.n	80067ae <_malloc_r+0xf2>
 8006702:	f8d8 4000 	ldr.w	r4, [r8]
 8006706:	4626      	mov	r6, r4
 8006708:	2e00      	cmp	r6, #0
 800670a:	d145      	bne.n	8006798 <_malloc_r+0xdc>
 800670c:	2c00      	cmp	r4, #0
 800670e:	d048      	beq.n	80067a2 <_malloc_r+0xe6>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	4631      	mov	r1, r6
 8006714:	4638      	mov	r0, r7
 8006716:	eb04 0903 	add.w	r9, r4, r3
 800671a:	f000 fa35 	bl	8006b88 <_sbrk_r>
 800671e:	4581      	cmp	r9, r0
 8006720:	d13f      	bne.n	80067a2 <_malloc_r+0xe6>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	1a6d      	subs	r5, r5, r1
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa7 	bl	800667c <sbrk_aligned>
 800672e:	3001      	adds	r0, #1
 8006730:	d037      	beq.n	80067a2 <_malloc_r+0xe6>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	442b      	add	r3, r5
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	f8d8 3000 	ldr.w	r3, [r8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d038      	beq.n	80067b2 <_malloc_r+0xf6>
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	42a2      	cmp	r2, r4
 8006744:	d12b      	bne.n	800679e <_malloc_r+0xe2>
 8006746:	2200      	movs	r2, #0
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e00f      	b.n	800676c <_malloc_r+0xb0>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	1b52      	subs	r2, r2, r5
 8006750:	d41f      	bmi.n	8006792 <_malloc_r+0xd6>
 8006752:	2a0b      	cmp	r2, #11
 8006754:	d917      	bls.n	8006786 <_malloc_r+0xca>
 8006756:	1961      	adds	r1, r4, r5
 8006758:	42a3      	cmp	r3, r4
 800675a:	6025      	str	r5, [r4, #0]
 800675c:	bf18      	it	ne
 800675e:	6059      	strne	r1, [r3, #4]
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	bf08      	it	eq
 8006764:	f8c8 1000 	streq.w	r1, [r8]
 8006768:	5162      	str	r2, [r4, r5]
 800676a:	604b      	str	r3, [r1, #4]
 800676c:	4638      	mov	r0, r7
 800676e:	f104 060b 	add.w	r6, r4, #11
 8006772:	f000 f9b9 	bl	8006ae8 <__malloc_unlock>
 8006776:	f026 0607 	bic.w	r6, r6, #7
 800677a:	1d23      	adds	r3, r4, #4
 800677c:	1af2      	subs	r2, r6, r3
 800677e:	d0ae      	beq.n	80066de <_malloc_r+0x22>
 8006780:	1b9b      	subs	r3, r3, r6
 8006782:	50a3      	str	r3, [r4, r2]
 8006784:	e7ab      	b.n	80066de <_malloc_r+0x22>
 8006786:	42a3      	cmp	r3, r4
 8006788:	6862      	ldr	r2, [r4, #4]
 800678a:	d1dd      	bne.n	8006748 <_malloc_r+0x8c>
 800678c:	f8c8 2000 	str.w	r2, [r8]
 8006790:	e7ec      	b.n	800676c <_malloc_r+0xb0>
 8006792:	4623      	mov	r3, r4
 8006794:	6864      	ldr	r4, [r4, #4]
 8006796:	e7ac      	b.n	80066f2 <_malloc_r+0x36>
 8006798:	4634      	mov	r4, r6
 800679a:	6876      	ldr	r6, [r6, #4]
 800679c:	e7b4      	b.n	8006708 <_malloc_r+0x4c>
 800679e:	4613      	mov	r3, r2
 80067a0:	e7cc      	b.n	800673c <_malloc_r+0x80>
 80067a2:	230c      	movs	r3, #12
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4638      	mov	r0, r7
 80067a8:	f000 f99e 	bl	8006ae8 <__malloc_unlock>
 80067ac:	e797      	b.n	80066de <_malloc_r+0x22>
 80067ae:	6025      	str	r5, [r4, #0]
 80067b0:	e7dc      	b.n	800676c <_malloc_r+0xb0>
 80067b2:	605b      	str	r3, [r3, #4]
 80067b4:	deff      	udf	#255	; 0xff
 80067b6:	bf00      	nop
 80067b8:	2000063c 	.word	0x2000063c

080067bc <_printf_common>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	4616      	mov	r6, r2
 80067c2:	4699      	mov	r9, r3
 80067c4:	688a      	ldr	r2, [r1, #8]
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	bfb8      	it	lt
 80067d0:	4613      	movlt	r3, r2
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d8:	4607      	mov	r7, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b10a      	cbz	r2, 80067e2 <_printf_common+0x26>
 80067de:	3301      	adds	r3, #1
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	0699      	lsls	r1, r3, #26
 80067e6:	bf42      	ittt	mi
 80067e8:	6833      	ldrmi	r3, [r6, #0]
 80067ea:	3302      	addmi	r3, #2
 80067ec:	6033      	strmi	r3, [r6, #0]
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	f015 0506 	ands.w	r5, r5, #6
 80067f4:	d106      	bne.n	8006804 <_printf_common+0x48>
 80067f6:	f104 0a19 	add.w	sl, r4, #25
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	6832      	ldr	r2, [r6, #0]
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	42ab      	cmp	r3, r5
 8006802:	dc26      	bgt.n	8006852 <_printf_common+0x96>
 8006804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006808:	1e13      	subs	r3, r2, #0
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	bf18      	it	ne
 800680e:	2301      	movne	r3, #1
 8006810:	0692      	lsls	r2, r2, #26
 8006812:	d42b      	bmi.n	800686c <_printf_common+0xb0>
 8006814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006818:	4649      	mov	r1, r9
 800681a:	4638      	mov	r0, r7
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d01e      	beq.n	8006860 <_printf_common+0xa4>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	f003 0306 	and.w	r3, r3, #6
 800682a:	2b04      	cmp	r3, #4
 800682c:	bf02      	ittt	eq
 800682e:	68e5      	ldreq	r5, [r4, #12]
 8006830:	6833      	ldreq	r3, [r6, #0]
 8006832:	1aed      	subeq	r5, r5, r3
 8006834:	68a3      	ldr	r3, [r4, #8]
 8006836:	bf0c      	ite	eq
 8006838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800683c:	2500      	movne	r5, #0
 800683e:	4293      	cmp	r3, r2
 8006840:	bfc4      	itt	gt
 8006842:	1a9b      	subgt	r3, r3, r2
 8006844:	18ed      	addgt	r5, r5, r3
 8006846:	2600      	movs	r6, #0
 8006848:	341a      	adds	r4, #26
 800684a:	42b5      	cmp	r5, r6
 800684c:	d11a      	bne.n	8006884 <_printf_common+0xc8>
 800684e:	2000      	movs	r0, #0
 8006850:	e008      	b.n	8006864 <_printf_common+0xa8>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4649      	mov	r1, r9
 8006858:	4638      	mov	r0, r7
 800685a:	47c0      	blx	r8
 800685c:	3001      	adds	r0, #1
 800685e:	d103      	bne.n	8006868 <_printf_common+0xac>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	3501      	adds	r5, #1
 800686a:	e7c6      	b.n	80067fa <_printf_common+0x3e>
 800686c:	18e1      	adds	r1, r4, r3
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	2030      	movs	r0, #48	; 0x30
 8006872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006876:	4422      	add	r2, r4
 8006878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800687c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006880:	3302      	adds	r3, #2
 8006882:	e7c7      	b.n	8006814 <_printf_common+0x58>
 8006884:	2301      	movs	r3, #1
 8006886:	4622      	mov	r2, r4
 8006888:	4649      	mov	r1, r9
 800688a:	4638      	mov	r0, r7
 800688c:	47c0      	blx	r8
 800688e:	3001      	adds	r0, #1
 8006890:	d0e6      	beq.n	8006860 <_printf_common+0xa4>
 8006892:	3601      	adds	r6, #1
 8006894:	e7d9      	b.n	800684a <_printf_common+0x8e>
	...

08006898 <_printf_i>:
 8006898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	7e0f      	ldrb	r7, [r1, #24]
 800689e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068a0:	2f78      	cmp	r7, #120	; 0x78
 80068a2:	4691      	mov	r9, r2
 80068a4:	4680      	mov	r8, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	469a      	mov	sl, r3
 80068aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068ae:	d807      	bhi.n	80068c0 <_printf_i+0x28>
 80068b0:	2f62      	cmp	r7, #98	; 0x62
 80068b2:	d80a      	bhi.n	80068ca <_printf_i+0x32>
 80068b4:	2f00      	cmp	r7, #0
 80068b6:	f000 80d4 	beq.w	8006a62 <_printf_i+0x1ca>
 80068ba:	2f58      	cmp	r7, #88	; 0x58
 80068bc:	f000 80c0 	beq.w	8006a40 <_printf_i+0x1a8>
 80068c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c8:	e03a      	b.n	8006940 <_printf_i+0xa8>
 80068ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ce:	2b15      	cmp	r3, #21
 80068d0:	d8f6      	bhi.n	80068c0 <_printf_i+0x28>
 80068d2:	a101      	add	r1, pc, #4	; (adr r1, 80068d8 <_printf_i+0x40>)
 80068d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006945 	.word	0x08006945
 80068e0:	080068c1 	.word	0x080068c1
 80068e4:	080068c1 	.word	0x080068c1
 80068e8:	080068c1 	.word	0x080068c1
 80068ec:	080068c1 	.word	0x080068c1
 80068f0:	08006945 	.word	0x08006945
 80068f4:	080068c1 	.word	0x080068c1
 80068f8:	080068c1 	.word	0x080068c1
 80068fc:	080068c1 	.word	0x080068c1
 8006900:	080068c1 	.word	0x080068c1
 8006904:	08006a49 	.word	0x08006a49
 8006908:	08006971 	.word	0x08006971
 800690c:	08006a03 	.word	0x08006a03
 8006910:	080068c1 	.word	0x080068c1
 8006914:	080068c1 	.word	0x080068c1
 8006918:	08006a6b 	.word	0x08006a6b
 800691c:	080068c1 	.word	0x080068c1
 8006920:	08006971 	.word	0x08006971
 8006924:	080068c1 	.word	0x080068c1
 8006928:	080068c1 	.word	0x080068c1
 800692c:	08006a0b 	.word	0x08006a0b
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	602a      	str	r2, [r5, #0]
 8006938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006940:	2301      	movs	r3, #1
 8006942:	e09f      	b.n	8006a84 <_printf_i+0x1ec>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	682b      	ldr	r3, [r5, #0]
 8006948:	0607      	lsls	r7, r0, #24
 800694a:	f103 0104 	add.w	r1, r3, #4
 800694e:	6029      	str	r1, [r5, #0]
 8006950:	d501      	bpl.n	8006956 <_printf_i+0xbe>
 8006952:	681e      	ldr	r6, [r3, #0]
 8006954:	e003      	b.n	800695e <_printf_i+0xc6>
 8006956:	0646      	lsls	r6, r0, #25
 8006958:	d5fb      	bpl.n	8006952 <_printf_i+0xba>
 800695a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800695e:	2e00      	cmp	r6, #0
 8006960:	da03      	bge.n	800696a <_printf_i+0xd2>
 8006962:	232d      	movs	r3, #45	; 0x2d
 8006964:	4276      	negs	r6, r6
 8006966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696a:	485a      	ldr	r0, [pc, #360]	; (8006ad4 <_printf_i+0x23c>)
 800696c:	230a      	movs	r3, #10
 800696e:	e012      	b.n	8006996 <_printf_i+0xfe>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	6820      	ldr	r0, [r4, #0]
 8006974:	1d19      	adds	r1, r3, #4
 8006976:	6029      	str	r1, [r5, #0]
 8006978:	0605      	lsls	r5, r0, #24
 800697a:	d501      	bpl.n	8006980 <_printf_i+0xe8>
 800697c:	681e      	ldr	r6, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0xee>
 8006980:	0641      	lsls	r1, r0, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0xe4>
 8006984:	881e      	ldrh	r6, [r3, #0]
 8006986:	4853      	ldr	r0, [pc, #332]	; (8006ad4 <_printf_i+0x23c>)
 8006988:	2f6f      	cmp	r7, #111	; 0x6f
 800698a:	bf0c      	ite	eq
 800698c:	2308      	moveq	r3, #8
 800698e:	230a      	movne	r3, #10
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006996:	6865      	ldr	r5, [r4, #4]
 8006998:	60a5      	str	r5, [r4, #8]
 800699a:	2d00      	cmp	r5, #0
 800699c:	bfa2      	ittt	ge
 800699e:	6821      	ldrge	r1, [r4, #0]
 80069a0:	f021 0104 	bicge.w	r1, r1, #4
 80069a4:	6021      	strge	r1, [r4, #0]
 80069a6:	b90e      	cbnz	r6, 80069ac <_printf_i+0x114>
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	d04b      	beq.n	8006a44 <_printf_i+0x1ac>
 80069ac:	4615      	mov	r5, r2
 80069ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80069b2:	fb03 6711 	mls	r7, r3, r1, r6
 80069b6:	5dc7      	ldrb	r7, [r0, r7]
 80069b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069bc:	4637      	mov	r7, r6
 80069be:	42bb      	cmp	r3, r7
 80069c0:	460e      	mov	r6, r1
 80069c2:	d9f4      	bls.n	80069ae <_printf_i+0x116>
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d10b      	bne.n	80069e0 <_printf_i+0x148>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07de      	lsls	r6, r3, #31
 80069cc:	d508      	bpl.n	80069e0 <_printf_i+0x148>
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	bfde      	ittt	le
 80069d6:	2330      	movle	r3, #48	; 0x30
 80069d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069e0:	1b52      	subs	r2, r2, r5
 80069e2:	6122      	str	r2, [r4, #16]
 80069e4:	f8cd a000 	str.w	sl, [sp]
 80069e8:	464b      	mov	r3, r9
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	4621      	mov	r1, r4
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7ff fee4 	bl	80067bc <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d14a      	bne.n	8006a8e <_printf_i+0x1f6>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069fc:	b004      	add	sp, #16
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	f043 0320 	orr.w	r3, r3, #32
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	4833      	ldr	r0, [pc, #204]	; (8006ad8 <_printf_i+0x240>)
 8006a0c:	2778      	movs	r7, #120	; 0x78
 8006a0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	6829      	ldr	r1, [r5, #0]
 8006a16:	061f      	lsls	r7, r3, #24
 8006a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a1c:	d402      	bmi.n	8006a24 <_printf_i+0x18c>
 8006a1e:	065f      	lsls	r7, r3, #25
 8006a20:	bf48      	it	mi
 8006a22:	b2b6      	uxthmi	r6, r6
 8006a24:	07df      	lsls	r7, r3, #31
 8006a26:	bf48      	it	mi
 8006a28:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2c:	6029      	str	r1, [r5, #0]
 8006a2e:	bf48      	it	mi
 8006a30:	6023      	strmi	r3, [r4, #0]
 8006a32:	b91e      	cbnz	r6, 8006a3c <_printf_i+0x1a4>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f023 0320 	bic.w	r3, r3, #32
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	e7a7      	b.n	8006990 <_printf_i+0xf8>
 8006a40:	4824      	ldr	r0, [pc, #144]	; (8006ad4 <_printf_i+0x23c>)
 8006a42:	e7e4      	b.n	8006a0e <_printf_i+0x176>
 8006a44:	4615      	mov	r5, r2
 8006a46:	e7bd      	b.n	80069c4 <_printf_i+0x12c>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	6826      	ldr	r6, [r4, #0]
 8006a4c:	6961      	ldr	r1, [r4, #20]
 8006a4e:	1d18      	adds	r0, r3, #4
 8006a50:	6028      	str	r0, [r5, #0]
 8006a52:	0635      	lsls	r5, r6, #24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0x1c4>
 8006a58:	6019      	str	r1, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0x1ca>
 8006a5c:	0670      	lsls	r0, r6, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0x1c0>
 8006a60:	8019      	strh	r1, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	4615      	mov	r5, r2
 8006a68:	e7bc      	b.n	80069e4 <_printf_i+0x14c>
 8006a6a:	682b      	ldr	r3, [r5, #0]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	681d      	ldr	r5, [r3, #0]
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7f9 fbd2 	bl	8000220 <memchr>
 8006a7c:	b108      	cbz	r0, 8006a82 <_printf_i+0x1ea>
 8006a7e:	1b40      	subs	r0, r0, r5
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8c:	e7aa      	b.n	80069e4 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ad      	beq.n	80069f8 <_printf_i+0x160>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d413      	bmi.n	8006aca <_printf_i+0x232>
 8006aa2:	68e0      	ldr	r0, [r4, #12]
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	bfb8      	it	lt
 8006aaa:	4618      	movlt	r0, r3
 8006aac:	e7a6      	b.n	80069fc <_printf_i+0x164>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d09d      	beq.n	80069f8 <_printf_i+0x160>
 8006abc:	3501      	adds	r5, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	1a5b      	subs	r3, r3, r1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dcf2      	bgt.n	8006aae <_printf_i+0x216>
 8006ac8:	e7eb      	b.n	8006aa2 <_printf_i+0x20a>
 8006aca:	2500      	movs	r5, #0
 8006acc:	f104 0619 	add.w	r6, r4, #25
 8006ad0:	e7f5      	b.n	8006abe <_printf_i+0x226>
 8006ad2:	bf00      	nop
 8006ad4:	08006db2 	.word	0x08006db2
 8006ad8:	08006dc3 	.word	0x08006dc3

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f7ff bc73 	b.w	80063c8 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20000638 	.word	0x20000638

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f7ff bc6e 	b.w	80063ca <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20000638 	.word	0x20000638

08006af4 <_realloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	4680      	mov	r8, r0
 8006afa:	4614      	mov	r4, r2
 8006afc:	460e      	mov	r6, r1
 8006afe:	b921      	cbnz	r1, 8006b0a <_realloc_r+0x16>
 8006b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4611      	mov	r1, r2
 8006b06:	f7ff bdd9 	b.w	80066bc <_malloc_r>
 8006b0a:	b92a      	cbnz	r2, 8006b18 <_realloc_r+0x24>
 8006b0c:	f000 f85a 	bl	8006bc4 <_free_r>
 8006b10:	4625      	mov	r5, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	f000 f8a0 	bl	8006c5c <_malloc_usable_size_r>
 8006b1c:	4284      	cmp	r4, r0
 8006b1e:	4607      	mov	r7, r0
 8006b20:	d802      	bhi.n	8006b28 <_realloc_r+0x34>
 8006b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b26:	d812      	bhi.n	8006b4e <_realloc_r+0x5a>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f7ff fdc6 	bl	80066bc <_malloc_r>
 8006b30:	4605      	mov	r5, r0
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d0ed      	beq.n	8006b12 <_realloc_r+0x1e>
 8006b36:	42bc      	cmp	r4, r7
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	bf28      	it	cs
 8006b3e:	463a      	movcs	r2, r7
 8006b40:	f000 f832 	bl	8006ba8 <memcpy>
 8006b44:	4631      	mov	r1, r6
 8006b46:	4640      	mov	r0, r8
 8006b48:	f000 f83c 	bl	8006bc4 <_free_r>
 8006b4c:	e7e1      	b.n	8006b12 <_realloc_r+0x1e>
 8006b4e:	4635      	mov	r5, r6
 8006b50:	e7df      	b.n	8006b12 <_realloc_r+0x1e>

08006b52 <memmove>:
 8006b52:	4288      	cmp	r0, r1
 8006b54:	b510      	push	{r4, lr}
 8006b56:	eb01 0402 	add.w	r4, r1, r2
 8006b5a:	d902      	bls.n	8006b62 <memmove+0x10>
 8006b5c:	4284      	cmp	r4, r0
 8006b5e:	4623      	mov	r3, r4
 8006b60:	d807      	bhi.n	8006b72 <memmove+0x20>
 8006b62:	1e43      	subs	r3, r0, #1
 8006b64:	42a1      	cmp	r1, r4
 8006b66:	d008      	beq.n	8006b7a <memmove+0x28>
 8006b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b70:	e7f8      	b.n	8006b64 <memmove+0x12>
 8006b72:	4402      	add	r2, r0
 8006b74:	4601      	mov	r1, r0
 8006b76:	428a      	cmp	r2, r1
 8006b78:	d100      	bne.n	8006b7c <memmove+0x2a>
 8006b7a:	bd10      	pop	{r4, pc}
 8006b7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b84:	e7f7      	b.n	8006b76 <memmove+0x24>
	...

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	; (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fa fcae 	bl	80014f4 <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	20000644 	.word	0x20000644

08006ba8 <memcpy>:
 8006ba8:	440a      	add	r2, r1
 8006baa:	4291      	cmp	r1, r2
 8006bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bb0:	d100      	bne.n	8006bb4 <memcpy+0xc>
 8006bb2:	4770      	bx	lr
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	d1f9      	bne.n	8006bb6 <memcpy+0xe>
 8006bc2:	bd10      	pop	{r4, pc}

08006bc4 <_free_r>:
 8006bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	d044      	beq.n	8006c54 <_free_r+0x90>
 8006bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bce:	9001      	str	r0, [sp, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd6:	bfb8      	it	lt
 8006bd8:	18e4      	addlt	r4, r4, r3
 8006bda:	f7ff ff7f 	bl	8006adc <__malloc_lock>
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <_free_r+0x94>)
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	b933      	cbnz	r3, 8006bf4 <_free_r+0x30>
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	b003      	add	sp, #12
 8006bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf0:	f7ff bf7a 	b.w	8006ae8 <__malloc_unlock>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d908      	bls.n	8006c0a <_free_r+0x46>
 8006bf8:	6825      	ldr	r5, [r4, #0]
 8006bfa:	1961      	adds	r1, r4, r5
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	bf01      	itttt	eq
 8006c00:	6819      	ldreq	r1, [r3, #0]
 8006c02:	685b      	ldreq	r3, [r3, #4]
 8006c04:	1949      	addeq	r1, r1, r5
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	e7ed      	b.n	8006be6 <_free_r+0x22>
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b10b      	cbz	r3, 8006c14 <_free_r+0x50>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d9fa      	bls.n	8006c0a <_free_r+0x46>
 8006c14:	6811      	ldr	r1, [r2, #0]
 8006c16:	1855      	adds	r5, r2, r1
 8006c18:	42a5      	cmp	r5, r4
 8006c1a:	d10b      	bne.n	8006c34 <_free_r+0x70>
 8006c1c:	6824      	ldr	r4, [r4, #0]
 8006c1e:	4421      	add	r1, r4
 8006c20:	1854      	adds	r4, r2, r1
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	d1e0      	bne.n	8006bea <_free_r+0x26>
 8006c28:	681c      	ldr	r4, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6053      	str	r3, [r2, #4]
 8006c2e:	440c      	add	r4, r1
 8006c30:	6014      	str	r4, [r2, #0]
 8006c32:	e7da      	b.n	8006bea <_free_r+0x26>
 8006c34:	d902      	bls.n	8006c3c <_free_r+0x78>
 8006c36:	230c      	movs	r3, #12
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	e7d6      	b.n	8006bea <_free_r+0x26>
 8006c3c:	6825      	ldr	r5, [r4, #0]
 8006c3e:	1961      	adds	r1, r4, r5
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf04      	itt	eq
 8006c44:	6819      	ldreq	r1, [r3, #0]
 8006c46:	685b      	ldreq	r3, [r3, #4]
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	bf04      	itt	eq
 8006c4c:	1949      	addeq	r1, r1, r5
 8006c4e:	6021      	streq	r1, [r4, #0]
 8006c50:	6054      	str	r4, [r2, #4]
 8006c52:	e7ca      	b.n	8006bea <_free_r+0x26>
 8006c54:	b003      	add	sp, #12
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	2000063c 	.word	0x2000063c

08006c5c <_malloc_usable_size_r>:
 8006c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c60:	1f18      	subs	r0, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfbc      	itt	lt
 8006c66:	580b      	ldrlt	r3, [r1, r0]
 8006c68:	18c0      	addlt	r0, r0, r3
 8006c6a:	4770      	bx	lr

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
