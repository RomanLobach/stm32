
F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007824  08007824  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007824  08007824  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007824  08007824  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800782c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000370  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014565  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002855  00000000  00000000  00034644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  00036ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e57  00000000  00000000  000380c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b94f  00000000  00000000  00038f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016de5  00000000  00000000  0005486e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a64e7  00000000  00000000  0006b653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000531c  00000000  00000000  00111b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00116e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800769c 	.word	0x0800769c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800769c 	.word	0x0800769c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fec3 	bl	8001010 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f82d 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f9d7 	bl	8000640 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000292:	f000 f8fb 	bl	800048c <MX_TIM16_Init>
  MX_I2C1_Init();
 8000296:	f000 f879 	bl	800038c <MX_I2C1_Init>
  MX_SPI1_Init();
 800029a:	f000 f8b7 	bl	800040c <MX_SPI1_Init>
  MX_TIM17_Init();
 800029e:	f000 f91f 	bl	80004e0 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 f997 	bl	80005d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setModeLed();
 80002a6:	f000 fa6d 	bl	8000784 <setModeLed>
  while(1)
  {
	  int delayTime = (6 - USER_MODE) * 100;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <main+0x60>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f1c3 0306 	rsb	r3, r3, #6
 80002b2:	2264      	movs	r2, #100	; 0x64
 80002b4:	fb02 f303 	mul.w	r3, r2, r3
 80002b8:	607b      	str	r3, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2108      	movs	r1, #8
 80002be:	4809      	ldr	r0, [pc, #36]	; (80002e4 <main+0x64>)
 80002c0:	f001 fa50 	bl	8001764 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 ff08 	bl	80010dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2108      	movs	r1, #8
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <main+0x64>)
 80002d2:	f001 fa47 	bl	8001764 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 feff 	bl	80010dc <HAL_Delay>
  {
 80002de:	e7e4      	b.n	80002aa <main+0x2a>
 80002e0:	20000000 	.word	0x20000000
 80002e4:	48000400 	.word	0x48000400

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b096      	sub	sp, #88	; 0x58
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f006 fd4c 	bl	8006d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 031c 	add.w	r3, r7, #28
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
 800031a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031c:	2302      	movs	r3, #2
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000324:	2310      	movs	r3, #16
 8000326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000328:	2300      	movs	r3, #0
 800032a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000330:	4618      	mov	r0, r3
 8000332:	f002 f8f3 	bl	800251c <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 fbfc 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000344:	2300      	movs	r3, #0
 8000346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 f91c 	bl	8003598 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 fbe7 	bl	8000b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800036a:	2320      	movs	r3, #32
 800036c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f003 fb45 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000380:	f000 fbda 	bl	8000b38 <Error_Handler>
  }
}
 8000384:	bf00      	nop
 8000386:	3758      	adds	r7, #88	; 0x58
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_I2C1_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <MX_I2C1_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MX_I2C1_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <MX_I2C1_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_I2C1_Init+0x74>)
 800039e:	2224      	movs	r2, #36	; 0x24
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <MX_I2C1_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	480e      	ldr	r0, [pc, #56]	; (8000400 <MX_I2C1_Init+0x74>)
 80003c8:	f001 f9e4 	bl	8001794 <HAL_I2C_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 fbb1 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <MX_I2C1_Init+0x74>)
 80003da:	f002 f808 	bl	80023ee <HAL_I2CEx_ConfigAnalogFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 fba8 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_I2C1_Init+0x74>)
 80003ec:	f002 f84a 	bl	8002484 <HAL_I2CEx_ConfigDigitalFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 fb9f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000088 	.word	0x20000088
 8000404:	40005400 	.word	0x40005400
 8000408:	2000090e 	.word	0x2000090e

0800040c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_SPI1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_SPI1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_SPI1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_SPI1_Init+0x74>)
 8000424:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <MX_SPI1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_SPI1_Init+0x74>)
 8000438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800043c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_SPI1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_SPI1_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <MX_SPI1_Init+0x74>)
 8000464:	f003 fbf4 	bl	8003c50 <HAL_SPI_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800046e:	f000 fb63 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  HAL_SPI_Receive_IT(&hspi1, (uint8_t*)rx_buffer, 1);
 8000472:	2201      	movs	r2, #1
 8000474:	4904      	ldr	r1, [pc, #16]	; (8000488 <MX_SPI1_Init+0x7c>)
 8000476:	4802      	ldr	r0, [pc, #8]	; (8000480 <MX_SPI1_Init+0x74>)
 8000478:	f003 fc8e 	bl	8003d98 <HAL_SPI_Receive_IT>
  /* USER CODE END SPI1_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000dc 	.word	0x200000dc
 8000484:	40013000 	.word	0x40013000
 8000488:	20000260 	.word	0x20000260

0800048c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_TIM16_Init+0x4c>)
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_TIM16_Init+0x50>)
 8000494:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_TIM16_Init+0x4c>)
 8000498:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800049c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004be:	f004 fa6f 	bl	80049a0 <HAL_TIM_Base_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80004c8:	f000 fb36 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <MX_TIM16_Init+0x4c>)
 80004ce:	f004 fabf 	bl	8004a50 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000140 	.word	0x20000140
 80004dc:	40014400 	.word	0x40014400

080004e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	; 0x48
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	222c      	movs	r2, #44	; 0x2c
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f006 fc47 	bl	8006d94 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <MX_TIM17_Init+0xec>)
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <MX_TIM17_Init+0xf0>)
 800050a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <MX_TIM17_Init+0xec>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_TIM17_Init+0xec>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000518:	4b2c      	ldr	r3, [pc, #176]	; (80005cc <MX_TIM17_Init+0xec>)
 800051a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800051e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <MX_TIM17_Init+0xec>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000526:	4b29      	ldr	r3, [pc, #164]	; (80005cc <MX_TIM17_Init+0xec>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_TIM17_Init+0xec>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000532:	4826      	ldr	r0, [pc, #152]	; (80005cc <MX_TIM17_Init+0xec>)
 8000534:	f004 fa34 	bl	80049a0 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800053e:	f000 fafb 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000542:	4822      	ldr	r0, [pc, #136]	; (80005cc <MX_TIM17_Init+0xec>)
 8000544:	f004 fae0 	bl	8004b08 <HAL_TIM_PWM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800054e:	f000 faf3 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000552:	2360      	movs	r3, #96	; 0x60
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	2300      	movs	r3, #0
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800055e:	2300      	movs	r3, #0
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000572:	2200      	movs	r2, #0
 8000574:	4619      	mov	r1, r3
 8000576:	4815      	ldr	r0, [pc, #84]	; (80005cc <MX_TIM17_Init+0xec>)
 8000578:	f004 fc46 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000582:	f000 fad9 	bl	8000b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800059a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <MX_TIM17_Init+0xec>)
 80005ae:	f005 f885 	bl	80056bc <HAL_TIMEx_ConfigBreakDeadTime>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80005b8:	f000 fabe 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <MX_TIM17_Init+0xec>)
 80005be:	f000 fbcd 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80005c2:	bf00      	nop
 80005c4:	3748      	adds	r7, #72	; 0x48
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000018c 	.word	0x2000018c
 80005d0:	40014800 	.word	0x40014800

080005d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_USART2_UART_Init+0x64>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART2_UART_Init+0x60>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_USART2_UART_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART2_UART_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_USART2_UART_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART2_UART_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <MX_USART2_UART_Init+0x60>)
 8000618:	f005 f8e6 	bl	80057e8 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 fa89 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <MX_USART2_UART_Init+0x68>)
 800062a:	4802      	ldr	r0, [pc, #8]	; (8000634 <MX_USART2_UART_Init+0x60>)
 800062c:	f005 f9b4 	bl	8005998 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001d8 	.word	0x200001d8
 8000638:	40004400 	.word	0x40004400
 800063c:	20000260 	.word	0x20000260

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <MX_GPIO_Init+0x114>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <MX_GPIO_Init+0x114>)
 800065c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <MX_GPIO_Init+0x114>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b39      	ldr	r3, [pc, #228]	; (8000754 <MX_GPIO_Init+0x114>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a38      	ldr	r2, [pc, #224]	; (8000754 <MX_GPIO_Init+0x114>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <MX_GPIO_Init+0x114>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <MX_GPIO_Init+0x114>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a32      	ldr	r2, [pc, #200]	; (8000754 <MX_GPIO_Init+0x114>)
 800068c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <MX_GPIO_Init+0x114>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x118>)
 80006a4:	f001 f85e 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	210b      	movs	r1, #11
 80006ac:	482b      	ldr	r0, [pc, #172]	; (800075c <MX_GPIO_Init+0x11c>)
 80006ae:	f001 f859 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f001 f852 	bl	8001764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80006c0:	2302      	movs	r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <MX_GPIO_Init+0x118>)
 80006d8:	f000 feba 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_2_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin;
 80006dc:	230b      	movs	r3, #11
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <MX_GPIO_Init+0x11c>)
 80006f4:	f000 feac 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_3_Pin LED_R_4_Pin LED_R_5_Pin */
  GPIO_InitStruct.Pin = LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin;
 80006f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f000 fe9c 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_SET_Pin;
 8000718:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 fe8e 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000734:	2310      	movs	r3, #16
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_GPIO_Init+0x11c>)
 8000748:	f000 fe82 	bl	8001450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48001400 	.word	0x48001400
 800075c:	48000400 	.word	0x48000400

08000760 <resetModeLed>:

/* USER CODE BEGIN 4 */

//INTERRUP PROCESSING
void resetModeLed(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000764:	2200      	movs	r2, #0
 8000766:	2103      	movs	r1, #3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <resetModeLed+0x20>)
 800076a:	f000 fffb 	bl	8001764 <HAL_GPIO_WritePin>
					GPIOB,
					LED_R_1_Pin|LED_R_2_Pin,
					GPIO_PIN_RESET
				   );
  HAL_GPIO_WritePin(
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 fff4 	bl	8001764 <HAL_GPIO_WritePin>
					GPIOA,
					LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	48000400 	.word	0x48000400

08000784 <setModeLed>:

void setModeLed(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	if(USER_MODE == 1)
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <setModeLed+0x84>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <setModeLed+0x1a>
	{
	  resetModeLed();
 8000790:	f7ff ffe6 	bl	8000760 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	481c      	ldr	r0, [pc, #112]	; (800080c <setModeLed+0x88>)
 800079a:	f000 ffe3 	bl	8001764 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 2)
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <setModeLed+0x84>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d106      	bne.n	80007b4 <setModeLed+0x30>
	{
	  resetModeLed();
 80007a6:	f7ff ffdb 	bl	8000760 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_2_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2102      	movs	r1, #2
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <setModeLed+0x88>)
 80007b0:	f000 ffd8 	bl	8001764 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 3)
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <setModeLed+0x84>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d108      	bne.n	80007ce <setModeLed+0x4a>
	{
	  resetModeLed();
 80007bc:	f7ff ffd0 	bl	8000760 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 ffcb 	bl	8001764 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 4)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <setModeLed+0x84>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d108      	bne.n	80007e8 <setModeLed+0x64>
	{
	  resetModeLed();
 80007d6:	f7ff ffc3 	bl	8000760 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_4_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 ffbe 	bl	8001764 <HAL_GPIO_WritePin>
	}
	if(USER_MODE == 5)
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <setModeLed+0x84>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d108      	bne.n	8000802 <setModeLed+0x7e>
	{
	  resetModeLed();
 80007f0:	f7ff ffb6 	bl	8000760 <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_5_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 ffb1 	bl	8001764 <HAL_GPIO_WritePin>
	}
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000
 800080c:	48000400 	.word	0x48000400

08000810 <UART_Transmit>:

void UART_Transmit(void* data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	char tx_buffer[20];
	sprintf(tx_buffer, "%d", data);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	490b      	ldr	r1, [pc, #44]	; (800084c <UART_Transmit+0x3c>)
 8000820:	4618      	mov	r0, r3
 8000822:	f006 fa0b 	bl	8006c3c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 0xFFFF);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fcd0 	bl	80001d0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	f107 010c 	add.w	r1, r7, #12
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <UART_Transmit+0x40>)
 800083e:	f005 f821 	bl	8005884 <HAL_UART_Transmit>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	080076b4 	.word	0x080076b4
 8000850:	200001d8 	.word	0x200001d8

08000854 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)				//TIM16 interrupt processing
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

	if(htim == &htim16)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a7e      	ldr	r2, [pc, #504]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000860:	4293      	cmp	r3, r2
 8000862:	f040 80f4 	bne.w	8000a4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOB, BTN_R_Pin);
 8000866:	2110      	movs	r1, #16
 8000868:	487c      	ldr	r0, [pc, #496]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800086a:	f000 ff63 	bl	8001734 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b7b      	ldr	r3, [pc, #492]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000874:	801a      	strh	r2, [r3, #0]
		BTN_SET_currentState = HAL_GPIO_ReadPin(GPIOA, BTN_SET_Pin);
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f000 ff59 	bl	8001734 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000888:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOA, BTN_B_Pin);
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 ff4f 	bl	8001734 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800089c:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80008a0:	881a      	ldrh	r2, [r3, #0]
 80008a2:	4b72      	ldr	r3, [pc, #456]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d027      	beq.n	80008fa <HAL_TIM_PeriodElapsedCallback+0xa6>
		{

			++BTN_RED_press_slowCount;
 80008aa:	4b71      	ldr	r3, [pc, #452]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b6f      	ldr	r3, [pc, #444]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008b4:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_press_slowCount > BTN_DEBOUNCE_TIMER)
 80008b6:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b6d      	ldr	r3, [pc, #436]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dd1a      	ble.n	80008fa <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_press_slowCount = 0;
 80008c4:	4b6a      	ldr	r3, [pc, #424]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 80008ca:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d010      	beq.n	80008fa <HAL_TIM_PeriodElapsedCallback+0xa6>
				{
					USER_MODE = USER_MODE + 1;
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a67      	ldr	r2, [pc, #412]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80008e0:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 6)
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d102      	bne.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x9c>
					{

						USER_MODE = 1;
 80008ea:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]

					}


					setModeLed();
 80008f0:	f7ff ff48 	bl	8000784 <setModeLed>
					BTN_RED_isPressed = true;
 80008f4:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 80008fa:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80008fc:	881a      	ldrh	r2, [r3, #0]
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d027      	beq.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x102>
		{

			++BTN_BLUE_press_slowCount;
 8000906:	4b5f      	ldr	r3, [pc, #380]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000910:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_press_slowCount > BTN_DEBOUNCE_TIMER)
 8000912:	4b5c      	ldr	r3, [pc, #368]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	dd1a      	ble.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x102>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_press_slowCount = 0;
 8000920:	4b58      	ldr	r3, [pc, #352]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000922:	2200      	movs	r2, #0
 8000924:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 8000926:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x102>
				{
					USER_MODE = USER_MODE - 1;
 8000934:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 800093c:	6013      	str	r3, [r2, #0]

					if(USER_MODE == 0)
 800093e:	4b4f      	ldr	r3, [pc, #316]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <HAL_TIM_PeriodElapsedCallback+0xf8>
					{

						USER_MODE = 5;
 8000946:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000948:	2205      	movs	r2, #5
 800094a:	601a      	str	r2, [r3, #0]

					}

					setModeLed();
 800094c:	f7ff ff1a 	bl	8000784 <setModeLed>
					BTN_BLUE_isPressed = true;
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on SET btn
		if(BTN_SET_currentState != BTN_SET_initState)
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d01e      	beq.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{

			++BTN_SET_press_slowCount;
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800096c:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_press_slowCount > BTN_DEBOUNCE_TIMER)
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	dd11      	ble.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			{
				//if you are here than RED BTN is pressed
				BTN_SET_press_slowCount = 0;
 800097c:	4b44      	ldr	r3, [pc, #272]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800097e:	2200      	movs	r2, #0
 8000980:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_SET_isPressed == false)
 8000982:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	f083 0301 	eor.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d007      	beq.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{

					UART_Transmit(USER_MODE);
 8000990:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff3b 	bl	8000810 <UART_Transmit>

					BTN_SET_isPressed = true;
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80009a2:	881a      	ldrh	r2, [r3, #0]
 80009a4:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d116      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x186>
 80009ac:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d012      	beq.n	80009da <HAL_TIM_PeriodElapsedCallback+0x186>
		{

			++BTN_RED_release_slowCount;
 80009b4:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80009be:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_release_slowCount > BTN_DEBOUNCE_TIMER)
 80009c0:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd05      	ble.n	80009da <HAL_TIM_PeriodElapsedCallback+0x186>
			{

				BTN_RED_isPressed = false;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
				BTN_RED_release_slowCount = 0;
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d116      	bne.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d012      	beq.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		{

			++BTN_BLUE_release_slowCount;
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80009f8:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_release_slowCount > BTN_DEBOUNCE_TIMER)
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dd05      	ble.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			{

				BTN_BLUE_isPressed = false;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_release_slowCount = 0;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off SET btn
		if(BTN_SET_currentState == BTN_SET_initState && BTN_SET_isPressed == true)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000a16:	881a      	ldrh	r2, [r3, #0]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d116      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d012      	beq.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		{

			++BTN_SET_release_slowCount;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000a32:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_release_slowCount > BTN_DEBOUNCE_TIMER)
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dd05      	ble.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			{

				BTN_SET_isPressed = false;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
				BTN_SET_release_slowCount = 0;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000140 	.word	0x20000140
 8000a5c:	48000400 	.word	0x48000400
 8000a60:	20000274 	.word	0x20000274
 8000a64:	20000284 	.word	0x20000284
 8000a68:	2000027c 	.word	0x2000027c
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000276 	.word	0x20000276
 8000a74:	20000004 	.word	0x20000004
 8000a78:	2000027a 	.word	0x2000027a
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	2000000a 	.word	0x2000000a
 8000a84:	2000027e 	.word	0x2000027e
 8000a88:	20000282 	.word	0x20000282
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20000286 	.word	0x20000286
 8000a94:	2000028a 	.word	0x2000028a
 8000a98:	20000278 	.word	0x20000278
 8000a9c:	20000280 	.word	0x20000280
 8000aa0:	20000288 	.word	0x20000288

08000aa4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <HAL_UART_RxCpltCallback+0x34>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_UART_RxCpltCallback+0x2c>
  {
	//userCode
    USER_MODE = atoi(rx_buffer);
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_UART_RxCpltCallback+0x38>)
 8000ab8:	f006 f8bc 	bl	8006c34 <atoi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_UART_RxCpltCallback+0x3c>)
 8000ac0:	6013      	str	r3, [r2, #0]
    setModeLed();
 8000ac2:	f7ff fe5f 	bl	8000784 <setModeLed>

    //init listening to UART
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4904      	ldr	r1, [pc, #16]	; (8000adc <HAL_UART_RxCpltCallback+0x38>)
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_UART_RxCpltCallback+0x40>)
 8000acc:	f004 ff64 	bl	8005998 <HAL_UART_Receive_IT>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	20000260 	.word	0x20000260
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	200001d8 	.word	0x200001d8

08000ae8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    // Handle received data
    // You can access the received data from the 'receivedData' variable
	if (hspi->Instance == SPI1 && atoi(rx_buffer))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_SPI_RxCpltCallback+0x40>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d112      	bne.n	8000b20 <HAL_SPI_RxCpltCallback+0x38>
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <HAL_SPI_RxCpltCallback+0x44>)
 8000afc:	f006 f89a 	bl	8006c34 <atoi>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00c      	beq.n	8000b20 <HAL_SPI_RxCpltCallback+0x38>
	  {
		//userCode
	    USER_MODE = atoi(rx_buffer);
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <HAL_SPI_RxCpltCallback+0x44>)
 8000b08:	f006 f894 	bl	8006c34 <atoi>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_SPI_RxCpltCallback+0x48>)
 8000b10:	6013      	str	r3, [r2, #0]
	    setModeLed();
 8000b12:	f7ff fe37 	bl	8000784 <setModeLed>

	    HAL_SPI_Receive_IT(&hspi1, (uint8_t*)rx_buffer, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <HAL_SPI_RxCpltCallback+0x44>)
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_SPI_RxCpltCallback+0x4c>)
 8000b1c:	f003 f93c 	bl	8003d98 <HAL_SPI_Receive_IT>
	  }

}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	20000260 	.word	0x20000260
 8000b30:	20000000 	.word	0x20000000
 8000b34:	200000dc 	.word	0x200000dc

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <Error_Handler+0x18>)
 8000b42:	f000 fe0f 	bl	8001764 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b46:	b672      	cpsid	i
}
 8000b48:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  return;
 8000b4a:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	48001400 	.word	0x48001400

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_I2C_MspInit+0x9c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d137      	bne.n	8000c2e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	; 0xc0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <HAL_I2C_MspInit+0xa4>)
 8000bf2:	f000 fc2d 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_I2C_MspInit+0xa0>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 14, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210e      	movs	r1, #14
 8000c12:	201f      	movs	r0, #31
 8000c14:	f000 fb61 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c18:	201f      	movs	r0, #31
 8000c1a:	f000 fb7a 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 13, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210d      	movs	r1, #13
 8000c22:	2020      	movs	r0, #32
 8000c24:	f000 fb59 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f000 fb72 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400

08000c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <HAL_SPI_MspInit+0x8c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d130      	bne.n	8000cc8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_SPI_MspInit+0x90>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23e0      	movs	r3, #224	; 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f000 fbcc 	bl	8001450 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 14, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	210e      	movs	r1, #14
 8000cbc:	2023      	movs	r0, #35	; 0x23
 8000cbe:	f000 fb0c 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cc2:	2023      	movs	r0, #35	; 0x23
 8000cc4:	f000 fb25 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_TIM_Base_MspInit+0x78>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d114      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	210f      	movs	r1, #15
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 fae7 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d0c:	2019      	movs	r0, #25
 8000d0e:	f000 fb00 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d12:	e018      	b.n	8000d46 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_TIM_Base_MspInit+0x80>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d113      	bne.n	8000d46 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_TIM_Base_MspInit+0x7c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 12, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210c      	movs	r1, #12
 8000d3a:	201a      	movs	r0, #26
 8000d3c:	f000 facd 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d40:	201a      	movs	r0, #26
 8000d42:	f000 fae6 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40014400 	.word	0x40014400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40014800 	.word	0x40014800

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_TIM_MspPostInit+0x64>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11b      	bne.n	8000db6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB5     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = TIM17_PWM_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000da6:	230a      	movs	r3, #10
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM17_PWM_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_TIM_MspPostInit+0x6c>)
 8000db2:	f000 fb4d 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40014800 	.word	0x40014800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d130      	bne.n	8000e50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f000 fb08 	bl	8001450 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	210e      	movs	r1, #14
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fa48 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e4a:	2026      	movs	r0, #38	; 0x26
 8000e4c:	f000 fa61 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40021000 	.word	0x40021000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8f6 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eba:	f003 fe86 	bl	8004bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000140 	.word	0x20000140

08000ec8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000ece:	f003 fe7c 	bl	8004bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000018c 	.word	0x2000018c

08000edc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <I2C1_EV_IRQHandler+0x10>)
 8000ee2:	f000 fce6 	bl	80018b2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000088 	.word	0x20000088

08000ef0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <I2C1_ER_IRQHandler+0x10>)
 8000ef6:	f000 fcf6 	bl	80018e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000088 	.word	0x20000088

08000f04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <SPI1_IRQHandler+0x10>)
 8000f0a:	f003 f8a5 	bl	8004058 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000dc 	.word	0x200000dc

08000f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	f004 fd7f 	bl	8005a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001d8 	.word	0x200001d8

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f005 ff22 	bl	8006da4 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20003000 	.word	0x20003000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	2000028c 	.word	0x2000028c
 8000f94:	200003e0 	.word	0x200003e0

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f005 fee1 	bl	8006db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff f947 	bl	8000280 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001000:	0800782c 	.word	0x0800782c
  ldr r2, =_sbss
 8001004:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001008:	200003dc 	.word	0x200003dc

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x28>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f94f 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fd92 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f967 	bl	800132e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001078:	f000 f92f 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000010 	.word	0x20000010
 8001094:	20000018 	.word	0x20000018
 8001098:	20000014 	.word	0x20000014

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000018 	.word	0x20000018
 80010c0:	20000290 	.word	0x20000290

080010c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000290 	.word	0x20000290

080010dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000018 	.word	0x20000018

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001354:	2b02      	cmp	r3, #2
 8001356:	d008      	beq.n	800136a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2204      	movs	r2, #4
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e020      	b.n	80013ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 020e 	bic.w	r2, r2, #14
 8001378:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d005      	beq.n	80013da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2204      	movs	r2, #4
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e027      	b.n	800142a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 020e 	bic.w	r2, r2, #14
 80013e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
    } 
  }
  return status;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e14e      	b.n	80016fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8140 	beq.w	80016f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d005      	beq.n	8001490 <HAL_GPIO_Init+0x40>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d017      	beq.n	800152e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d123      	bne.n	8001582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0203 	and.w	r2, r3, #3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809a 	beq.w	80016f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015dc:	4a50      	ldr	r2, [pc, #320]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x1e0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_GPIO_Init+0x2d4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x2d8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1d8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_GPIO_Init+0x2dc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1d4>
 8001620:	2303      	movs	r3, #3
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001624:	2305      	movs	r3, #5
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001630:	2300      	movs	r3, #0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001642:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f aea9 	bne.w	8001460 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e001      	b.n	8001756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001780:	e002      	b.n	8001788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e081      	b.n	80018aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f9ee 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e006      	b.n	800181c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800181a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d104      	bne.n	800182e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69d9      	ldr	r1, [r3, #28]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
  }
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00a      	beq.n	8001952 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f043 0208 	orr.w	r2, r3, #8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00f      	beq.n	800197c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f043 0202 	orr.w	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 030b 	and.w	r3, r3, #11
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb76 	bl	8002080 <I2C_ITError>
  }
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	4613      	mov	r3, r2
 80019d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <I2C_Slave_ISR_IT+0x24>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0e1      	b.n	8001c04 <I2C_Slave_ISR_IT+0x1e8>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f9b4 	bl	8001dcc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04b      	beq.n	8001b06 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d046      	beq.n	8001b06 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d128      	bne.n	8001ad4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b28      	cmp	r3, #40	; 0x28
 8001a8c:	d108      	bne.n	8001aa0 <I2C_Slave_ISR_IT+0x84>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a94:	d104      	bne.n	8001aa0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 fa9d 	bl	8001fd8 <I2C_ITListenCplt>
 8001a9e:	e031      	b.n	8001b04 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b29      	cmp	r3, #41	; 0x29
 8001aaa:	d10e      	bne.n	8001aca <I2C_Slave_ISR_IT+0xae>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ab2:	d00a      	beq.n	8001aca <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fbf6 	bl	80022ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f926 	bl	8001d14 <I2C_ITSlaveSeqCplt>
 8001ac8:	e01c      	b.n	8001b04 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ad2:	e08f      	b.n	8001bf4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <I2C_Slave_ISR_IT+0xda>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d17e      	bne.n	8001bf4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4619      	mov	r1, r3
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fabf 	bl	8002080 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b02:	e077      	b.n	8001bf4 <I2C_Slave_ISR_IT+0x1d8>
 8001b04:	e076      	b.n	8001bf4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02f      	beq.n	8001b70 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d02a      	beq.n	8001b70 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d018      	beq.n	8001b56 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d14b      	bne.n	8001bf8 <I2C_Slave_ISR_IT+0x1dc>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b66:	d047      	beq.n	8001bf8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f8d3 	bl	8001d14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b6e:	e043      	b.n	8001bf8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f840 	bl	8001c0c <I2C_ITAddrCplt>
 8001b8c:	e035      	b.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d030      	beq.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d02b      	beq.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bdc:	e00d      	b.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d002      	beq.n	8001bec <I2C_Slave_ISR_IT+0x1d0>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f891 	bl	8001d14 <I2C_ITSlaveSeqCplt>
 8001bf2:	e002      	b.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001bf8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c22:	2b28      	cmp	r3, #40	; 0x28
 8001c24:	d16a      	bne.n	8001cfc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d138      	bne.n	8001cdc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	09db      	lsrs	r3, r3, #7
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	89bb      	ldrh	r3, [r7, #12]
 8001c72:	4053      	eors	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f003 0306 	and.w	r3, r3, #6
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11c      	bne.n	8001cb8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d13b      	bne.n	8001d0c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001caa:	89ba      	ldrh	r2, [r7, #12]
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fe87 	bl	80019c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001cb6:	e029      	b.n	8001d0c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fb36 	bl	8002332 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cce:	89ba      	ldrh	r2, [r7, #12]
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe75 	bl	80019c4 <HAL_I2C_AddrCallback>
}
 8001cda:	e017      	b.n	8001d0c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fb26 	bl	8002332 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cee:	89ba      	ldrh	r2, [r7, #12]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fe65 	bl	80019c4 <HAL_I2C_AddrCallback>
}
 8001cfa:	e007      	b.n	8001d0c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2208      	movs	r2, #8
 8001d02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e00c      	b.n	8001d62 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b29      	cmp	r3, #41	; 0x29
 8001d6c:	d112      	bne.n	8001d94 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2228      	movs	r2, #40	; 0x28
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fad7 	bl	8002332 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fe05 	bl	800199c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d92:	e017      	b.n	8001dc4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9e:	d111      	bne.n	8001dc4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2228      	movs	r2, #40	; 0x28
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2222      	movs	r2, #34	; 0x22
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dae:	2102      	movs	r1, #2
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fabe 	bl	8002332 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fdf6 	bl	80019b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b21      	cmp	r3, #33	; 0x21
 8001df6:	d002      	beq.n	8001dfe <I2C_ITSlaveCplt+0x32>
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b29      	cmp	r3, #41	; 0x29
 8001dfc:	d108      	bne.n	8001e10 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001dfe:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa95 	bl	8002332 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2221      	movs	r2, #33	; 0x21
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0e:	e00d      	b.n	8001e2c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b22      	cmp	r3, #34	; 0x22
 8001e14:	d002      	beq.n	8001e1c <I2C_ITSlaveCplt+0x50>
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b2a      	cmp	r3, #42	; 0x2a
 8001e1a:	d107      	bne.n	8001e2c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e1c:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa86 	bl	8002332 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2222      	movs	r2, #34	; 0x22
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <I2C_ITSlaveCplt+0x204>)
 8001e48:	400b      	ands	r3, r1
 8001e4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fa2e 	bl	80022ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01f      	beq.n	8001eb4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e82:	e017      	b.n	8001eb4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d012      	beq.n	8001eb4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f043 0204 	orr.w	r2, r3, #4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8a4 	bl	8002080 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b28      	cmp	r3, #40	; 0x28
 8001f42:	d141      	bne.n	8001fc8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f846 	bl	8001fd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f4c:	e03c      	b.n	8001fc8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f56:	d014      	beq.n	8001f82 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fedb 	bl	8001d14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <I2C_ITSlaveCplt+0x208>)
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fd30 	bl	80019e0 <HAL_I2C_ListenCpltCallback>
}
 8001f80:	e022      	b.n	8001fc8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b22      	cmp	r3, #34	; 0x22
 8001f8c:	d10e      	bne.n	8001fac <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fd03 	bl	80019b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001faa:	e00d      	b.n	8001fc8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fcea 	bl	800199c <HAL_I2C_SlaveTxCpltCallback>
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	fe00e800 	.word	0xfe00e800
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <I2C_ITListenCplt+0xa4>)
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d022      	beq.n	8002054 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002054:	f248 0103 	movw	r1, #32771	; 0x8003
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f96a 	bl	8002332 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2210      	movs	r2, #16
 8002064:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fcb6 	bl	80019e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	ffff0000 	.word	0xffff0000

08002080 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a6d      	ldr	r2, [pc, #436]	; (8002254 <I2C_ITError+0x1d4>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b28      	cmp	r3, #40	; 0x28
 80020b6:	d005      	beq.n	80020c4 <I2C_ITError+0x44>
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b29      	cmp	r3, #41	; 0x29
 80020bc:	d002      	beq.n	80020c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b2a      	cmp	r3, #42	; 0x2a
 80020c2:	d10b      	bne.n	80020dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020c4:	2103      	movs	r1, #3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f933 	bl	8002332 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2228      	movs	r2, #40	; 0x28
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a60      	ldr	r2, [pc, #384]	; (8002258 <I2C_ITError+0x1d8>)
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	e030      	b.n	800213e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020dc:	f248 0103 	movw	r1, #32771	; 0x8003
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f926 	bl	8002332 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8e1 	bl	80022ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d01f      	beq.n	8002138 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b20      	cmp	r3, #32
 800210c:	d114      	bne.n	8002138 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d109      	bne.n	8002130 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2220      	movs	r2, #32
 8002136:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	2b00      	cmp	r3, #0
 800214a:	d039      	beq.n	80021c0 <I2C_ITError+0x140>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b11      	cmp	r3, #17
 8002150:	d002      	beq.n	8002158 <I2C_ITError+0xd8>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b21      	cmp	r3, #33	; 0x21
 8002156:	d133      	bne.n	80021c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002166:	d107      	bne.n	8002178 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002176:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f959 	bl	8001434 <HAL_DMA_GetState>
 8002182:	4603      	mov	r3, r0
 8002184:	2b01      	cmp	r3, #1
 8002186:	d017      	beq.n	80021b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	4a33      	ldr	r2, [pc, #204]	; (800225c <I2C_ITError+0x1dc>)
 800218e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f90b 	bl	80013b8 <HAL_DMA_Abort_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d04d      	beq.n	8002244 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b2:	4610      	mov	r0, r2
 80021b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021b6:	e045      	b.n	8002244 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f851 	bl	8002260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021be:	e041      	b.n	8002244 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d039      	beq.n	800223c <I2C_ITError+0x1bc>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d002      	beq.n	80021d4 <I2C_ITError+0x154>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b22      	cmp	r3, #34	; 0x22
 80021d2:	d133      	bne.n	800223c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e2:	d107      	bne.n	80021f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f91b 	bl	8001434 <HAL_DMA_GetState>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b01      	cmp	r3, #1
 8002202:	d017      	beq.n	8002234 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <I2C_ITError+0x1dc>)
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f8cd 	bl	80013b8 <HAL_DMA_Abort_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d011      	beq.n	8002248 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800222e:	4610      	mov	r0, r2
 8002230:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002232:	e009      	b.n	8002248 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f813 	bl	8002260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800223a:	e005      	b.n	8002248 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f80f 	bl	8002260 <I2C_TreatErrorCallback>
  }
}
 8002242:	e002      	b.n	800224a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002248:	bf00      	nop
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	ffff0000 	.word	0xffff0000
 8002258:	08001a1d 	.word	0x08001a1d
 800225c:	080022f7 	.word	0x080022f7

08002260 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d10e      	bne.n	8002292 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fbbc 	bl	8001a08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002290:	e009      	b.n	80022a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fba7 	bl	80019f4 <HAL_I2C_ErrorCallback>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d103      	bne.n	80022cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d007      	beq.n	80022ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	619a      	str	r2, [r3, #24]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2200      	movs	r2, #0
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff ff9b 	bl	8002260 <I2C_TreatErrorCallback>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00f      	beq.n	800236c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002352:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002360:	2b28      	cmp	r3, #40	; 0x28
 8002362:	d003      	beq.n	800236c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800236a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00f      	beq.n	8002396 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800237c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800238a:	2b28      	cmp	r3, #40	; 0x28
 800238c:	d003      	beq.n	8002396 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002394:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800239a:	2b00      	cmp	r3, #0
 800239c:	da03      	bge.n	80023a6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d103      	bne.n	80023b4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d103      	bne.n	80023c2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f043 0320 	orr.w	r3, r3, #32
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d103      	bne.n	80023d0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6819      	ldr	r1, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43da      	mvns	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	d138      	bne.n	8002476 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800240e:	2302      	movs	r3, #2
 8002410:	e032      	b.n	8002478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2224      	movs	r2, #36	; 0x24
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002440:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b20      	cmp	r3, #32
 8002498:	d139      	bne.n	800250e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e033      	b.n	8002510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002522:	af00      	add	r7, sp, #0
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f001 b823 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 817d 	beq.w	8002852 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002558:	4bbc      	ldr	r3, [pc, #752]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b04      	cmp	r3, #4
 8002562:	d00c      	beq.n	800257e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002564:	4bb9      	ldr	r3, [pc, #740]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d15c      	bne.n	800262a <HAL_RCC_OscConfig+0x10e>
 8002570:	4bb6      	ldr	r3, [pc, #728]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d155      	bne.n	800262a <HAL_RCC_OscConfig+0x10e>
 800257e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002582:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002592:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x94>
 80025aa:	4ba8      	ldr	r3, [pc, #672]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e015      	b.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025d8:	4b9c      	ldr	r3, [pc, #624]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 811f 	beq.w	8002850 <HAL_RCC_OscConfig+0x334>
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8116 	bne.w	8002850 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f000 bfaf 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x12e>
 800263c:	4b83      	ldr	r3, [pc, #524]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a82      	ldr	r2, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e036      	b.n	80026b8 <HAL_RCC_OscConfig+0x19c>
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x158>
 800265a:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7b      	ldr	r2, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e021      	b.n	80026b8 <HAL_RCC_OscConfig+0x19c>
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x184>
 8002686:	4b71      	ldr	r3, [pc, #452]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6d      	ldr	r2, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x19c>
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f023 020f 	bic.w	r2, r3, #15
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	495f      	ldr	r1, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d059      	beq.n	8002796 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fcef 	bl	80010c4 <HAL_GetTick>
 80026e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fcea 	bl	80010c4 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d902      	bls.n	8002702 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f000 bf43 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 8002702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002706:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002716:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x218>
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	e015      	b.n	8002760 <HAL_RCC_OscConfig+0x244>
 8002734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002738:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002750:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x330>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002764:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002768:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002774:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ab      	beq.n	80026ec <HAL_RCC_OscConfig+0x1d0>
 8002794:	e05d      	b.n	8002852 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fc95 	bl	80010c4 <HAL_GetTick>
 800279a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fc90 	bl	80010c4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bee9 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 80027b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2cc>
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x2f8>
 80027e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002804:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_OscConfig+0x330>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002818:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800281c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002828:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f002 021f 	and.w	r2, r2, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ab      	bne.n	80027a0 <HAL_RCC_OscConfig+0x284>
 8002848:	e003      	b.n	8002852 <HAL_RCC_OscConfig+0x336>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 817d 	beq.w	8002b62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002868:	4ba6      	ldr	r3, [pc, #664]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002874:	4ba3      	ldr	r3, [pc, #652]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d172      	bne.n	8002966 <HAL_RCC_OscConfig+0x44a>
 8002880:	4ba0      	ldr	r3, [pc, #640]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d16c      	bne.n	8002966 <HAL_RCC_OscConfig+0x44a>
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800289e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x3a0>
 80028b6:	4b93      	ldr	r3, [pc, #588]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e013      	b.n	80028e4 <HAL_RCC_OscConfig+0x3c8>
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028e0:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2202      	movs	r2, #2
 80028e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028ee:	fa92 f2a2 	rbit	r2, r2
 80028f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028fa:	fab2 f282 	clz	r2, r2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCC_OscConfig+0x410>
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d002      	beq.n	800292c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f000 be2e 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b75      	ldr	r3, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	21f8      	movs	r1, #248	; 0xf8
 8002942:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800294a:	fa91 f1a1 	rbit	r1, r1
 800294e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002952:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002956:	fab1 f181 	clz	r1, r1
 800295a:	b2c9      	uxtb	r1, r1
 800295c:	408b      	lsls	r3, r1
 800295e:	4969      	ldr	r1, [pc, #420]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002964:	e0fd      	b.n	8002b62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8088 	beq.w	8002a88 <HAL_RCC_OscConfig+0x56c>
 8002978:	2301      	movs	r3, #1
 800297a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800298a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	2301      	movs	r3, #1
 80029a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fb8e 	bl	80010c4 <HAL_GetTick>
 80029a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe fb89 	bl	80010c4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	f000 bde2 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 80029c4:	2302      	movs	r3, #2
 80029c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4d8>
 80029ee:	4b45      	ldr	r3, [pc, #276]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x500>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a26:	fa92 f2a2 	rbit	r2, r2
 8002a2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a32:	fab2 f282 	clz	r2, r2
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f042 0220 	orr.w	r2, r2, #32
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f002 021f 	and.w	r2, r2, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0af      	beq.n	80029ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	21f8      	movs	r1, #248	; 0xf8
 8002a64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a6c:	fa91 f1a1 	rbit	r1, r1
 8002a70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a78:	fab1 f181 	clz	r1, r1
 8002a7c:	b2c9      	uxtb	r1, r1
 8002a7e:	408b      	lsls	r3, r1
 8002a80:	4920      	ldr	r1, [pc, #128]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
 8002a86:	e06c      	b.n	8002b62 <HAL_RCC_OscConfig+0x646>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fb06 	bl	80010c4 <HAL_GetTick>
 8002ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fb01 	bl	80010c4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	f000 bd5a 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d104      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5ec>
 8002afe:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <HAL_RCC_OscConfig+0x5e8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	e015      	b.n	8002b30 <HAL_RCC_OscConfig+0x614>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b2c:	4bc8      	ldr	r3, [pc, #800]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2202      	movs	r2, #2
 8002b32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b46:	fab2 f282 	clz	r2, r2
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f042 0220 	orr.w	r2, r2, #32
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f002 021f 	and.w	r2, r2, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ad      	bne.n	8002abe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8110 	beq.w	8002d98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d079      	beq.n	8002c7c <HAL_RCC_OscConfig+0x760>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4bab      	ldr	r3, [pc, #684]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	461a      	mov	r2, r3
 8002bae:	2301      	movs	r3, #1
 8002bb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fa87 	bl	80010c4 <HAL_GetTick>
 8002bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fa82 	bl	80010c4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d902      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f000 bcdb 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c38:	2102      	movs	r1, #2
 8002c3a:	6019      	str	r1, [r3, #0]
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f1a3 	rbit	r1, r3
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c52:	6019      	str	r1, [r3, #0]
  return result;
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0a0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x6a0>
 8002c7a:	e08d      	b.n	8002d98 <HAL_RCC_OscConfig+0x87c>
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ca8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x938>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fa01 	bl	80010c4 <HAL_GetTick>
 8002cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe f9fc 	bl	80010c4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d902      	bls.n	8002cde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	f000 bc55 	b.w	8003588 <HAL_RCC_OscConfig+0x106c>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d56:	2102      	movs	r1, #2
 8002d58:	6019      	str	r1, [r3, #0]
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f1a3 	rbit	r1, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d70:	6019      	str	r1, [r3, #0]
  return result;
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d197      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 81a1 	beq.w	80030f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002de6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_RCC_OscConfig+0x93c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11a      	bne.n	8002e30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x93c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_RCC_OscConfig+0x93c>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe f95d 	bl	80010c4 <HAL_GetTick>
 8002e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	e009      	b.n	8002e24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7fe f958 	bl	80010c4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e3b1      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_OscConfig+0x93c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ef      	beq.n	8002e10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCC_OscConfig+0x940>
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a02      	ldr	r2, [pc, #8]	; (8002e50 <HAL_RCC_OscConfig+0x934>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e03c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x9ac>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	10908120 	.word	0x10908120
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x96a>
 8002e6c:	4bc1      	ldr	r3, [pc, #772]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4ac0      	ldr	r2, [pc, #768]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4bbe      	ldr	r3, [pc, #760]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4abd      	ldr	r2, [pc, #756]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e020      	b.n	8002ec8 <HAL_RCC_OscConfig+0x9ac>
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x994>
 8002e96:	4bb7      	ldr	r3, [pc, #732]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4ab6      	ldr	r2, [pc, #728]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4bb4      	ldr	r3, [pc, #720]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4ab3      	ldr	r2, [pc, #716]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x9ac>
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4aaf      	ldr	r2, [pc, #700]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4bad      	ldr	r3, [pc, #692]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4aac      	ldr	r2, [pc, #688]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8081 	beq.w	8002fdc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f8f3 	bl	80010c4 <HAL_GetTick>
 8002ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe f8ee 	bl	80010c4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e345      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f28:	2202      	movs	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f42:	601a      	str	r2, [r3, #0]
  return result;
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_OscConfig+0xa4c>
 8002f62:	4b84      	ldr	r3, [pc, #528]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	e013      	b.n	8002f90 <HAL_RCC_OscConfig+0xa74>
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f70:	2202      	movs	r2, #2
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	4b79      	ldr	r3, [pc, #484]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f98:	2102      	movs	r1, #2
 8002f9a:	6011      	str	r1, [r2, #0]
 8002f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	fa92 f1a2 	rbit	r1, r2
 8002faa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fb2:	6011      	str	r1, [r2, #0]
  return result;
 8002fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d084      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x9c8>
 8002fda:	e07f      	b.n	80030dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f872 	bl	80010c4 <HAL_GetTick>
 8002fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe f86d 	bl	80010c4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e2c4      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003006:	2202      	movs	r2, #2
 8003008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800302a:	2202      	movs	r2, #2
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003044:	601a      	str	r2, [r3, #0]
  return result;
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800304e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d102      	bne.n	800306a <HAL_RCC_OscConfig+0xb4e>
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	e013      	b.n	8003092 <HAL_RCC_OscConfig+0xb76>
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003096:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800309a:	2102      	movs	r1, #2
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fa92 f1a2 	rbit	r1, r2
 80030ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030b4:	6011      	str	r1, [r2, #0]
  return result;
 80030b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	f002 021f 	and.w	r2, r2, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d184      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8242 	beq.w	8003586 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_OscConfig+0xc58>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b08      	cmp	r3, #8
 800310c:	f000 8213 	beq.w	8003536 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f040 8162 	bne.w	80033e6 <HAL_RCC_OscConfig+0xeca>
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800312a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003150:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800315c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd ffac 	bl	80010c4 <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003170:	e00c      	b.n	800318c <HAL_RCC_OscConfig+0xc70>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd ffa4 	bl	80010c4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e1fd      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f2a3 	rbit	r2, r3
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031b0:	601a      	str	r2, [r3, #0]
  return result;
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_OscConfig+0xcba>
 80031d0:	4bb0      	ldr	r3, [pc, #704]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e027      	b.n	8003226 <HAL_RCC_OscConfig+0xd0a>
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	4b9c      	ldr	r3, [pc, #624]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800322e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003232:	6011      	str	r1, [r2, #0]
 8003234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003238:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	fa92 f1a2 	rbit	r1, r2
 8003242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003246:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800324a:	6011      	str	r1, [r2, #0]
  return result;
 800324c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003250:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0220 	orr.w	r2, r2, #32
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d182      	bne.n	8003178 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	430b      	orrs	r3, r1
 8003294:	497f      	ldr	r1, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032be:	601a      	str	r2, [r3, #0]
  return result;
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	2301      	movs	r3, #1
 80032de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fef0 	bl	80010c4 <HAL_GetTick>
 80032e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fd feeb 	bl	80010c4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e144      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003322:	601a      	str	r2, [r3, #0]
  return result;
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800332c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0xe2c>
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e027      	b.n	8003398 <HAL_RCC_OscConfig+0xe7c>
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033a4:	6011      	str	r1, [r2, #0]
 80033a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	fa92 f1a2 	rbit	r1, r2
 80033b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033bc:	6011      	str	r1, [r2, #0]
  return result;
 80033be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	fab2 f282 	clz	r2, r2
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f002 021f 	and.w	r2, r2, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f202 	lsl.w	r2, r1, r2
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d082      	beq.n	80032ea <HAL_RCC_OscConfig+0xdce>
 80033e4:	e0cf      	b.n	8003586 <HAL_RCC_OscConfig+0x106a>
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800340a:	601a      	str	r2, [r3, #0]
  return result;
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003414:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fe4a 	bl	80010c4 <HAL_GetTick>
 8003430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e009      	b.n	800344a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fe45 	bl	80010c4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e09e      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800346e:	601a      	str	r2, [r3, #0]
  return result;
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d104      	bne.n	8003498 <HAL_RCC_OscConfig+0xf7c>
 800348e:	4b01      	ldr	r3, [pc, #4]	; (8003494 <HAL_RCC_OscConfig+0xf78>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	e029      	b.n	80034e8 <HAL_RCC_OscConfig+0xfcc>
 8003494:	40021000 	.word	0x40021000
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x1078>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	fa92 f1a2 	rbit	r1, r2
 8003504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003508:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800350c:	6011      	str	r1, [r2, #0]
  return result;
 800350e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003512:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fab2 f282 	clz	r2, r2
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f042 0220 	orr.w	r2, r2, #32
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f002 021f 	and.w	r2, r2, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d180      	bne.n	8003436 <HAL_RCC_OscConfig+0xf1a>
 8003534:	e027      	b.n	8003586 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e01e      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_OscConfig+0x1078>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003556:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	429a      	cmp	r2, r3
 8003568:	d10b      	bne.n	8003582 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800356a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800356e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b09e      	sub	sp, #120	; 0x78
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e162      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b90      	ldr	r3, [pc, #576]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d910      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 0207 	bic.w	r2, r3, #7
 80035c6:	498b      	ldr	r1, [pc, #556]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e14a      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	497f      	ldr	r1, [pc, #508]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80dc 	beq.w	80037c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d13c      	bne.n	800368e <HAL_RCC_ClockConfig+0xf6>
 8003614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003618:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_RCC_ClockConfig+0xa6>
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	e00f      	b.n	800365e <HAL_RCC_ClockConfig+0xc6>
 800363e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	667b      	str	r3, [r7, #100]	; 0x64
 800364c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
 8003652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365a:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003662:	65ba      	str	r2, [r7, #88]	; 0x58
 8003664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003666:	fa92 f2a2 	rbit	r2, r2
 800366a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800366c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f002 021f 	and.w	r2, r2, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d17b      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0f3      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d13c      	bne.n	8003710 <HAL_RCC_ClockConfig+0x178>
 8003696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x128>
 80036ba:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e00f      	b.n	80036e0 <HAL_RCC_ClockConfig+0x148>
 80036c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
 80036ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40
 80036d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80036e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f042 0220 	orr.w	r2, r2, #32
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d13a      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b2      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
 8003710:	2302      	movs	r3, #2
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_RCC_ClockConfig+0x1a0>
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e00d      	b.n	8003754 <HAL_RCC_ClockConfig+0x1bc>
 8003738:	2302      	movs	r3, #2
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	2302      	movs	r3, #2
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	61ba      	str	r2, [r7, #24]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	fa92 f2a2 	rbit	r2, r2
 800375e:	617a      	str	r2, [r7, #20]
  return result;
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	fab2 f282 	clz	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f042 0220 	orr.w	r2, r2, #32
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e079      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	491a      	ldr	r1, [pc, #104]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fd fc96 	bl	80010c4 <HAL_GetTick>
 8003798:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd fc92 	bl	80010c4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e061      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d214      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4906      	ldr	r1, [pc, #24]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e040      	b.n	8003876 <HAL_RCC_ClockConfig+0x2de>
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	491a      	ldr	r1, [pc, #104]	; (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4912      	ldr	r1, [pc, #72]	; (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800383a:	f000 f829 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800383e:	4601      	mov	r1, r0
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_ClockConfig+0x2e8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003848:	22f0      	movs	r2, #240	; 0xf0
 800384a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	fa92 f2a2 	rbit	r2, r2
 8003852:	60fa      	str	r2, [r7, #12]
  return result;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	40d3      	lsrs	r3, r2
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x2ec>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	fa21 f303 	lsr.w	r3, r1, r3
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <HAL_RCC_ClockConfig+0x2f0>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_ClockConfig+0x2f4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fbe4 	bl	800103c <HAL_InitTick>
  
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3778      	adds	r7, #120	; 0x78
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	080076b8 	.word	0x080076b8
 8003888:	20000010 	.word	0x20000010
 800388c:	20000014 	.word	0x20000014

08003890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b08b      	sub	sp, #44	; 0x2c
 8003894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x36>
 80038be:	e03c      	b.n	800393a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c2:	623b      	str	r3, [r7, #32]
      break;
 80038c4:	e03c      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	fa92 f2a2 	rbit	r2, r2
 80038d8:	607a      	str	r2, [r7, #4]
  return result;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	fab2 f282 	clz	r2, r2
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	40d3      	lsrs	r3, r2
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	220f      	movs	r2, #15
 80038f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	fa92 f2a2 	rbit	r2, r2
 80038fc:	60fa      	str	r2, [r7, #12]
  return result;
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	40d3      	lsrs	r3, r2
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <HAL_RCC_GetSysClockFreq+0xcc>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003918:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	e004      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	623b      	str	r3, [r7, #32]
      break;
 8003938:	e002      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800393c:	623b      	str	r3, [r7, #32]
      break;
 800393e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003940:	6a3b      	ldr	r3, [r7, #32]
}
 8003942:	4618      	mov	r0, r3
 8003944:	372c      	adds	r7, #44	; 0x2c
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	007a1200 	.word	0x007a1200
 8003958:	080076d0 	.word	0x080076d0
 800395c:	080076e0 	.word	0x080076e0
 8003960:	003d0900 	.word	0x003d0900

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000010 	.word	0x20000010

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003982:	f7ff ffef 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003986:	4601      	mov	r1, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	603a      	str	r2, [r7, #0]
  return result;
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	40d3      	lsrs	r3, r2
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	080076c8 	.word	0x080076c8

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039c6:	f7ff ffcd 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	fa92 f2a2 	rbit	r2, r2
 80039e0:	603a      	str	r2, [r7, #0]
  return result;
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	fab2 f282 	clz	r2, r2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	40d3      	lsrs	r3, r2
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	080076c8 	.word	0x080076c8

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b092      	sub	sp, #72	; 0x48
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80cd 	beq.w	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a28:	4b86      	ldr	r3, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10e      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b83      	ldr	r3, [pc, #524]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a82      	ldr	r2, [pc, #520]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
 8003a40:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a79      	ldr	r2, [pc, #484]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fb2b 	bl	80010c4 <HAL_GetTick>
 8003a6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd fb27 	bl	80010c4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0db      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a90:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d076      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aae:	4b65      	ldr	r3, [pc, #404]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b00:	4a50      	ldr	r2, [pc, #320]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d045      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd fad8 	bl	80010c4 <HAL_GetTick>
 8003b14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd fad4 	bl	80010c4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e086      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	61fb      	str	r3, [r7, #28]
  return result;
 8003b46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	e007      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2202      	movs	r2, #2
 8003b74:	613a      	str	r2, [r7, #16]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	fa92 f2a2 	rbit	r2, r2
 8003b7c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	fab2 f282 	clz	r2, r2
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	f002 021f 	and.w	r2, r2, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f202 	lsl.w	r2, r1, r2
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0bd      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4926      	ldr	r1, [pc, #152]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f023 0203 	bic.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	491a      	ldr	r1, [pc, #104]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bec:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4912      	ldr	r1, [pc, #72]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	490b      	ldr	r1, [pc, #44]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3748      	adds	r7, #72	; 0x48
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	10908100 	.word	0x10908100

08003c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e095      	b.n	8003d8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d108      	bne.n	8003c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c72:	d009      	beq.n	8003c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	e005      	b.n	8003c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc ffce 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cc8:	d902      	bls.n	8003cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e002      	b.n	8003cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cde:	d007      	beq.n	8003cf0 <HAL_SPI_Init+0xa0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	ea42 0103 	orr.w	r1, r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 0204 	and.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d6c:	ea42 0103 	orr.w	r1, r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dba:	e090      	b.n	8003ede <HAL_SPI_Receive_IT+0x146>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <HAL_SPI_Receive_IT+0x4e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dcc:	d10b      	bne.n	8003de6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f88b 	bl	8003ef8 <HAL_SPI_TransmitReceive_IT>
 8003de2:	4603      	mov	r3, r0
 8003de4:	e080      	b.n	8003ee8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_SPI_Receive_IT+0x5c>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e079      	b.n	8003ee8 <HAL_SPI_Receive_IT+0x150>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Receive_IT+0x70>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e0c:	e067      	b.n	8003ede <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2204      	movs	r2, #4
 8003e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	88fa      	ldrh	r2, [r7, #6]
 8003e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d90b      	bls.n	8003e6c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e62:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_SPI_Receive_IT+0x158>)
 8003e68:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e6a:	e00a      	b.n	8003e82 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e7a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_SPI_Receive_IT+0x15c>)
 8003e80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d10f      	bne.n	8003eac <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eaa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003eba:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d008      	beq.n	8003edc <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e000      	b.n	8003ede <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003edc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	080044f9 	.word	0x080044f9
 8003ef4:	080044a9 	.word	0x080044a9

08003ef8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_SPI_TransmitReceive_IT+0x20>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e091      	b.n	800403c <HAL_SPI_TransmitReceive_IT+0x144>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f26:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f2e:	7dbb      	ldrb	r3, [r7, #22]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d00d      	beq.n	8003f50 <HAL_SPI_TransmitReceive_IT+0x58>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3a:	d106      	bne.n	8003f4a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_SPI_TransmitReceive_IT+0x52>
 8003f44:	7dbb      	ldrb	r3, [r7, #22]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f4e:	e070      	b.n	8004032 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f66:	e064      	b.n	8004032 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d003      	beq.n	8003f7c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2205      	movs	r2, #5
 8003f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	887a      	ldrh	r2, [r7, #2]
 8003fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb2:	d906      	bls.n	8003fc2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a24      	ldr	r2, [pc, #144]	; (8004048 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003fb8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <HAL_SPI_TransmitReceive_IT+0x154>)
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc0:	e005      	b.n	8003fce <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003fc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003fcc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd6:	d802      	bhi.n	8003fde <HAL_SPI_TransmitReceive_IT+0xe6>
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d908      	bls.n	8003ff0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	e007      	b.n	8004000 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800400e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d008      	beq.n	8004030 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e000      	b.n	8004032 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004030:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	080043e3 	.word	0x080043e3
 800404c:	08004449 	.word	0x08004449
 8004050:	08004293 	.word	0x08004293
 8004054:	08004351 	.word	0x08004351

08004058 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10e      	bne.n	8004098 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
    return;
 8004096:	e0ce      	b.n	8004236 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_SPI_IRQHandler+0x5e>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
    return;
 80040b4:	e0bf      	b.n	8004236 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_SPI_IRQHandler+0x7e>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80b0 	beq.w	8004236 <HAL_SPI_IRQHandler+0x1de>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80aa 	beq.w	8004236 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d011      	beq.n	800411c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	f043 0204 	orr.w	r2, r3, #4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e00b      	b.n	8004134 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
        return;
 8004132:	e080      	b.n	8004236 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	f043 0201 	orr.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d04f      	beq.n	8004234 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_SPI_IRQHandler+0x168>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d034      	beq.n	800422a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0203 	bic.w	r2, r2, #3
 80041ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_SPI_IRQHandler+0x1e4>)
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd f8e7 	bl	80013b8 <HAL_DMA_Abort_IT>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	2b00      	cmp	r3, #0
 8004202:	d016      	beq.n	8004232 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	4a0c      	ldr	r2, [pc, #48]	; (800423c <HAL_SPI_IRQHandler+0x1e4>)
 800420a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd f8d1 	bl	80013b8 <HAL_DMA_Abort_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004228:	e003      	b.n	8004232 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f812 	bl	8004254 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004230:	e000      	b.n	8004234 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004232:	bf00      	nop
    return;
 8004234:	bf00      	nop
  }
}
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	08004269 	.word	0x08004269

08004240 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ffe5 	bl	8004254 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d923      	bls.n	80042ee <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	b292      	uxth	r2, r2
 80042b2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b02      	subs	r3, #2
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d11f      	bne.n	800431c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	e016      	b.n	800431c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f103 020c 	add.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004336:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 faba 	bl	80048bc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d912      	bls.n	8004388 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b02      	subs	r3, #2
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004386:	e012      	b.n	80043ae <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d110      	bne.n	80043da <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fa71 	bl	80048bc <SPI_CloseRxTx_ISR>
    }
  }
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	b292      	uxth	r2, r2
 80043f6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10f      	bne.n	8004440 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa3e 	bl	80048bc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d110      	bne.n	80044a0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa0e 	bl	80048bc <SPI_CloseRxTx_ISR>
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f103 020c 	add.w	r2, r3, #12
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa28 	bl	8004940 <SPI_CloseRx_ISR>
  }
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	b292      	uxth	r2, r2
 800450c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa02 	bl	8004940 <SPI_CloseRx_ISR>
  }
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004554:	f7fc fdb6 	bl	80010c4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4413      	add	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004564:	f7fc fdae 	bl	80010c4 <HAL_GetTick>
 8004568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800456a:	4b39      	ldr	r3, [pc, #228]	; (8004650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	015b      	lsls	r3, r3, #5
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457a:	e054      	b.n	8004626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004582:	d050      	beq.n	8004626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004584:	f7fc fd9e 	bl	80010c4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	429a      	cmp	r2, r3
 8004592:	d902      	bls.n	800459a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d13d      	bne.n	8004616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b2:	d111      	bne.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045bc:	d004      	beq.n	80045c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c6:	d107      	bne.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e0:	d10f      	bne.n	8004602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e017      	b.n	8004646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	3b01      	subs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d19b      	bne.n	800457c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000010 	.word	0x20000010

08004654 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004666:	f7fc fd2d 	bl	80010c4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	4413      	add	r3, r2
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004676:	f7fc fd25 	bl	80010c4 <HAL_GetTick>
 800467a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004684:	4b3d      	ldr	r3, [pc, #244]	; (800477c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00da      	lsls	r2, r3, #3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	0d1b      	lsrs	r3, r3, #20
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800469c:	e060      	b.n	8004760 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046a4:	d107      	bne.n	80046b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046bc:	d050      	beq.n	8004760 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046be:	f7fc fd01 	bl	80010c4 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d902      	bls.n	80046d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d13d      	bne.n	8004750 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ec:	d111      	bne.n	8004712 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f6:	d004      	beq.n	8004702 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	d107      	bne.n	8004712 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004710:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	d10f      	bne.n	800473c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800473a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e010      	b.n	8004772 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3b01      	subs	r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d196      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3728      	adds	r7, #40	; 0x28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000010 	.word	0x20000010

08004780 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004794:	d111      	bne.n	80047ba <SPI_EndRxTransaction+0x3a>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d004      	beq.n	80047aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a8:	d107      	bne.n	80047ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	2180      	movs	r1, #128	; 0x80
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff febd 	bl	8004544 <SPI_WaitFlagStateUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e023      	b.n	8004828 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e8:	d11d      	bne.n	8004826 <SPI_EndRxTransaction+0xa6>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f2:	d004      	beq.n	80047fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d113      	bne.n	8004826 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff22 	bl	8004654 <SPI_WaitFifoStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e000      	b.n	8004828 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff ff03 	bl	8004654 <SPI_WaitFifoStateUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e027      	b.n	80048b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fe68 	bl	8004544 <SPI_WaitFlagStateUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e014      	b.n	80048b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fedc 	bl	8004654 <SPI_WaitFifoStateUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e000      	b.n	80048b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c4:	f7fc fbfe 	bl	80010c4 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0220 	bic.w	r2, r2, #32
 80048d8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	2164      	movs	r1, #100	; 0x64
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffa6 	bl	8004830 <SPI_EndRxTxTransaction>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d115      	bne.n	800492a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc f8e8 	bl	8000ae8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004918:	e00e      	b.n	8004938 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fc8c 	bl	8004240 <HAL_SPI_TxRxCpltCallback>
}
 8004928:	e006      	b.n	8004938 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fc8e 	bl	8004254 <HAL_SPI_ErrorCallback>
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004956:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004958:	f7fc fbb4 	bl	80010c4 <HAL_GetTick>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	2164      	movs	r1, #100	; 0x64
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ff0c 	bl	8004780 <SPI_EndRxTransaction>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc f8ac 	bl	8000ae8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004990:	e002      	b.n	8004998 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fc5e 	bl	8004254 <HAL_SPI_ErrorCallback>
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e049      	b.n	8004a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc f986 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fb4e 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d001      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e040      	b.n	8004aea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_TIM_Base_Start_IT+0xa8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x58>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d009      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x58>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIM_Base_Start_IT+0xac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x58>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <HAL_TIM_Base_Start_IT+0xb0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d115      	bne.n	8004ad4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d015      	beq.n	8004ae6 <HAL_TIM_Base_Start_IT+0x96>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d011      	beq.n	8004ae6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	e008      	b.n	8004ae6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	00010007 	.word	0x00010007

08004b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e049      	b.n	8004bae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f841 	bl	8004bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 fa9a 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d122      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d11b      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f06f 0202 	mvn.w	r2, #2
 8004bf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa19 	bl	8005044 <HAL_TIM_IC_CaptureCallback>
 8004c12:	e005      	b.n	8004c20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa0b 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa1c 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d122      	bne.n	8004c7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d11b      	bne.n	8004c7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0204 	mvn.w	r2, #4
 8004c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9ef 	bl	8005044 <HAL_TIM_IC_CaptureCallback>
 8004c66:	e005      	b.n	8004c74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f9e1 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9f2 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d122      	bne.n	8004cce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d11b      	bne.n	8004cce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0208 	mvn.w	r2, #8
 8004c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f9c5 	bl	8005044 <HAL_TIM_IC_CaptureCallback>
 8004cba:	e005      	b.n	8004cc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9b7 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9c8 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d122      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d11b      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0210 	mvn.w	r2, #16
 8004cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f99b 	bl	8005044 <HAL_TIM_IC_CaptureCallback>
 8004d0e:	e005      	b.n	8004d1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f98d 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f99e 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10e      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0201 	mvn.w	r2, #1
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fb fd83 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fd23 	bl	80057c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d10e      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d107      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fd16 	bl	80057d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f94c 	bl	800506c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0220 	mvn.w	r2, #32
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fcd6 	bl	80057ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ff      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b14      	cmp	r3, #20
 8004e32:	f200 80f0 	bhi.w	8005016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08005017 	.word	0x08005017
 8004e44:	08005017 	.word	0x08005017
 8004e48:	08005017 	.word	0x08005017
 8004e4c:	08004ed1 	.word	0x08004ed1
 8004e50:	08005017 	.word	0x08005017
 8004e54:	08005017 	.word	0x08005017
 8004e58:	08005017 	.word	0x08005017
 8004e5c:	08004f13 	.word	0x08004f13
 8004e60:	08005017 	.word	0x08005017
 8004e64:	08005017 	.word	0x08005017
 8004e68:	08005017 	.word	0x08005017
 8004e6c:	08004f53 	.word	0x08004f53
 8004e70:	08005017 	.word	0x08005017
 8004e74:	08005017 	.word	0x08005017
 8004e78:	08005017 	.word	0x08005017
 8004e7c:	08004f95 	.word	0x08004f95
 8004e80:	08005017 	.word	0x08005017
 8004e84:	08005017 	.word	0x08005017
 8004e88:	08005017 	.word	0x08005017
 8004e8c:	08004fd5 	.word	0x08004fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f96a 	bl	8005170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]
      break;
 8004ece:	e0a5      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f9d0 	bl	800527c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	619a      	str	r2, [r3, #24]
      break;
 8004f10:	e084      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fa2f 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0204 	bic.w	r2, r2, #4
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	61da      	str	r2, [r3, #28]
      break;
 8004f50:	e064      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fa8d 	bl	8005478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	021a      	lsls	r2, r3, #8
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	61da      	str	r2, [r3, #28]
      break;
 8004f92:	e043      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fad0 	bl	8005540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fd2:	e023      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb0e 	bl	80055fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005014:	e002      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
      break;
 800501a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a32      	ldr	r2, [pc, #200]	; (800515c <TIM_Base_SetConfig+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <TIM_Base_SetConfig+0x28>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0x28>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <TIM_Base_SetConfig+0xe0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d108      	bne.n	80050ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <TIM_Base_SetConfig+0xdc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c8:	d00f      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <TIM_Base_SetConfig+0xe0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <TIM_Base_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <TIM_Base_SetConfig+0xe8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x6a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <TIM_Base_SetConfig+0xec>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0e      	ldr	r2, [pc, #56]	; (800515c <TIM_Base_SetConfig+0xdc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <TIM_Base_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <TIM_Base_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0c      	ldr	r2, [pc, #48]	; (800516c <TIM_Base_SetConfig+0xec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	615a      	str	r2, [r3, #20]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40000400 	.word	0x40000400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a28      	ldr	r2, [pc, #160]	; (800526c <TIM_OC1_SetConfig+0xfc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <TIM_OC1_SetConfig+0x100>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a26      	ldr	r2, [pc, #152]	; (8005274 <TIM_OC1_SetConfig+0x104>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_OC1_SetConfig+0x78>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a25      	ldr	r2, [pc, #148]	; (8005278 <TIM_OC1_SetConfig+0x108>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10c      	bne.n	8005202 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0308 	bic.w	r3, r3, #8
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 0304 	bic.w	r3, r3, #4
 8005200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC1_SetConfig+0xfc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <TIM_OC1_SetConfig+0x100>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <TIM_OC1_SetConfig+0x104>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC1_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <TIM_OC1_SetConfig+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0210 	bic.w	r2, r3, #16
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0320 	bic.w	r3, r3, #32
 80052ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a24      	ldr	r2, [pc, #144]	; (800536c <TIM_OC2_SetConfig+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	; (800536c <TIM_OC2_SetConfig+0xf0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <TIM_OC2_SetConfig+0xf4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <TIM_OC2_SetConfig+0xf8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC2_SetConfig+0xa0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a18      	ldr	r2, [pc, #96]	; (8005378 <TIM_OC2_SetConfig+0xfc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d113      	bne.n	8005344 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005322:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a23      	ldr	r2, [pc, #140]	; (8005468 <TIM_OC3_SetConfig+0xec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <TIM_OC3_SetConfig+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <TIM_OC3_SetConfig+0xf0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <TIM_OC3_SetConfig+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC3_SetConfig+0x9e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a17      	ldr	r2, [pc, #92]	; (8005474 <TIM_OC3_SetConfig+0xf8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d113      	bne.n	8005442 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <TIM_OC4_SetConfig+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <TIM_OC4_SetConfig+0xbc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a14      	ldr	r2, [pc, #80]	; (8005538 <TIM_OC4_SetConfig+0xc0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC4_SetConfig+0x7c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <TIM_OC4_SetConfig+0xc4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <TIM_OC5_SetConfig+0xac>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <TIM_OC5_SetConfig+0xb0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <TIM_OC5_SetConfig+0xb4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC5_SetConfig+0x72>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <TIM_OC5_SetConfig+0xb8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d109      	bne.n	80055c6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	051b      	lsls	r3, r3, #20
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <TIM_OC6_SetConfig+0xb0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <TIM_OC6_SetConfig+0xb4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <TIM_OC6_SetConfig+0xb8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC6_SetConfig+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <TIM_OC6_SetConfig+0xbc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800

080056bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e060      	b.n	800579a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d115      	bne.n	8005788 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	051b      	lsls	r3, r3, #20
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00

080057ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e040      	b.n	800587c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fb fade 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fc00 	bl	800602c <UART_SetConfig>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e022      	b.n	800587c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fd2a 	bl	8006298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fdb1 	bl	80063dc <UART_CheckIdleState>
 800587a:	4603      	mov	r3, r0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005898:	2b20      	cmp	r3, #32
 800589a:	d178      	bne.n	800598e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_UART_Transmit+0x24>
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e071      	b.n	8005990 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2221      	movs	r2, #33	; 0x21
 80058b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ba:	f7fb fc03 	bl	80010c4 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d8:	d108      	bne.n	80058ec <HAL_UART_Transmit+0x68>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e003      	b.n	80058f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058f4:	e030      	b.n	8005958 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2180      	movs	r1, #128	; 0x80
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fe13 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e03c      	b.n	8005990 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	881a      	ldrh	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005928:	b292      	uxth	r2, r2
 800592a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	3302      	adds	r3, #2
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e008      	b.n	8005946 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	b292      	uxth	r2, r2
 800593e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	3301      	adds	r3, #1
 8005944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1c8      	bne.n	80058f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2200      	movs	r2, #0
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fddc 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e005      	b.n	8005990 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d132      	bne.n	8005a16 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Receive_IT+0x24>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e02b      	b.n	8005a18 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d018      	beq.n	8005a06 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	613b      	str	r3, [r7, #16]
   return(result);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	69f9      	ldr	r1, [r7, #28]
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fdf5 	bl	80065fc <UART_Start_Receive_IT>
 8005a12:	4603      	mov	r3, r0
 8005a14:	e000      	b.n	8005a18 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3728      	adds	r7, #40	; 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b0ba      	sub	sp, #232	; 0xe8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a4e:	4013      	ands	r3, r2
 8005a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 82ab 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
      }
      return;
 8005a86:	e2a5      	b.n	8005fd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8117 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aa2:	4b85      	ldr	r3, [pc, #532]	; (8005cb8 <HAL_UART_IRQHandler+0x298>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 810a 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <HAL_UART_IRQHandler+0xbc>
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d011      	beq.n	8005b0c <HAL_UART_IRQHandler+0xec>
 8005ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2202      	movs	r2, #2
 8005afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b02:	f043 0204 	orr.w	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <HAL_UART_IRQHandler+0x11c>
 8005b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b32:	f043 0202 	orr.w	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d017      	beq.n	8005b78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2208      	movs	r2, #8
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6e:	f043 0208 	orr.w	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <HAL_UART_IRQHandler+0x18a>
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8211 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04f      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fdc0 	bl	8006788 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	d141      	bne.n	8005c9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_UART_IRQHandler+0x29c>)
 8005c70:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fb fb9e 	bl	80013b8 <HAL_DMA_Abort_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d017      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00f      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9b4 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00b      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f9b0 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e007      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9ac 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005cb0:	e192      	b.n	8005fd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	bf00      	nop
    return;
 8005cb4:	e190      	b.n	8005fd8 <HAL_UART_IRQHandler+0x5b8>
 8005cb6:	bf00      	nop
 8005cb8:	04000120 	.word	0x04000120
 8005cbc:	08006851 	.word	0x08006851

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	f040 814b 	bne.w	8005f60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8144 	beq.w	8005f60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 813d 	beq.w	8005f60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2210      	movs	r2, #16
 8005cec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	f040 80b5 	bne.w	8005e68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8164 	beq.w	8005fdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f080 815c 	bcs.w	8005fdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	f000 8086 	beq.w	8005e46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1da      	bne.n	8005d3a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005da8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e1      	bne.n	8005d84 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005de4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e3      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e16:	f023 0310 	bic.w	r3, r3, #16
 8005e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e4      	bne.n	8005e06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb fa80 	bl	8001346 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8d7 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e66:	e0b9      	b.n	8005fdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80ab 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 80a6 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e4      	bne.n	8005e94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eee:	633a      	str	r2, [r7, #48]	; 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0310 	bic.w	r3, r3, #16
 8005f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	617b      	str	r3, [r7, #20]
   return(result);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e4      	bne.n	8005f16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f85b 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f5e:	e03f      	b.n	8005fe0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <HAL_UART_IRQHandler+0x56a>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fe4c 	bl	8006c20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f88:	e02d      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01c      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
    }
    return;
 8005fb2:	e017      	b.n	8005fe4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fc55 	bl	800687c <UART_EndTransmit_IT>
    return;
 8005fd2:	e008      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fd4:	bf00      	nop
 8005fd6:	e006      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005fd8:	bf00      	nop
 8005fda:	e004      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005fe4:	bf00      	nop
  }

}
 8005fe6:	37e8      	adds	r7, #232	; 0xe8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b8a      	ldr	r3, [pc, #552]	; (8006280 <UART_SetConfig+0x254>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	430b      	orrs	r3, r1
 8006062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a78      	ldr	r2, [pc, #480]	; (8006284 <UART_SetConfig+0x258>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d120      	bne.n	80060ea <UART_SetConfig+0xbe>
 80060a8:	4b77      	ldr	r3, [pc, #476]	; (8006288 <UART_SetConfig+0x25c>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d817      	bhi.n	80060e4 <UART_SetConfig+0xb8>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x90>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060d9 	.word	0x080060d9
 80060c4:	080060df 	.word	0x080060df
 80060c8:	080060d3 	.word	0x080060d3
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e01d      	b.n	800610e <UART_SetConfig+0xe2>
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e01a      	b.n	800610e <UART_SetConfig+0xe2>
 80060d8:	2304      	movs	r3, #4
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e017      	b.n	800610e <UART_SetConfig+0xe2>
 80060de:	2308      	movs	r3, #8
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e014      	b.n	800610e <UART_SetConfig+0xe2>
 80060e4:	2310      	movs	r3, #16
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e011      	b.n	800610e <UART_SetConfig+0xe2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a67      	ldr	r2, [pc, #412]	; (800628c <UART_SetConfig+0x260>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d102      	bne.n	80060fa <UART_SetConfig+0xce>
 80060f4:	2300      	movs	r3, #0
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0xe2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a64      	ldr	r2, [pc, #400]	; (8006290 <UART_SetConfig+0x264>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d102      	bne.n	800610a <UART_SetConfig+0xde>
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e001      	b.n	800610e <UART_SetConfig+0xe2>
 800610a:	2310      	movs	r3, #16
 800610c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d15a      	bne.n	80061ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006118:	7ffb      	ldrb	r3, [r7, #31]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d827      	bhi.n	800616e <UART_SetConfig+0x142>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0xf8>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006149 	.word	0x08006149
 8006128:	08006151 	.word	0x08006151
 800612c:	08006159 	.word	0x08006159
 8006130:	0800616f 	.word	0x0800616f
 8006134:	0800615f 	.word	0x0800615f
 8006138:	0800616f 	.word	0x0800616f
 800613c:	0800616f 	.word	0x0800616f
 8006140:	0800616f 	.word	0x0800616f
 8006144:	08006167 	.word	0x08006167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006148:	f7fd fc18 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 800614c:	61b8      	str	r0, [r7, #24]
        break;
 800614e:	e013      	b.n	8006178 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006150:	f7fd fc36 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 8006154:	61b8      	str	r0, [r7, #24]
        break;
 8006156:	e00f      	b.n	8006178 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006158:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <UART_SetConfig+0x268>)
 800615a:	61bb      	str	r3, [r7, #24]
        break;
 800615c:	e00c      	b.n	8006178 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615e:	f7fd fb97 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 8006162:	61b8      	str	r0, [r7, #24]
        break;
 8006164:	e008      	b.n	8006178 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616a:	61bb      	str	r3, [r7, #24]
        break;
 800616c:	e004      	b.n	8006178 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	77bb      	strb	r3, [r7, #30]
        break;
 8006176:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d074      	beq.n	8006268 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	005a      	lsls	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d916      	bls.n	80061c8 <UART_SetConfig+0x19c>
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a0:	d212      	bcs.n	80061c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f023 030f 	bic.w	r3, r3, #15
 80061aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	89fb      	ldrh	r3, [r7, #14]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	89fa      	ldrh	r2, [r7, #14]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e04f      	b.n	8006268 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77bb      	strb	r3, [r7, #30]
 80061cc:	e04c      	b.n	8006268 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061ce:	7ffb      	ldrb	r3, [r7, #31]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d828      	bhi.n	8006226 <UART_SetConfig+0x1fa>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x1b0>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006211 	.word	0x08006211
 80061e8:	08006227 	.word	0x08006227
 80061ec:	08006217 	.word	0x08006217
 80061f0:	08006227 	.word	0x08006227
 80061f4:	08006227 	.word	0x08006227
 80061f8:	08006227 	.word	0x08006227
 80061fc:	0800621f 	.word	0x0800621f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fd fbbc 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8006204:	61b8      	str	r0, [r7, #24]
        break;
 8006206:	e013      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006208:	f7fd fbda 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 800620c:	61b8      	str	r0, [r7, #24]
        break;
 800620e:	e00f      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006210:	4b20      	ldr	r3, [pc, #128]	; (8006294 <UART_SetConfig+0x268>)
 8006212:	61bb      	str	r3, [r7, #24]
        break;
 8006214:	e00c      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fd fb3b 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800621a:	61b8      	str	r0, [r7, #24]
        break;
 800621c:	e008      	b.n	8006230 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006222:	61bb      	str	r3, [r7, #24]
        break;
 8006224:	e004      	b.n	8006230 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	77bb      	strb	r3, [r7, #30]
        break;
 800622e:	bf00      	nop
    }

    if (pclk != 0U)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d018      	beq.n	8006268 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085a      	lsrs	r2, r3, #1
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	441a      	add	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b0f      	cmp	r3, #15
 800624e:	d909      	bls.n	8006264 <UART_SetConfig+0x238>
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006256:	d205      	bcs.n	8006264 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b29a      	uxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	e001      	b.n	8006268 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006274:	7fbb      	ldrb	r3, [r7, #30]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	efff69f3 	.word	0xefff69f3
 8006284:	40013800 	.word	0x40013800
 8006288:	40021000 	.word	0x40021000
 800628c:	40004400 	.word	0x40004400
 8006290:	40004800 	.word	0x40004800
 8006294:	007a1200 	.word	0x007a1200

08006298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006396:	d10a      	bne.n	80063ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b098      	sub	sp, #96	; 0x60
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063ec:	f7fa fe6a 	bl	80010c4 <HAL_GetTick>
 80063f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d12e      	bne.n	800645e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006408:	2200      	movs	r2, #0
 800640a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f88c 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d021      	beq.n	800645e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642e:	653b      	str	r3, [r7, #80]	; 0x50
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
 800643a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800643e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e6      	bne.n	800641a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e062      	b.n	8006524 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d149      	bne.n	8006500 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006474:	2200      	movs	r2, #0
 8006476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f856 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d03c      	beq.n	8006500 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	623b      	str	r3, [r7, #32]
   return(result);
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800649a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a4:	633b      	str	r3, [r7, #48]	; 0x30
 80064a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d8:	61fa      	str	r2, [r7, #28]
 80064da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	69b9      	ldr	r1, [r7, #24]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	617b      	str	r3, [r7, #20]
   return(result);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e011      	b.n	8006524 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3758      	adds	r7, #88	; 0x58
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	e049      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006544:	d045      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fa fdbd 	bl	80010c4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e048      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d031      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d110      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f8ff 	bl	8006788 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2208      	movs	r2, #8
 800658e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e029      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ac:	d111      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f8e5 	bl	8006788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0a6      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b097      	sub	sp, #92	; 0x5c
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d10e      	bne.n	800664e <UART_Start_Receive_IT+0x52>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <UART_Start_Receive_IT+0x48>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800663e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006642:	e02d      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800664c:	e028      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <UART_Start_Receive_IT+0x76>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <UART_Start_Receive_IT+0x6c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006666:	e01b      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	227f      	movs	r2, #127	; 0x7f
 800666c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006670:	e016      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667a:	d10d      	bne.n	8006698 <UART_Start_Receive_IT+0x9c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <UART_Start_Receive_IT+0x92>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	227f      	movs	r2, #127	; 0x7f
 8006688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800668c:	e008      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	223f      	movs	r2, #63	; 0x3f
 8006692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006696:	e003      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2222      	movs	r2, #34	; 0x22
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80066d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ec:	d107      	bne.n	80066fe <UART_Start_Receive_IT+0x102>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a21      	ldr	r2, [pc, #132]	; (8006780 <UART_Start_Receive_IT+0x184>)
 80066fa:	669a      	str	r2, [r3, #104]	; 0x68
 80066fc:	e002      	b.n	8006704 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a20      	ldr	r2, [pc, #128]	; (8006784 <UART_Start_Receive_IT+0x188>)
 8006702:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d019      	beq.n	8006740 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e6      	bne.n	800670c <UART_Start_Receive_IT+0x110>
 800673e:	e018      	b.n	8006772 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	613b      	str	r3, [r7, #16]
   return(result);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f043 0320 	orr.w	r3, r3, #32
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	69f9      	ldr	r1, [r7, #28]
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	61bb      	str	r3, [r7, #24]
   return(result);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e6      	bne.n	8006740 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	375c      	adds	r7, #92	; 0x5c
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	08006a79 	.word	0x08006a79
 8006784:	080068d1 	.word	0x080068d1

08006788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b095      	sub	sp, #84	; 0x54
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ae:	643b      	str	r3, [r7, #64]	; 0x40
 80067b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d118      	bne.n	8006830 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	60bb      	str	r3, [r7, #8]
   return(result);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0310 	bic.w	r3, r3, #16
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6979      	ldr	r1, [r7, #20]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e6      	bne.n	80067fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006844:	bf00      	nop
 8006846:	3754      	adds	r7, #84	; 0x54
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fbc6 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	60bb      	str	r3, [r7, #8]
   return(result);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6979      	ldr	r1, [r7, #20]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	613b      	str	r3, [r7, #16]
   return(result);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e6      	bne.n	8006884 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fb92 	bl	8005fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c8:	bf00      	nop
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b09c      	sub	sp, #112	; 0x70
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	2b22      	cmp	r3, #34	; 0x22
 80068ea:	f040 80b9 	bne.w	8006a60 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068fc:	b2d9      	uxtb	r1, r3
 80068fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006902:	b2da      	uxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	400a      	ands	r2, r1
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 809c 	bne.w	8006a70 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694c:	66bb      	str	r3, [r7, #104]	; 0x68
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006956:	65bb      	str	r3, [r7, #88]	; 0x58
 8006958:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800695c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	667b      	str	r3, [r7, #100]	; 0x64
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800698a:	647a      	str	r2, [r7, #68]	; 0x44
 800698c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d018      	beq.n	80069f2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	623b      	str	r3, [r7, #32]
   return(result);
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069d4:	663b      	str	r3, [r7, #96]	; 0x60
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069de:	633b      	str	r3, [r7, #48]	; 0x30
 80069e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d12e      	bne.n	8006a58 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 0310 	bic.w	r3, r3, #16
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	69b9      	ldr	r1, [r7, #24]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e6      	bne.n	8006a00 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d103      	bne.n	8006a48 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fadf 	bl	8006014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a56:	e00b      	b.n	8006a70 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fa f823 	bl	8000aa4 <HAL_UART_RxCpltCallback>
}
 8006a5e:	e007      	b.n	8006a70 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	619a      	str	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	3770      	adds	r7, #112	; 0x70
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b09c      	sub	sp, #112	; 0x70
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	2b22      	cmp	r3, #34	; 0x22
 8006a92:	f040 80b9 	bne.w	8006c08 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aa6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006aaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ab4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	1c9a      	adds	r2, r3, #2
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 809c 	bne.w	8006c18 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af4:	667b      	str	r3, [r7, #100]	; 0x64
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006afe:	657b      	str	r3, [r7, #84]	; 0x54
 8006b00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e6      	bne.n	8006ae0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3308      	adds	r3, #8
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b32:	643a      	str	r2, [r7, #64]	; 0x40
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d018      	beq.n	8006b9a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d12e      	bne.n	8006c00 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f023 0310 	bic.w	r3, r3, #16
 8006bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6979      	ldr	r1, [r7, #20]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e6      	bne.n	8006ba8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d103      	bne.n	8006bf0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2210      	movs	r2, #16
 8006bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fa0b 	bl	8006014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bfe:	e00b      	b.n	8006c18 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7f9 ff4f 	bl	8000aa4 <HAL_UART_RxCpltCallback>
}
 8006c06:	e007      	b.n	8006c18 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	619a      	str	r2, [r3, #24]
}
 8006c18:	bf00      	nop
 8006c1a:	3770      	adds	r7, #112	; 0x70
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <atoi>:
 8006c34:	220a      	movs	r2, #10
 8006c36:	2100      	movs	r1, #0
 8006c38:	f000 b8a2 	b.w	8006d80 <strtol>

08006c3c <siprintf>:
 8006c3c:	b40e      	push	{r1, r2, r3}
 8006c3e:	b500      	push	{lr}
 8006c40:	b09c      	sub	sp, #112	; 0x70
 8006c42:	ab1d      	add	r3, sp, #116	; 0x74
 8006c44:	9002      	str	r0, [sp, #8]
 8006c46:	9006      	str	r0, [sp, #24]
 8006c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c4c:	4809      	ldr	r0, [pc, #36]	; (8006c74 <siprintf+0x38>)
 8006c4e:	9107      	str	r1, [sp, #28]
 8006c50:	9104      	str	r1, [sp, #16]
 8006c52:	4909      	ldr	r1, [pc, #36]	; (8006c78 <siprintf+0x3c>)
 8006c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c58:	9105      	str	r1, [sp, #20]
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	a902      	add	r1, sp, #8
 8006c60:	f000 f926 	bl	8006eb0 <_svfiprintf_r>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	b01c      	add	sp, #112	; 0x70
 8006c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c70:	b003      	add	sp, #12
 8006c72:	4770      	bx	lr
 8006c74:	20000068 	.word	0x20000068
 8006c78:	ffff0208 	.word	0xffff0208

08006c7c <_strtol_l.constprop.0>:
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c82:	d001      	beq.n	8006c88 <_strtol_l.constprop.0+0xc>
 8006c84:	2b24      	cmp	r3, #36	; 0x24
 8006c86:	d906      	bls.n	8006c96 <_strtol_l.constprop.0+0x1a>
 8006c88:	f000 f88c 	bl	8006da4 <__errno>
 8006c8c:	2316      	movs	r3, #22
 8006c8e:	6003      	str	r3, [r0, #0]
 8006c90:	2000      	movs	r0, #0
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d7c <_strtol_l.constprop.0+0x100>
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	462e      	mov	r6, r5
 8006c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ca2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006ca6:	f017 0708 	ands.w	r7, r7, #8
 8006caa:	d1f7      	bne.n	8006c9c <_strtol_l.constprop.0+0x20>
 8006cac:	2c2d      	cmp	r4, #45	; 0x2d
 8006cae:	d132      	bne.n	8006d16 <_strtol_l.constprop.0+0x9a>
 8006cb0:	782c      	ldrb	r4, [r5, #0]
 8006cb2:	2701      	movs	r7, #1
 8006cb4:	1cb5      	adds	r5, r6, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d05b      	beq.n	8006d72 <_strtol_l.constprop.0+0xf6>
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d109      	bne.n	8006cd2 <_strtol_l.constprop.0+0x56>
 8006cbe:	2c30      	cmp	r4, #48	; 0x30
 8006cc0:	d107      	bne.n	8006cd2 <_strtol_l.constprop.0+0x56>
 8006cc2:	782c      	ldrb	r4, [r5, #0]
 8006cc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006cc8:	2c58      	cmp	r4, #88	; 0x58
 8006cca:	d14d      	bne.n	8006d68 <_strtol_l.constprop.0+0xec>
 8006ccc:	786c      	ldrb	r4, [r5, #1]
 8006cce:	2310      	movs	r3, #16
 8006cd0:	3502      	adds	r5, #2
 8006cd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006cd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006cda:	f04f 0e00 	mov.w	lr, #0
 8006cde:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ce2:	4676      	mov	r6, lr
 8006ce4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ce8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006cec:	f1bc 0f09 	cmp.w	ip, #9
 8006cf0:	d816      	bhi.n	8006d20 <_strtol_l.constprop.0+0xa4>
 8006cf2:	4664      	mov	r4, ip
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	dd24      	ble.n	8006d42 <_strtol_l.constprop.0+0xc6>
 8006cf8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006cfc:	d008      	beq.n	8006d10 <_strtol_l.constprop.0+0x94>
 8006cfe:	45b1      	cmp	r9, r6
 8006d00:	d31c      	bcc.n	8006d3c <_strtol_l.constprop.0+0xc0>
 8006d02:	d101      	bne.n	8006d08 <_strtol_l.constprop.0+0x8c>
 8006d04:	45a2      	cmp	sl, r4
 8006d06:	db19      	blt.n	8006d3c <_strtol_l.constprop.0+0xc0>
 8006d08:	fb06 4603 	mla	r6, r6, r3, r4
 8006d0c:	f04f 0e01 	mov.w	lr, #1
 8006d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d14:	e7e8      	b.n	8006ce8 <_strtol_l.constprop.0+0x6c>
 8006d16:	2c2b      	cmp	r4, #43	; 0x2b
 8006d18:	bf04      	itt	eq
 8006d1a:	782c      	ldrbeq	r4, [r5, #0]
 8006d1c:	1cb5      	addeq	r5, r6, #2
 8006d1e:	e7ca      	b.n	8006cb6 <_strtol_l.constprop.0+0x3a>
 8006d20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d24:	f1bc 0f19 	cmp.w	ip, #25
 8006d28:	d801      	bhi.n	8006d2e <_strtol_l.constprop.0+0xb2>
 8006d2a:	3c37      	subs	r4, #55	; 0x37
 8006d2c:	e7e2      	b.n	8006cf4 <_strtol_l.constprop.0+0x78>
 8006d2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d32:	f1bc 0f19 	cmp.w	ip, #25
 8006d36:	d804      	bhi.n	8006d42 <_strtol_l.constprop.0+0xc6>
 8006d38:	3c57      	subs	r4, #87	; 0x57
 8006d3a:	e7db      	b.n	8006cf4 <_strtol_l.constprop.0+0x78>
 8006d3c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006d40:	e7e6      	b.n	8006d10 <_strtol_l.constprop.0+0x94>
 8006d42:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006d46:	d105      	bne.n	8006d54 <_strtol_l.constprop.0+0xd8>
 8006d48:	2322      	movs	r3, #34	; 0x22
 8006d4a:	6003      	str	r3, [r0, #0]
 8006d4c:	4646      	mov	r6, r8
 8006d4e:	b942      	cbnz	r2, 8006d62 <_strtol_l.constprop.0+0xe6>
 8006d50:	4630      	mov	r0, r6
 8006d52:	e79e      	b.n	8006c92 <_strtol_l.constprop.0+0x16>
 8006d54:	b107      	cbz	r7, 8006d58 <_strtol_l.constprop.0+0xdc>
 8006d56:	4276      	negs	r6, r6
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d0f9      	beq.n	8006d50 <_strtol_l.constprop.0+0xd4>
 8006d5c:	f1be 0f00 	cmp.w	lr, #0
 8006d60:	d000      	beq.n	8006d64 <_strtol_l.constprop.0+0xe8>
 8006d62:	1e69      	subs	r1, r5, #1
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	e7f3      	b.n	8006d50 <_strtol_l.constprop.0+0xd4>
 8006d68:	2430      	movs	r4, #48	; 0x30
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1b1      	bne.n	8006cd2 <_strtol_l.constprop.0+0x56>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	e7af      	b.n	8006cd2 <_strtol_l.constprop.0+0x56>
 8006d72:	2c30      	cmp	r4, #48	; 0x30
 8006d74:	d0a5      	beq.n	8006cc2 <_strtol_l.constprop.0+0x46>
 8006d76:	230a      	movs	r3, #10
 8006d78:	e7ab      	b.n	8006cd2 <_strtol_l.constprop.0+0x56>
 8006d7a:	bf00      	nop
 8006d7c:	080076f1 	.word	0x080076f1

08006d80 <strtol>:
 8006d80:	4613      	mov	r3, r2
 8006d82:	460a      	mov	r2, r1
 8006d84:	4601      	mov	r1, r0
 8006d86:	4802      	ldr	r0, [pc, #8]	; (8006d90 <strtol+0x10>)
 8006d88:	6800      	ldr	r0, [r0, #0]
 8006d8a:	f7ff bf77 	b.w	8006c7c <_strtol_l.constprop.0>
 8006d8e:	bf00      	nop
 8006d90:	20000068 	.word	0x20000068

08006d94 <memset>:
 8006d94:	4402      	add	r2, r0
 8006d96:	4603      	mov	r3, r0
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d100      	bne.n	8006d9e <memset+0xa>
 8006d9c:	4770      	bx	lr
 8006d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006da2:	e7f9      	b.n	8006d98 <memset+0x4>

08006da4 <__errno>:
 8006da4:	4b01      	ldr	r3, [pc, #4]	; (8006dac <__errno+0x8>)
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000068 	.word	0x20000068

08006db0 <__libc_init_array>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4d0d      	ldr	r5, [pc, #52]	; (8006de8 <__libc_init_array+0x38>)
 8006db4:	4c0d      	ldr	r4, [pc, #52]	; (8006dec <__libc_init_array+0x3c>)
 8006db6:	1b64      	subs	r4, r4, r5
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	2600      	movs	r6, #0
 8006dbc:	42a6      	cmp	r6, r4
 8006dbe:	d109      	bne.n	8006dd4 <__libc_init_array+0x24>
 8006dc0:	4d0b      	ldr	r5, [pc, #44]	; (8006df0 <__libc_init_array+0x40>)
 8006dc2:	4c0c      	ldr	r4, [pc, #48]	; (8006df4 <__libc_init_array+0x44>)
 8006dc4:	f000 fc6a 	bl	800769c <_init>
 8006dc8:	1b64      	subs	r4, r4, r5
 8006dca:	10a4      	asrs	r4, r4, #2
 8006dcc:	2600      	movs	r6, #0
 8006dce:	42a6      	cmp	r6, r4
 8006dd0:	d105      	bne.n	8006dde <__libc_init_array+0x2e>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd8:	4798      	blx	r3
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7ee      	b.n	8006dbc <__libc_init_array+0xc>
 8006dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de2:	4798      	blx	r3
 8006de4:	3601      	adds	r6, #1
 8006de6:	e7f2      	b.n	8006dce <__libc_init_array+0x1e>
 8006de8:	08007824 	.word	0x08007824
 8006dec:	08007824 	.word	0x08007824
 8006df0:	08007824 	.word	0x08007824
 8006df4:	08007828 	.word	0x08007828

08006df8 <__retarget_lock_acquire_recursive>:
 8006df8:	4770      	bx	lr

08006dfa <__retarget_lock_release_recursive>:
 8006dfa:	4770      	bx	lr

08006dfc <__ssputs_r>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	688e      	ldr	r6, [r1, #8]
 8006e02:	461f      	mov	r7, r3
 8006e04:	42be      	cmp	r6, r7
 8006e06:	680b      	ldr	r3, [r1, #0]
 8006e08:	4682      	mov	sl, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4690      	mov	r8, r2
 8006e0e:	d82c      	bhi.n	8006e6a <__ssputs_r+0x6e>
 8006e10:	898a      	ldrh	r2, [r1, #12]
 8006e12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e16:	d026      	beq.n	8006e66 <__ssputs_r+0x6a>
 8006e18:	6965      	ldr	r5, [r4, #20]
 8006e1a:	6909      	ldr	r1, [r1, #16]
 8006e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e20:	eba3 0901 	sub.w	r9, r3, r1
 8006e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e28:	1c7b      	adds	r3, r7, #1
 8006e2a:	444b      	add	r3, r9
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	bf38      	it	cc
 8006e32:	461d      	movcc	r5, r3
 8006e34:	0553      	lsls	r3, r2, #21
 8006e36:	d527      	bpl.n	8006e88 <__ssputs_r+0x8c>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f000 f957 	bl	80070ec <_malloc_r>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	b360      	cbz	r0, 8006e9c <__ssputs_r+0xa0>
 8006e42:	6921      	ldr	r1, [r4, #16]
 8006e44:	464a      	mov	r2, r9
 8006e46:	f000 fbc7 	bl	80075d8 <memcpy>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	6126      	str	r6, [r4, #16]
 8006e58:	6165      	str	r5, [r4, #20]
 8006e5a:	444e      	add	r6, r9
 8006e5c:	eba5 0509 	sub.w	r5, r5, r9
 8006e60:	6026      	str	r6, [r4, #0]
 8006e62:	60a5      	str	r5, [r4, #8]
 8006e64:	463e      	mov	r6, r7
 8006e66:	42be      	cmp	r6, r7
 8006e68:	d900      	bls.n	8006e6c <__ssputs_r+0x70>
 8006e6a:	463e      	mov	r6, r7
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	4632      	mov	r2, r6
 8006e70:	4641      	mov	r1, r8
 8006e72:	f000 fb86 	bl	8007582 <memmove>
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	1b9b      	subs	r3, r3, r6
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	4433      	add	r3, r6
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	2000      	movs	r0, #0
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e88:	462a      	mov	r2, r5
 8006e8a:	f000 fb4b 	bl	8007524 <_realloc_r>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d1e0      	bne.n	8006e56 <__ssputs_r+0x5a>
 8006e94:	6921      	ldr	r1, [r4, #16]
 8006e96:	4650      	mov	r0, sl
 8006e98:	f000 fbac 	bl	80075f4 <_free_r>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	f8ca 3000 	str.w	r3, [sl]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eae:	e7e9      	b.n	8006e84 <__ssputs_r+0x88>

08006eb0 <_svfiprintf_r>:
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	4698      	mov	r8, r3
 8006eb6:	898b      	ldrh	r3, [r1, #12]
 8006eb8:	061b      	lsls	r3, r3, #24
 8006eba:	b09d      	sub	sp, #116	; 0x74
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	d50e      	bpl.n	8006ee2 <_svfiprintf_r+0x32>
 8006ec4:	690b      	ldr	r3, [r1, #16]
 8006ec6:	b963      	cbnz	r3, 8006ee2 <_svfiprintf_r+0x32>
 8006ec8:	2140      	movs	r1, #64	; 0x40
 8006eca:	f000 f90f 	bl	80070ec <_malloc_r>
 8006ece:	6028      	str	r0, [r5, #0]
 8006ed0:	6128      	str	r0, [r5, #16]
 8006ed2:	b920      	cbnz	r0, 8006ede <_svfiprintf_r+0x2e>
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006edc:	e0d0      	b.n	8007080 <_svfiprintf_r+0x1d0>
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	616b      	str	r3, [r5, #20]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee6:	2320      	movs	r3, #32
 8006ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef0:	2330      	movs	r3, #48	; 0x30
 8006ef2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007098 <_svfiprintf_r+0x1e8>
 8006ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006efa:	f04f 0901 	mov.w	r9, #1
 8006efe:	4623      	mov	r3, r4
 8006f00:	469a      	mov	sl, r3
 8006f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f06:	b10a      	cbz	r2, 8006f0c <_svfiprintf_r+0x5c>
 8006f08:	2a25      	cmp	r2, #37	; 0x25
 8006f0a:	d1f9      	bne.n	8006f00 <_svfiprintf_r+0x50>
 8006f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f10:	d00b      	beq.n	8006f2a <_svfiprintf_r+0x7a>
 8006f12:	465b      	mov	r3, fp
 8006f14:	4622      	mov	r2, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ff6f 	bl	8006dfc <__ssputs_r>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f000 80a9 	beq.w	8007076 <_svfiprintf_r+0x1c6>
 8006f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f26:	445a      	add	r2, fp
 8006f28:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a1 	beq.w	8007076 <_svfiprintf_r+0x1c6>
 8006f34:	2300      	movs	r3, #0
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f3e:	f10a 0a01 	add.w	sl, sl, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	9307      	str	r3, [sp, #28]
 8006f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f4c:	4654      	mov	r4, sl
 8006f4e:	2205      	movs	r2, #5
 8006f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f54:	4850      	ldr	r0, [pc, #320]	; (8007098 <_svfiprintf_r+0x1e8>)
 8006f56:	f7f9 f943 	bl	80001e0 <memchr>
 8006f5a:	9a04      	ldr	r2, [sp, #16]
 8006f5c:	b9d8      	cbnz	r0, 8006f96 <_svfiprintf_r+0xe6>
 8006f5e:	06d0      	lsls	r0, r2, #27
 8006f60:	bf44      	itt	mi
 8006f62:	2320      	movmi	r3, #32
 8006f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f68:	0711      	lsls	r1, r2, #28
 8006f6a:	bf44      	itt	mi
 8006f6c:	232b      	movmi	r3, #43	; 0x2b
 8006f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f72:	f89a 3000 	ldrb.w	r3, [sl]
 8006f76:	2b2a      	cmp	r3, #42	; 0x2a
 8006f78:	d015      	beq.n	8006fa6 <_svfiprintf_r+0xf6>
 8006f7a:	9a07      	ldr	r2, [sp, #28]
 8006f7c:	4654      	mov	r4, sl
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f04f 0c0a 	mov.w	ip, #10
 8006f84:	4621      	mov	r1, r4
 8006f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8a:	3b30      	subs	r3, #48	; 0x30
 8006f8c:	2b09      	cmp	r3, #9
 8006f8e:	d94d      	bls.n	800702c <_svfiprintf_r+0x17c>
 8006f90:	b1b0      	cbz	r0, 8006fc0 <_svfiprintf_r+0x110>
 8006f92:	9207      	str	r2, [sp, #28]
 8006f94:	e014      	b.n	8006fc0 <_svfiprintf_r+0x110>
 8006f96:	eba0 0308 	sub.w	r3, r0, r8
 8006f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	46a2      	mov	sl, r4
 8006fa4:	e7d2      	b.n	8006f4c <_svfiprintf_r+0x9c>
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	9103      	str	r1, [sp, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfbb      	ittet	lt
 8006fb2:	425b      	neglt	r3, r3
 8006fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006fb8:	9307      	strge	r3, [sp, #28]
 8006fba:	9307      	strlt	r3, [sp, #28]
 8006fbc:	bfb8      	it	lt
 8006fbe:	9204      	strlt	r2, [sp, #16]
 8006fc0:	7823      	ldrb	r3, [r4, #0]
 8006fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc4:	d10c      	bne.n	8006fe0 <_svfiprintf_r+0x130>
 8006fc6:	7863      	ldrb	r3, [r4, #1]
 8006fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fca:	d134      	bne.n	8007036 <_svfiprintf_r+0x186>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	9203      	str	r2, [sp, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfb8      	it	lt
 8006fd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fdc:	3402      	adds	r4, #2
 8006fde:	9305      	str	r3, [sp, #20]
 8006fe0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80070a8 <_svfiprintf_r+0x1f8>
 8006fe4:	7821      	ldrb	r1, [r4, #0]
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	4650      	mov	r0, sl
 8006fea:	f7f9 f8f9 	bl	80001e0 <memchr>
 8006fee:	b138      	cbz	r0, 8007000 <_svfiprintf_r+0x150>
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	eba0 000a 	sub.w	r0, r0, sl
 8006ff6:	2240      	movs	r2, #64	; 0x40
 8006ff8:	4082      	lsls	r2, r0
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	3401      	adds	r4, #1
 8006ffe:	9304      	str	r3, [sp, #16]
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	4825      	ldr	r0, [pc, #148]	; (800709c <_svfiprintf_r+0x1ec>)
 8007006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800700a:	2206      	movs	r2, #6
 800700c:	f7f9 f8e8 	bl	80001e0 <memchr>
 8007010:	2800      	cmp	r0, #0
 8007012:	d038      	beq.n	8007086 <_svfiprintf_r+0x1d6>
 8007014:	4b22      	ldr	r3, [pc, #136]	; (80070a0 <_svfiprintf_r+0x1f0>)
 8007016:	bb1b      	cbnz	r3, 8007060 <_svfiprintf_r+0x1b0>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	3307      	adds	r3, #7
 800701c:	f023 0307 	bic.w	r3, r3, #7
 8007020:	3308      	adds	r3, #8
 8007022:	9303      	str	r3, [sp, #12]
 8007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007026:	4433      	add	r3, r6
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	e768      	b.n	8006efe <_svfiprintf_r+0x4e>
 800702c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007030:	460c      	mov	r4, r1
 8007032:	2001      	movs	r0, #1
 8007034:	e7a6      	b.n	8006f84 <_svfiprintf_r+0xd4>
 8007036:	2300      	movs	r3, #0
 8007038:	3401      	adds	r4, #1
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	4619      	mov	r1, r3
 800703e:	f04f 0c0a 	mov.w	ip, #10
 8007042:	4620      	mov	r0, r4
 8007044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007048:	3a30      	subs	r2, #48	; 0x30
 800704a:	2a09      	cmp	r2, #9
 800704c:	d903      	bls.n	8007056 <_svfiprintf_r+0x1a6>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0c6      	beq.n	8006fe0 <_svfiprintf_r+0x130>
 8007052:	9105      	str	r1, [sp, #20]
 8007054:	e7c4      	b.n	8006fe0 <_svfiprintf_r+0x130>
 8007056:	fb0c 2101 	mla	r1, ip, r1, r2
 800705a:	4604      	mov	r4, r0
 800705c:	2301      	movs	r3, #1
 800705e:	e7f0      	b.n	8007042 <_svfiprintf_r+0x192>
 8007060:	ab03      	add	r3, sp, #12
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	462a      	mov	r2, r5
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <_svfiprintf_r+0x1f4>)
 8007068:	a904      	add	r1, sp, #16
 800706a:	4638      	mov	r0, r7
 800706c:	f3af 8000 	nop.w
 8007070:	1c42      	adds	r2, r0, #1
 8007072:	4606      	mov	r6, r0
 8007074:	d1d6      	bne.n	8007024 <_svfiprintf_r+0x174>
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	065b      	lsls	r3, r3, #25
 800707a:	f53f af2d 	bmi.w	8006ed8 <_svfiprintf_r+0x28>
 800707e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007080:	b01d      	add	sp, #116	; 0x74
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	ab03      	add	r3, sp, #12
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	462a      	mov	r2, r5
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <_svfiprintf_r+0x1f4>)
 800708e:	a904      	add	r1, sp, #16
 8007090:	4638      	mov	r0, r7
 8007092:	f000 f919 	bl	80072c8 <_printf_i>
 8007096:	e7eb      	b.n	8007070 <_svfiprintf_r+0x1c0>
 8007098:	080077f1 	.word	0x080077f1
 800709c:	080077fb 	.word	0x080077fb
 80070a0:	00000000 	.word	0x00000000
 80070a4:	08006dfd 	.word	0x08006dfd
 80070a8:	080077f7 	.word	0x080077f7

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0e      	ldr	r6, [pc, #56]	; (80070e8 <sbrk_aligned+0x3c>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 fa7e 	bl	80075b8 <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fa79 	bl	80075b8 <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d00a      	beq.n	80070e0 <sbrk_aligned+0x34>
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d007      	beq.n	80070e4 <sbrk_aligned+0x38>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 fa6e 	bl	80075b8 <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d101      	bne.n	80070e4 <sbrk_aligned+0x38>
 80070e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070e4:	4620      	mov	r0, r4
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	200003d4 	.word	0x200003d4

080070ec <_malloc_r>:
 80070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f0:	1ccd      	adds	r5, r1, #3
 80070f2:	f025 0503 	bic.w	r5, r5, #3
 80070f6:	3508      	adds	r5, #8
 80070f8:	2d0c      	cmp	r5, #12
 80070fa:	bf38      	it	cc
 80070fc:	250c      	movcc	r5, #12
 80070fe:	2d00      	cmp	r5, #0
 8007100:	4607      	mov	r7, r0
 8007102:	db01      	blt.n	8007108 <_malloc_r+0x1c>
 8007104:	42a9      	cmp	r1, r5
 8007106:	d905      	bls.n	8007114 <_malloc_r+0x28>
 8007108:	230c      	movs	r3, #12
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	2600      	movs	r6, #0
 800710e:	4630      	mov	r0, r6
 8007110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007114:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071e8 <_malloc_r+0xfc>
 8007118:	f000 f9f8 	bl	800750c <__malloc_lock>
 800711c:	f8d8 3000 	ldr.w	r3, [r8]
 8007120:	461c      	mov	r4, r3
 8007122:	bb5c      	cbnz	r4, 800717c <_malloc_r+0x90>
 8007124:	4629      	mov	r1, r5
 8007126:	4638      	mov	r0, r7
 8007128:	f7ff ffc0 	bl	80070ac <sbrk_aligned>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	4604      	mov	r4, r0
 8007130:	d155      	bne.n	80071de <_malloc_r+0xf2>
 8007132:	f8d8 4000 	ldr.w	r4, [r8]
 8007136:	4626      	mov	r6, r4
 8007138:	2e00      	cmp	r6, #0
 800713a:	d145      	bne.n	80071c8 <_malloc_r+0xdc>
 800713c:	2c00      	cmp	r4, #0
 800713e:	d048      	beq.n	80071d2 <_malloc_r+0xe6>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	4631      	mov	r1, r6
 8007144:	4638      	mov	r0, r7
 8007146:	eb04 0903 	add.w	r9, r4, r3
 800714a:	f000 fa35 	bl	80075b8 <_sbrk_r>
 800714e:	4581      	cmp	r9, r0
 8007150:	d13f      	bne.n	80071d2 <_malloc_r+0xe6>
 8007152:	6821      	ldr	r1, [r4, #0]
 8007154:	1a6d      	subs	r5, r5, r1
 8007156:	4629      	mov	r1, r5
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ffa7 	bl	80070ac <sbrk_aligned>
 800715e:	3001      	adds	r0, #1
 8007160:	d037      	beq.n	80071d2 <_malloc_r+0xe6>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	442b      	add	r3, r5
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	f8d8 3000 	ldr.w	r3, [r8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d038      	beq.n	80071e2 <_malloc_r+0xf6>
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	42a2      	cmp	r2, r4
 8007174:	d12b      	bne.n	80071ce <_malloc_r+0xe2>
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	e00f      	b.n	800719c <_malloc_r+0xb0>
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	1b52      	subs	r2, r2, r5
 8007180:	d41f      	bmi.n	80071c2 <_malloc_r+0xd6>
 8007182:	2a0b      	cmp	r2, #11
 8007184:	d917      	bls.n	80071b6 <_malloc_r+0xca>
 8007186:	1961      	adds	r1, r4, r5
 8007188:	42a3      	cmp	r3, r4
 800718a:	6025      	str	r5, [r4, #0]
 800718c:	bf18      	it	ne
 800718e:	6059      	strne	r1, [r3, #4]
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	bf08      	it	eq
 8007194:	f8c8 1000 	streq.w	r1, [r8]
 8007198:	5162      	str	r2, [r4, r5]
 800719a:	604b      	str	r3, [r1, #4]
 800719c:	4638      	mov	r0, r7
 800719e:	f104 060b 	add.w	r6, r4, #11
 80071a2:	f000 f9b9 	bl	8007518 <__malloc_unlock>
 80071a6:	f026 0607 	bic.w	r6, r6, #7
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	1af2      	subs	r2, r6, r3
 80071ae:	d0ae      	beq.n	800710e <_malloc_r+0x22>
 80071b0:	1b9b      	subs	r3, r3, r6
 80071b2:	50a3      	str	r3, [r4, r2]
 80071b4:	e7ab      	b.n	800710e <_malloc_r+0x22>
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	d1dd      	bne.n	8007178 <_malloc_r+0x8c>
 80071bc:	f8c8 2000 	str.w	r2, [r8]
 80071c0:	e7ec      	b.n	800719c <_malloc_r+0xb0>
 80071c2:	4623      	mov	r3, r4
 80071c4:	6864      	ldr	r4, [r4, #4]
 80071c6:	e7ac      	b.n	8007122 <_malloc_r+0x36>
 80071c8:	4634      	mov	r4, r6
 80071ca:	6876      	ldr	r6, [r6, #4]
 80071cc:	e7b4      	b.n	8007138 <_malloc_r+0x4c>
 80071ce:	4613      	mov	r3, r2
 80071d0:	e7cc      	b.n	800716c <_malloc_r+0x80>
 80071d2:	230c      	movs	r3, #12
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	4638      	mov	r0, r7
 80071d8:	f000 f99e 	bl	8007518 <__malloc_unlock>
 80071dc:	e797      	b.n	800710e <_malloc_r+0x22>
 80071de:	6025      	str	r5, [r4, #0]
 80071e0:	e7dc      	b.n	800719c <_malloc_r+0xb0>
 80071e2:	605b      	str	r3, [r3, #4]
 80071e4:	deff      	udf	#255	; 0xff
 80071e6:	bf00      	nop
 80071e8:	200003d0 	.word	0x200003d0

080071ec <_printf_common>:
 80071ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	4616      	mov	r6, r2
 80071f2:	4699      	mov	r9, r3
 80071f4:	688a      	ldr	r2, [r1, #8]
 80071f6:	690b      	ldr	r3, [r1, #16]
 80071f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bfb8      	it	lt
 8007200:	4613      	movlt	r3, r2
 8007202:	6033      	str	r3, [r6, #0]
 8007204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007208:	4607      	mov	r7, r0
 800720a:	460c      	mov	r4, r1
 800720c:	b10a      	cbz	r2, 8007212 <_printf_common+0x26>
 800720e:	3301      	adds	r3, #1
 8007210:	6033      	str	r3, [r6, #0]
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	0699      	lsls	r1, r3, #26
 8007216:	bf42      	ittt	mi
 8007218:	6833      	ldrmi	r3, [r6, #0]
 800721a:	3302      	addmi	r3, #2
 800721c:	6033      	strmi	r3, [r6, #0]
 800721e:	6825      	ldr	r5, [r4, #0]
 8007220:	f015 0506 	ands.w	r5, r5, #6
 8007224:	d106      	bne.n	8007234 <_printf_common+0x48>
 8007226:	f104 0a19 	add.w	sl, r4, #25
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	6832      	ldr	r2, [r6, #0]
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	42ab      	cmp	r3, r5
 8007232:	dc26      	bgt.n	8007282 <_printf_common+0x96>
 8007234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007238:	1e13      	subs	r3, r2, #0
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	bf18      	it	ne
 800723e:	2301      	movne	r3, #1
 8007240:	0692      	lsls	r2, r2, #26
 8007242:	d42b      	bmi.n	800729c <_printf_common+0xb0>
 8007244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007248:	4649      	mov	r1, r9
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d01e      	beq.n	8007290 <_printf_common+0xa4>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	6922      	ldr	r2, [r4, #16]
 8007256:	f003 0306 	and.w	r3, r3, #6
 800725a:	2b04      	cmp	r3, #4
 800725c:	bf02      	ittt	eq
 800725e:	68e5      	ldreq	r5, [r4, #12]
 8007260:	6833      	ldreq	r3, [r6, #0]
 8007262:	1aed      	subeq	r5, r5, r3
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	bf0c      	ite	eq
 8007268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800726c:	2500      	movne	r5, #0
 800726e:	4293      	cmp	r3, r2
 8007270:	bfc4      	itt	gt
 8007272:	1a9b      	subgt	r3, r3, r2
 8007274:	18ed      	addgt	r5, r5, r3
 8007276:	2600      	movs	r6, #0
 8007278:	341a      	adds	r4, #26
 800727a:	42b5      	cmp	r5, r6
 800727c:	d11a      	bne.n	80072b4 <_printf_common+0xc8>
 800727e:	2000      	movs	r0, #0
 8007280:	e008      	b.n	8007294 <_printf_common+0xa8>
 8007282:	2301      	movs	r3, #1
 8007284:	4652      	mov	r2, sl
 8007286:	4649      	mov	r1, r9
 8007288:	4638      	mov	r0, r7
 800728a:	47c0      	blx	r8
 800728c:	3001      	adds	r0, #1
 800728e:	d103      	bne.n	8007298 <_printf_common+0xac>
 8007290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007298:	3501      	adds	r5, #1
 800729a:	e7c6      	b.n	800722a <_printf_common+0x3e>
 800729c:	18e1      	adds	r1, r4, r3
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	2030      	movs	r0, #48	; 0x30
 80072a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072a6:	4422      	add	r2, r4
 80072a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b0:	3302      	adds	r3, #2
 80072b2:	e7c7      	b.n	8007244 <_printf_common+0x58>
 80072b4:	2301      	movs	r3, #1
 80072b6:	4622      	mov	r2, r4
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d0e6      	beq.n	8007290 <_printf_common+0xa4>
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7d9      	b.n	800727a <_printf_common+0x8e>
	...

080072c8 <_printf_i>:
 80072c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	7e0f      	ldrb	r7, [r1, #24]
 80072ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d0:	2f78      	cmp	r7, #120	; 0x78
 80072d2:	4691      	mov	r9, r2
 80072d4:	4680      	mov	r8, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	469a      	mov	sl, r3
 80072da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072de:	d807      	bhi.n	80072f0 <_printf_i+0x28>
 80072e0:	2f62      	cmp	r7, #98	; 0x62
 80072e2:	d80a      	bhi.n	80072fa <_printf_i+0x32>
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	f000 80d4 	beq.w	8007492 <_printf_i+0x1ca>
 80072ea:	2f58      	cmp	r7, #88	; 0x58
 80072ec:	f000 80c0 	beq.w	8007470 <_printf_i+0x1a8>
 80072f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072f8:	e03a      	b.n	8007370 <_printf_i+0xa8>
 80072fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072fe:	2b15      	cmp	r3, #21
 8007300:	d8f6      	bhi.n	80072f0 <_printf_i+0x28>
 8007302:	a101      	add	r1, pc, #4	; (adr r1, 8007308 <_printf_i+0x40>)
 8007304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007308:	08007361 	.word	0x08007361
 800730c:	08007375 	.word	0x08007375
 8007310:	080072f1 	.word	0x080072f1
 8007314:	080072f1 	.word	0x080072f1
 8007318:	080072f1 	.word	0x080072f1
 800731c:	080072f1 	.word	0x080072f1
 8007320:	08007375 	.word	0x08007375
 8007324:	080072f1 	.word	0x080072f1
 8007328:	080072f1 	.word	0x080072f1
 800732c:	080072f1 	.word	0x080072f1
 8007330:	080072f1 	.word	0x080072f1
 8007334:	08007479 	.word	0x08007479
 8007338:	080073a1 	.word	0x080073a1
 800733c:	08007433 	.word	0x08007433
 8007340:	080072f1 	.word	0x080072f1
 8007344:	080072f1 	.word	0x080072f1
 8007348:	0800749b 	.word	0x0800749b
 800734c:	080072f1 	.word	0x080072f1
 8007350:	080073a1 	.word	0x080073a1
 8007354:	080072f1 	.word	0x080072f1
 8007358:	080072f1 	.word	0x080072f1
 800735c:	0800743b 	.word	0x0800743b
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	1d1a      	adds	r2, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007370:	2301      	movs	r3, #1
 8007372:	e09f      	b.n	80074b4 <_printf_i+0x1ec>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	0607      	lsls	r7, r0, #24
 800737a:	f103 0104 	add.w	r1, r3, #4
 800737e:	6029      	str	r1, [r5, #0]
 8007380:	d501      	bpl.n	8007386 <_printf_i+0xbe>
 8007382:	681e      	ldr	r6, [r3, #0]
 8007384:	e003      	b.n	800738e <_printf_i+0xc6>
 8007386:	0646      	lsls	r6, r0, #25
 8007388:	d5fb      	bpl.n	8007382 <_printf_i+0xba>
 800738a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800738e:	2e00      	cmp	r6, #0
 8007390:	da03      	bge.n	800739a <_printf_i+0xd2>
 8007392:	232d      	movs	r3, #45	; 0x2d
 8007394:	4276      	negs	r6, r6
 8007396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739a:	485a      	ldr	r0, [pc, #360]	; (8007504 <_printf_i+0x23c>)
 800739c:	230a      	movs	r3, #10
 800739e:	e012      	b.n	80073c6 <_printf_i+0xfe>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	1d19      	adds	r1, r3, #4
 80073a6:	6029      	str	r1, [r5, #0]
 80073a8:	0605      	lsls	r5, r0, #24
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0xe8>
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0xee>
 80073b0:	0641      	lsls	r1, r0, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0xe4>
 80073b4:	881e      	ldrh	r6, [r3, #0]
 80073b6:	4853      	ldr	r0, [pc, #332]	; (8007504 <_printf_i+0x23c>)
 80073b8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ba:	bf0c      	ite	eq
 80073bc:	2308      	moveq	r3, #8
 80073be:	230a      	movne	r3, #10
 80073c0:	2100      	movs	r1, #0
 80073c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073c6:	6865      	ldr	r5, [r4, #4]
 80073c8:	60a5      	str	r5, [r4, #8]
 80073ca:	2d00      	cmp	r5, #0
 80073cc:	bfa2      	ittt	ge
 80073ce:	6821      	ldrge	r1, [r4, #0]
 80073d0:	f021 0104 	bicge.w	r1, r1, #4
 80073d4:	6021      	strge	r1, [r4, #0]
 80073d6:	b90e      	cbnz	r6, 80073dc <_printf_i+0x114>
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d04b      	beq.n	8007474 <_printf_i+0x1ac>
 80073dc:	4615      	mov	r5, r2
 80073de:	fbb6 f1f3 	udiv	r1, r6, r3
 80073e2:	fb03 6711 	mls	r7, r3, r1, r6
 80073e6:	5dc7      	ldrb	r7, [r0, r7]
 80073e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073ec:	4637      	mov	r7, r6
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	460e      	mov	r6, r1
 80073f2:	d9f4      	bls.n	80073de <_printf_i+0x116>
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10b      	bne.n	8007410 <_printf_i+0x148>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07de      	lsls	r6, r3, #31
 80073fc:	d508      	bpl.n	8007410 <_printf_i+0x148>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	4299      	cmp	r1, r3
 8007404:	bfde      	ittt	le
 8007406:	2330      	movle	r3, #48	; 0x30
 8007408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800740c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007410:	1b52      	subs	r2, r2, r5
 8007412:	6122      	str	r2, [r4, #16]
 8007414:	f8cd a000 	str.w	sl, [sp]
 8007418:	464b      	mov	r3, r9
 800741a:	aa03      	add	r2, sp, #12
 800741c:	4621      	mov	r1, r4
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fee4 	bl	80071ec <_printf_common>
 8007424:	3001      	adds	r0, #1
 8007426:	d14a      	bne.n	80074be <_printf_i+0x1f6>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800742c:	b004      	add	sp, #16
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	f043 0320 	orr.w	r3, r3, #32
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	4833      	ldr	r0, [pc, #204]	; (8007508 <_printf_i+0x240>)
 800743c:	2778      	movs	r7, #120	; 0x78
 800743e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	6829      	ldr	r1, [r5, #0]
 8007446:	061f      	lsls	r7, r3, #24
 8007448:	f851 6b04 	ldr.w	r6, [r1], #4
 800744c:	d402      	bmi.n	8007454 <_printf_i+0x18c>
 800744e:	065f      	lsls	r7, r3, #25
 8007450:	bf48      	it	mi
 8007452:	b2b6      	uxthmi	r6, r6
 8007454:	07df      	lsls	r7, r3, #31
 8007456:	bf48      	it	mi
 8007458:	f043 0320 	orrmi.w	r3, r3, #32
 800745c:	6029      	str	r1, [r5, #0]
 800745e:	bf48      	it	mi
 8007460:	6023      	strmi	r3, [r4, #0]
 8007462:	b91e      	cbnz	r6, 800746c <_printf_i+0x1a4>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	f023 0320 	bic.w	r3, r3, #32
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	2310      	movs	r3, #16
 800746e:	e7a7      	b.n	80073c0 <_printf_i+0xf8>
 8007470:	4824      	ldr	r0, [pc, #144]	; (8007504 <_printf_i+0x23c>)
 8007472:	e7e4      	b.n	800743e <_printf_i+0x176>
 8007474:	4615      	mov	r5, r2
 8007476:	e7bd      	b.n	80073f4 <_printf_i+0x12c>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	6826      	ldr	r6, [r4, #0]
 800747c:	6961      	ldr	r1, [r4, #20]
 800747e:	1d18      	adds	r0, r3, #4
 8007480:	6028      	str	r0, [r5, #0]
 8007482:	0635      	lsls	r5, r6, #24
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	d501      	bpl.n	800748c <_printf_i+0x1c4>
 8007488:	6019      	str	r1, [r3, #0]
 800748a:	e002      	b.n	8007492 <_printf_i+0x1ca>
 800748c:	0670      	lsls	r0, r6, #25
 800748e:	d5fb      	bpl.n	8007488 <_printf_i+0x1c0>
 8007490:	8019      	strh	r1, [r3, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	4615      	mov	r5, r2
 8007498:	e7bc      	b.n	8007414 <_printf_i+0x14c>
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	602a      	str	r2, [r5, #0]
 80074a0:	681d      	ldr	r5, [r3, #0]
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	2100      	movs	r1, #0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7f8 fe9a 	bl	80001e0 <memchr>
 80074ac:	b108      	cbz	r0, 80074b2 <_printf_i+0x1ea>
 80074ae:	1b40      	subs	r0, r0, r5
 80074b0:	6060      	str	r0, [r4, #4]
 80074b2:	6863      	ldr	r3, [r4, #4]
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	2300      	movs	r3, #0
 80074b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074bc:	e7aa      	b.n	8007414 <_printf_i+0x14c>
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	462a      	mov	r2, r5
 80074c2:	4649      	mov	r1, r9
 80074c4:	4640      	mov	r0, r8
 80074c6:	47d0      	blx	sl
 80074c8:	3001      	adds	r0, #1
 80074ca:	d0ad      	beq.n	8007428 <_printf_i+0x160>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	079b      	lsls	r3, r3, #30
 80074d0:	d413      	bmi.n	80074fa <_printf_i+0x232>
 80074d2:	68e0      	ldr	r0, [r4, #12]
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	4298      	cmp	r0, r3
 80074d8:	bfb8      	it	lt
 80074da:	4618      	movlt	r0, r3
 80074dc:	e7a6      	b.n	800742c <_printf_i+0x164>
 80074de:	2301      	movs	r3, #1
 80074e0:	4632      	mov	r2, r6
 80074e2:	4649      	mov	r1, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	47d0      	blx	sl
 80074e8:	3001      	adds	r0, #1
 80074ea:	d09d      	beq.n	8007428 <_printf_i+0x160>
 80074ec:	3501      	adds	r5, #1
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	9903      	ldr	r1, [sp, #12]
 80074f2:	1a5b      	subs	r3, r3, r1
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dcf2      	bgt.n	80074de <_printf_i+0x216>
 80074f8:	e7eb      	b.n	80074d2 <_printf_i+0x20a>
 80074fa:	2500      	movs	r5, #0
 80074fc:	f104 0619 	add.w	r6, r4, #25
 8007500:	e7f5      	b.n	80074ee <_printf_i+0x226>
 8007502:	bf00      	nop
 8007504:	08007802 	.word	0x08007802
 8007508:	08007813 	.word	0x08007813

0800750c <__malloc_lock>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__malloc_lock+0x8>)
 800750e:	f7ff bc73 	b.w	8006df8 <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	200003cc 	.word	0x200003cc

08007518 <__malloc_unlock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__malloc_unlock+0x8>)
 800751a:	f7ff bc6e 	b.w	8006dfa <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	200003cc 	.word	0x200003cc

08007524 <_realloc_r>:
 8007524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007528:	4680      	mov	r8, r0
 800752a:	4614      	mov	r4, r2
 800752c:	460e      	mov	r6, r1
 800752e:	b921      	cbnz	r1, 800753a <_realloc_r+0x16>
 8007530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	4611      	mov	r1, r2
 8007536:	f7ff bdd9 	b.w	80070ec <_malloc_r>
 800753a:	b92a      	cbnz	r2, 8007548 <_realloc_r+0x24>
 800753c:	f000 f85a 	bl	80075f4 <_free_r>
 8007540:	4625      	mov	r5, r4
 8007542:	4628      	mov	r0, r5
 8007544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007548:	f000 f8a0 	bl	800768c <_malloc_usable_size_r>
 800754c:	4284      	cmp	r4, r0
 800754e:	4607      	mov	r7, r0
 8007550:	d802      	bhi.n	8007558 <_realloc_r+0x34>
 8007552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007556:	d812      	bhi.n	800757e <_realloc_r+0x5a>
 8007558:	4621      	mov	r1, r4
 800755a:	4640      	mov	r0, r8
 800755c:	f7ff fdc6 	bl	80070ec <_malloc_r>
 8007560:	4605      	mov	r5, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d0ed      	beq.n	8007542 <_realloc_r+0x1e>
 8007566:	42bc      	cmp	r4, r7
 8007568:	4622      	mov	r2, r4
 800756a:	4631      	mov	r1, r6
 800756c:	bf28      	it	cs
 800756e:	463a      	movcs	r2, r7
 8007570:	f000 f832 	bl	80075d8 <memcpy>
 8007574:	4631      	mov	r1, r6
 8007576:	4640      	mov	r0, r8
 8007578:	f000 f83c 	bl	80075f4 <_free_r>
 800757c:	e7e1      	b.n	8007542 <_realloc_r+0x1e>
 800757e:	4635      	mov	r5, r6
 8007580:	e7df      	b.n	8007542 <_realloc_r+0x1e>

08007582 <memmove>:
 8007582:	4288      	cmp	r0, r1
 8007584:	b510      	push	{r4, lr}
 8007586:	eb01 0402 	add.w	r4, r1, r2
 800758a:	d902      	bls.n	8007592 <memmove+0x10>
 800758c:	4284      	cmp	r4, r0
 800758e:	4623      	mov	r3, r4
 8007590:	d807      	bhi.n	80075a2 <memmove+0x20>
 8007592:	1e43      	subs	r3, r0, #1
 8007594:	42a1      	cmp	r1, r4
 8007596:	d008      	beq.n	80075aa <memmove+0x28>
 8007598:	f811 2b01 	ldrb.w	r2, [r1], #1
 800759c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075a0:	e7f8      	b.n	8007594 <memmove+0x12>
 80075a2:	4402      	add	r2, r0
 80075a4:	4601      	mov	r1, r0
 80075a6:	428a      	cmp	r2, r1
 80075a8:	d100      	bne.n	80075ac <memmove+0x2a>
 80075aa:	bd10      	pop	{r4, pc}
 80075ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075b4:	e7f7      	b.n	80075a6 <memmove+0x24>
	...

080075b8 <_sbrk_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	; (80075d4 <_sbrk_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7f9 fcb2 	bl	8000f2c <_sbrk>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_sbrk_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_sbrk_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200003d8 	.word	0x200003d8

080075d8 <memcpy>:
 80075d8:	440a      	add	r2, r1
 80075da:	4291      	cmp	r1, r2
 80075dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075e0:	d100      	bne.n	80075e4 <memcpy+0xc>
 80075e2:	4770      	bx	lr
 80075e4:	b510      	push	{r4, lr}
 80075e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ee:	4291      	cmp	r1, r2
 80075f0:	d1f9      	bne.n	80075e6 <memcpy+0xe>
 80075f2:	bd10      	pop	{r4, pc}

080075f4 <_free_r>:
 80075f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d044      	beq.n	8007684 <_free_r+0x90>
 80075fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fe:	9001      	str	r0, [sp, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f1a1 0404 	sub.w	r4, r1, #4
 8007606:	bfb8      	it	lt
 8007608:	18e4      	addlt	r4, r4, r3
 800760a:	f7ff ff7f 	bl	800750c <__malloc_lock>
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <_free_r+0x94>)
 8007610:	9801      	ldr	r0, [sp, #4]
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	b933      	cbnz	r3, 8007624 <_free_r+0x30>
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	6014      	str	r4, [r2, #0]
 800761a:	b003      	add	sp, #12
 800761c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007620:	f7ff bf7a 	b.w	8007518 <__malloc_unlock>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d908      	bls.n	800763a <_free_r+0x46>
 8007628:	6825      	ldr	r5, [r4, #0]
 800762a:	1961      	adds	r1, r4, r5
 800762c:	428b      	cmp	r3, r1
 800762e:	bf01      	itttt	eq
 8007630:	6819      	ldreq	r1, [r3, #0]
 8007632:	685b      	ldreq	r3, [r3, #4]
 8007634:	1949      	addeq	r1, r1, r5
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	e7ed      	b.n	8007616 <_free_r+0x22>
 800763a:	461a      	mov	r2, r3
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b10b      	cbz	r3, 8007644 <_free_r+0x50>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d9fa      	bls.n	800763a <_free_r+0x46>
 8007644:	6811      	ldr	r1, [r2, #0]
 8007646:	1855      	adds	r5, r2, r1
 8007648:	42a5      	cmp	r5, r4
 800764a:	d10b      	bne.n	8007664 <_free_r+0x70>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	4421      	add	r1, r4
 8007650:	1854      	adds	r4, r2, r1
 8007652:	42a3      	cmp	r3, r4
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	d1e0      	bne.n	800761a <_free_r+0x26>
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	6053      	str	r3, [r2, #4]
 800765e:	440c      	add	r4, r1
 8007660:	6014      	str	r4, [r2, #0]
 8007662:	e7da      	b.n	800761a <_free_r+0x26>
 8007664:	d902      	bls.n	800766c <_free_r+0x78>
 8007666:	230c      	movs	r3, #12
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	e7d6      	b.n	800761a <_free_r+0x26>
 800766c:	6825      	ldr	r5, [r4, #0]
 800766e:	1961      	adds	r1, r4, r5
 8007670:	428b      	cmp	r3, r1
 8007672:	bf04      	itt	eq
 8007674:	6819      	ldreq	r1, [r3, #0]
 8007676:	685b      	ldreq	r3, [r3, #4]
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	bf04      	itt	eq
 800767c:	1949      	addeq	r1, r1, r5
 800767e:	6021      	streq	r1, [r4, #0]
 8007680:	6054      	str	r4, [r2, #4]
 8007682:	e7ca      	b.n	800761a <_free_r+0x26>
 8007684:	b003      	add	sp, #12
 8007686:	bd30      	pop	{r4, r5, pc}
 8007688:	200003d0 	.word	0x200003d0

0800768c <_malloc_usable_size_r>:
 800768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007690:	1f18      	subs	r0, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfbc      	itt	lt
 8007696:	580b      	ldrlt	r3, [r1, r0]
 8007698:	18c0      	addlt	r0, r0, r3
 800769a:	4770      	bx	lr

0800769c <_init>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr

080076a8 <_fini>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr
