
F303_reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08006c48  08006c48  00016c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007490  08007490  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007498  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000071c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000794  20000794  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b929  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002383  00000000  00000000  0002ba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ad8  00000000  00000000  0002dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000829  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b666  00000000  00000000  0002f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ff7b  00000000  00000000  0004a6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009adde  00000000  00000000  0005a67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003550  00000000  00000000  000f5458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f89a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c30 	.word	0x08006c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006c30 	.word	0x08006c30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_ldivmod>:
 8000c38:	b97b      	cbnz	r3, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3a:	b972      	cbnz	r2, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bfbe      	ittt	lt
 8000c40:	2000      	movlt	r0, #0
 8000c42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c46:	e006      	blt.n	8000c56 <__aeabi_ldivmod+0x1e>
 8000c48:	bf08      	it	eq
 8000c4a:	2800      	cmpeq	r0, #0
 8000c4c:	bf1c      	itt	ne
 8000c4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c56:	f000 b9a3 	b.w	8000fa0 <__aeabi_idiv0>
 8000c5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c62:	2900      	cmp	r1, #0
 8000c64:	db09      	blt.n	8000c7a <__aeabi_ldivmod+0x42>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db1a      	blt.n	8000ca0 <__aeabi_ldivmod+0x68>
 8000c6a:	f000 f835 	bl	8000cd8 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db1b      	blt.n	8000cbc <__aeabi_ldivmod+0x84>
 8000c84:	f000 f828 	bl	8000cd8 <__udivmoddi4>
 8000c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	b004      	add	sp, #16
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f817 	bl	8000cd8 <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f000 f809 	bl	8000cd8 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2319      	movs	r3, #25
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2288      	movs	r2, #136	; 0x88
 8000fbc:	21ec      	movs	r1, #236	; 0xec
 8000fbe:	4857      	ldr	r0, [pc, #348]	; (800111c <TrimRead+0x178>)
 8000fc0:	f001 feca 	bl	8002d58 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	3319      	adds	r3, #25
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	9202      	str	r2, [sp, #8]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	9201      	str	r2, [sp, #4]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	22e1      	movs	r2, #225	; 0xe1
 8000fd8:	21ec      	movs	r1, #236	; 0xec
 8000fda:	4850      	ldr	r0, [pc, #320]	; (800111c <TrimRead+0x178>)
 8000fdc:	f001 febc 	bl	8002d58 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	783b      	ldrb	r3, [r7, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <TrimRead+0x17c>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	78bb      	ldrb	r3, [r7, #2]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b48      	ldr	r3, [pc, #288]	; (8001124 <TrimRead+0x180>)
 8001004:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <TrimRead+0x184>)
 8001016:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	797b      	ldrb	r3, [r7, #5]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <TrimRead+0x188>)
 800102a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800102c:	7a7b      	ldrb	r3, [r7, #9]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <TrimRead+0x18c>)
 800103c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	7abb      	ldrb	r3, [r7, #10]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b39      	ldr	r3, [pc, #228]	; (8001134 <TrimRead+0x190>)
 800104e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <TrimRead+0x194>)
 8001060:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <TrimRead+0x198>)
 8001072:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001074:	7c7b      	ldrb	r3, [r7, #17]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7c3b      	ldrb	r3, [r7, #16]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <TrimRead+0x19c>)
 8001084:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001086:	7cfb      	ldrb	r3, [r7, #19]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7cbb      	ldrb	r3, [r7, #18]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <TrimRead+0x1a0>)
 8001096:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001098:	7d7b      	ldrb	r3, [r7, #21]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7d3b      	ldrb	r3, [r7, #20]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <TrimRead+0x1a4>)
 80010a8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <TrimRead+0x1a8>)
 80010ba:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010bc:	7e3b      	ldrb	r3, [r7, #24]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <TrimRead+0x1ac>)
 80010c2:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010c4:	7ebb      	ldrb	r3, [r7, #26]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	7e7b      	ldrb	r3, [r7, #25]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <TrimRead+0x1b0>)
 80010d4:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80010d6:	7efb      	ldrb	r3, [r7, #27]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <TrimRead+0x1b4>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80010de:	7f3b      	ldrb	r3, [r7, #28]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7f7b      	ldrb	r3, [r7, #29]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <TrimRead+0x1b8>)
 80010f4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80010f6:	7fbb      	ldrb	r3, [r7, #30]
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7f7b      	ldrb	r3, [r7, #29]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <TrimRead+0x1bc>)
 800110a:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800110c:	7ffb      	ldrb	r3, [r7, #31]
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <TrimRead+0x1c0>)
 8001112:	801a      	strh	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000cc 	.word	0x200000cc
 8001120:	200000a4 	.word	0x200000a4
 8001124:	200000ac 	.word	0x200000ac
 8001128:	200000ae 	.word	0x200000ae
 800112c:	200000a6 	.word	0x200000a6
 8001130:	200000b0 	.word	0x200000b0
 8001134:	200000b2 	.word	0x200000b2
 8001138:	200000b4 	.word	0x200000b4
 800113c:	200000b6 	.word	0x200000b6
 8001140:	200000b8 	.word	0x200000b8
 8001144:	200000ba 	.word	0x200000ba
 8001148:	200000bc 	.word	0x200000bc
 800114c:	200000be 	.word	0x200000be
 8001150:	200000a8 	.word	0x200000a8
 8001154:	200000c0 	.word	0x200000c0
 8001158:	200000aa 	.word	0x200000aa
 800115c:	200000c2 	.word	0x200000c2
 8001160:	200000c4 	.word	0x200000c4
 8001164:	200000c6 	.word	0x200000c6

08001168 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af04      	add	r7, sp, #16
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	4603      	mov	r3, r0
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	460b      	mov	r3, r1
 8001180:	717b      	strb	r3, [r7, #5]
 8001182:	4613      	mov	r3, r2
 8001184:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001186:	f7ff ff0d 	bl	8000fa4 <TrimRead>


	uint8_t datatowrite = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001192:	23b6      	movs	r3, #182	; 0xb6
 8001194:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	f107 030f 	add.w	r3, r7, #15
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	22e0      	movs	r2, #224	; 0xe0
 80011aa:	21ec      	movs	r1, #236	; 0xec
 80011ac:	4858      	ldr	r0, [pc, #352]	; (8001310 <BME280_Config+0x1a8>)
 80011ae:	f001 fcbf 	bl	8002b30 <HAL_I2C_Mem_Write>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <BME280_Config+0x56>
	{
		return -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011bc:	e0a3      	b.n	8001306 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f001 f96e 	bl	80024a0 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80011c4:	797b      	ldrb	r3, [r7, #5]
 80011c6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f107 030f 	add.w	r3, r7, #15
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	22f2      	movs	r2, #242	; 0xf2
 80011dc:	21ec      	movs	r1, #236	; 0xec
 80011de:	484c      	ldr	r0, [pc, #304]	; (8001310 <BME280_Config+0x1a8>)
 80011e0:	f001 fca6 	bl	8002b30 <HAL_I2C_Mem_Write>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <BME280_Config+0x88>
	{
		return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ee:	e08a      	b.n	8001306 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	f001 f955 	bl	80024a0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 030e 	add.w	r3, r7, #14
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	22f2      	movs	r2, #242	; 0xf2
 800120a:	21ec      	movs	r1, #236	; 0xec
 800120c:	4840      	ldr	r0, [pc, #256]	; (8001310 <BME280_Config+0x1a8>)
 800120e:	f001 fda3 	bl	8002d58 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	429a      	cmp	r2, r3
 8001218:	d002      	beq.n	8001220 <BME280_Config+0xb8>
	{
		return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	e072      	b.n	8001306 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	b25a      	sxtb	r2, r3
 8001228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b25b      	sxtb	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f107 030f 	add.w	r3, r7, #15
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	22f5      	movs	r2, #245	; 0xf5
 800124c:	21ec      	movs	r1, #236	; 0xec
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <BME280_Config+0x1a8>)
 8001250:	f001 fc6e 	bl	8002b30 <HAL_I2C_Mem_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <BME280_Config+0xf8>
	{
		return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125e:	e052      	b.n	8001306 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001260:	2064      	movs	r0, #100	; 0x64
 8001262:	f001 f91d 	bl	80024a0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f107 030e 	add.w	r3, r7, #14
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	22f5      	movs	r2, #245	; 0xf5
 800127a:	21ec      	movs	r1, #236	; 0xec
 800127c:	4824      	ldr	r0, [pc, #144]	; (8001310 <BME280_Config+0x1a8>)
 800127e:	f001 fd6b 	bl	8002d58 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001282:	7bba      	ldrb	r2, [r7, #14]
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	429a      	cmp	r2, r3
 8001288:	d002      	beq.n	8001290 <BME280_Config+0x128>
	{
		return -1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128e:	e03a      	b.n	8001306 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	b25a      	sxtb	r2, r3
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	22f4      	movs	r2, #244	; 0xf4
 80012c0:	21ec      	movs	r1, #236	; 0xec
 80012c2:	4813      	ldr	r0, [pc, #76]	; (8001310 <BME280_Config+0x1a8>)
 80012c4:	f001 fc34 	bl	8002b30 <HAL_I2C_Mem_Write>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <BME280_Config+0x16c>
	{
		return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d2:	e018      	b.n	8001306 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012d4:	2064      	movs	r0, #100	; 0x64
 80012d6:	f001 f8e3 	bl	80024a0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	f107 030e 	add.w	r3, r7, #14
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	22f4      	movs	r2, #244	; 0xf4
 80012ee:	21ec      	movs	r1, #236	; 0xec
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <BME280_Config+0x1a8>)
 80012f2:	f001 fd31 	bl	8002d58 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012f6:	7bba      	ldrb	r2, [r7, #14]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d002      	beq.n	8001304 <BME280_Config+0x19c>
	{
		return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001302:	e000      	b.n	8001306 <BME280_Config+0x19e>
	}

	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	bf00      	nop
 8001310:	200000cc 	.word	0x200000cc

08001314 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <BMEReadRaw+0x8c>)
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	22d0      	movs	r2, #208	; 0xd0
 800132c:	21ec      	movs	r1, #236	; 0xec
 800132e:	481d      	ldr	r0, [pc, #116]	; (80013a4 <BMEReadRaw+0x90>)
 8001330:	f001 fd12 	bl	8002d58 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <BMEReadRaw+0x8c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b60      	cmp	r3, #96	; 0x60
 800133a:	d12a      	bne.n	8001392 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800133c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2308      	movs	r3, #8
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	463b      	mov	r3, r7
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	22f7      	movs	r2, #247	; 0xf7
 800134e:	21ec      	movs	r1, #236	; 0xec
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <BMEReadRaw+0x90>)
 8001352:	f001 fd01 	bl	8002d58 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001356:	783b      	ldrb	r3, [r7, #0]
 8001358:	031a      	lsls	r2, r3, #12
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	4313      	orrs	r3, r2
 8001360:	78ba      	ldrb	r2, [r7, #2]
 8001362:	0912      	lsrs	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	4313      	orrs	r3, r2
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <BMEReadRaw+0x94>)
 800136a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	031a      	lsls	r2, r3, #12
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4313      	orrs	r3, r2
 8001376:	797a      	ldrb	r2, [r7, #5]
 8001378:	0912      	lsrs	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	4313      	orrs	r3, r2
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <BMEReadRaw+0x98>)
 8001380:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4313      	orrs	r3, r2
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <BMEReadRaw+0x9c>)
 800138c:	6013      	str	r3, [r2, #0]

		return 0;
 800138e:	2300      	movs	r3, #0
 8001390:	e001      	b.n	8001396 <BMEReadRaw+0x82>
	}

	else return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000094 	.word	0x20000094
 80013a4:	200000cc 	.word	0x200000cc
 80013a8:	2000009c 	.word	0x2000009c
 80013ac:	20000098 	.word	0x20000098
 80013b0:	200000a0 	.word	0x200000a0

080013b4 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	10da      	asrs	r2, r3, #3
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <BME280_compensate_T_int32+0x74>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a18      	ldr	r2, [pc, #96]	; (800142c <BME280_compensate_T_int32+0x78>)
 80013ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	12db      	asrs	r3, r3, #11
 80013d4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	111b      	asrs	r3, r3, #4
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <BME280_compensate_T_int32+0x74>)
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	1112      	asrs	r2, r2, #4
 80013e4:	4910      	ldr	r1, [pc, #64]	; (8001428 <BME280_compensate_T_int32+0x74>)
 80013e6:	8809      	ldrh	r1, [r1, #0]
 80013e8:	1a52      	subs	r2, r2, r1
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	131b      	asrs	r3, r3, #12
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <BME280_compensate_T_int32+0x7c>)
 80013f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	139b      	asrs	r3, r3, #14
 80013fc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <BME280_compensate_T_int32+0x80>)
 8001406:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <BME280_compensate_T_int32+0x80>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3380      	adds	r3, #128	; 0x80
 8001414:	121b      	asrs	r3, r3, #8
 8001416:	60fb      	str	r3, [r7, #12]
	return T;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	4618      	mov	r0, r3
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200000a4 	.word	0x200000a4
 800142c:	200000ac 	.word	0x200000ac
 8001430:	200000ae 	.word	0x200000ae
 8001434:	200000c8 	.word	0x200000c8

08001438 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b0ca      	sub	sp, #296	; 0x128
 800143e:	af00      	add	r7, sp, #0
 8001440:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001444:	4baf      	ldr	r3, [pc, #700]	; (8001704 <BME280_compensate_P_int64+0x2cc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	17da      	asrs	r2, r3, #31
 800144a:	461c      	mov	r4, r3
 800144c:	4615      	mov	r5, r2
 800144e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001452:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001456:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800145a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800145e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001462:	fb03 f102 	mul.w	r1, r3, r2
 8001466:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800146a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	18ca      	adds	r2, r1, r3
 8001474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001478:	fba3 8903 	umull	r8, r9, r3, r3
 800147c:	eb02 0309 	add.w	r3, r2, r9
 8001480:	4699      	mov	r9, r3
 8001482:	4ba1      	ldr	r3, [pc, #644]	; (8001708 <BME280_compensate_P_int64+0x2d0>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	b21b      	sxth	r3, r3
 800148a:	17da      	asrs	r2, r3, #31
 800148c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001494:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001498:	4603      	mov	r3, r0
 800149a:	fb03 f209 	mul.w	r2, r3, r9
 800149e:	460b      	mov	r3, r1
 80014a0:	fb08 f303 	mul.w	r3, r8, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	4602      	mov	r2, r0
 80014a8:	fba8 1202 	umull	r1, r2, r8, r2
 80014ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014b0:	460a      	mov	r2, r1
 80014b2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014ba:	4413      	add	r3, r2
 80014bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014c0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80014c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80014cc:	4b8f      	ldr	r3, [pc, #572]	; (800170c <BME280_compensate_P_int64+0x2d4>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	17da      	asrs	r2, r3, #31
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014da:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014e2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014e6:	462a      	mov	r2, r5
 80014e8:	fb02 f203 	mul.w	r2, r2, r3
 80014ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014f0:	4621      	mov	r1, r4
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	441a      	add	r2, r3
 80014f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014fc:	4621      	mov	r1, r4
 80014fe:	fba3 1301 	umull	r1, r3, r3, r1
 8001502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001506:	460b      	mov	r3, r1
 8001508:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800150c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001522:	462b      	mov	r3, r5
 8001524:	0459      	lsls	r1, r3, #17
 8001526:	4623      	mov	r3, r4
 8001528:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800152c:	4623      	mov	r3, r4
 800152e:	0458      	lsls	r0, r3, #17
 8001530:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001534:	1814      	adds	r4, r2, r0
 8001536:	643c      	str	r4, [r7, #64]	; 0x40
 8001538:	414b      	adcs	r3, r1
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
 800153c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001540:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001544:	4b72      	ldr	r3, [pc, #456]	; (8001710 <BME280_compensate_P_int64+0x2d8>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	b21b      	sxth	r3, r3
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001552:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001562:	00d9      	lsls	r1, r3, #3
 8001564:	2000      	movs	r0, #0
 8001566:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800156a:	1814      	adds	r4, r2, r0
 800156c:	63bc      	str	r4, [r7, #56]	; 0x38
 800156e:	414b      	adcs	r3, r1
 8001570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001572:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001576:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800157a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800157e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001582:	fb03 f102 	mul.w	r1, r3, r2
 8001586:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	18ca      	adds	r2, r1, r3
 8001594:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001598:	fba3 1303 	umull	r1, r3, r3, r3
 800159c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015a0:	460b      	mov	r3, r1
 80015a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015aa:	18d3      	adds	r3, r2, r3
 80015ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <BME280_compensate_P_int64+0x2dc>)
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	17da      	asrs	r2, r3, #31
 80015ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015c2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015c6:	462b      	mov	r3, r5
 80015c8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015cc:	4642      	mov	r2, r8
 80015ce:	fb02 f203 	mul.w	r2, r2, r3
 80015d2:	464b      	mov	r3, r9
 80015d4:	4621      	mov	r1, r4
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	4622      	mov	r2, r4
 80015de:	4641      	mov	r1, r8
 80015e0:	fba2 1201 	umull	r1, r2, r2, r1
 80015e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015e8:	460a      	mov	r2, r1
 80015ea:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015ee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015f2:	4413      	add	r3, r2
 80015f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001604:	4623      	mov	r3, r4
 8001606:	0a18      	lsrs	r0, r3, #8
 8001608:	462b      	mov	r3, r5
 800160a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800160e:	462b      	mov	r3, r5
 8001610:	1219      	asrs	r1, r3, #8
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <BME280_compensate_P_int64+0x2e0>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	b21b      	sxth	r3, r3
 800161a:	17da      	asrs	r2, r3, #31
 800161c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001620:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001628:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800162c:	464a      	mov	r2, r9
 800162e:	fb02 f203 	mul.w	r2, r2, r3
 8001632:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001636:	4644      	mov	r4, r8
 8001638:	fb04 f303 	mul.w	r3, r4, r3
 800163c:	441a      	add	r2, r3
 800163e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001642:	4644      	mov	r4, r8
 8001644:	fba3 4304 	umull	r4, r3, r3, r4
 8001648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800164c:	4623      	mov	r3, r4
 800164e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001652:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001656:	18d3      	adds	r3, r2, r3
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001668:	464c      	mov	r4, r9
 800166a:	0323      	lsls	r3, r4, #12
 800166c:	4644      	mov	r4, r8
 800166e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001672:	4644      	mov	r4, r8
 8001674:	0322      	lsls	r2, r4, #12
 8001676:	1884      	adds	r4, r0, r2
 8001678:	633c      	str	r4, [r7, #48]	; 0x30
 800167a:	eb41 0303 	adc.w	r3, r1, r3
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
 8001680:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001684:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001688:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800168c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001690:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001694:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <BME280_compensate_P_int64+0x2e4>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016a8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016ac:	462b      	mov	r3, r5
 80016ae:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016b2:	4642      	mov	r2, r8
 80016b4:	fb02 f203 	mul.w	r2, r2, r3
 80016b8:	464b      	mov	r3, r9
 80016ba:	4621      	mov	r1, r4
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	4622      	mov	r2, r4
 80016c4:	4641      	mov	r1, r8
 80016c6:	fba2 1201 	umull	r1, r2, r2, r1
 80016ca:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80016ce:	460a      	mov	r2, r1
 80016d0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016d4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016d8:	4413      	add	r3, r2
 80016da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016ea:	4629      	mov	r1, r5
 80016ec:	104a      	asrs	r2, r1, #1
 80016ee:	4629      	mov	r1, r5
 80016f0:	17cb      	asrs	r3, r1, #31
 80016f2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80016f6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016fa:	4313      	orrs	r3, r2
 80016fc:	d110      	bne.n	8001720 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80016fe:	2300      	movs	r3, #0
 8001700:	e154      	b.n	80019ac <BME280_compensate_P_int64+0x574>
 8001702:	bf00      	nop
 8001704:	200000c8 	.word	0x200000c8
 8001708:	200000b8 	.word	0x200000b8
 800170c:	200000b6 	.word	0x200000b6
 8001710:	200000b4 	.word	0x200000b4
 8001714:	200000b2 	.word	0x200000b2
 8001718:	200000b0 	.word	0x200000b0
 800171c:	200000a6 	.word	0x200000a6
	}
	p = 1048576-adc_P;
 8001720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001724:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
 800172c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001732:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800173a:	105b      	asrs	r3, r3, #1
 800173c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001740:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001744:	07db      	lsls	r3, r3, #31
 8001746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800174a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800174e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001752:	4621      	mov	r1, r4
 8001754:	1a89      	subs	r1, r1, r2
 8001756:	67b9      	str	r1, [r7, #120]	; 0x78
 8001758:	4629      	mov	r1, r5
 800175a:	eb61 0303 	sbc.w	r3, r1, r3
 800175e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001760:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	1891      	adds	r1, r2, r2
 800176a:	6239      	str	r1, [r7, #32]
 800176c:	415b      	adcs	r3, r3
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001774:	4621      	mov	r1, r4
 8001776:	1851      	adds	r1, r2, r1
 8001778:	61b9      	str	r1, [r7, #24]
 800177a:	4629      	mov	r1, r5
 800177c:	414b      	adcs	r3, r1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800178c:	4649      	mov	r1, r9
 800178e:	018b      	lsls	r3, r1, #6
 8001790:	4641      	mov	r1, r8
 8001792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001796:	4641      	mov	r1, r8
 8001798:	018a      	lsls	r2, r1, #6
 800179a:	4641      	mov	r1, r8
 800179c:	1889      	adds	r1, r1, r2
 800179e:	6139      	str	r1, [r7, #16]
 80017a0:	4649      	mov	r1, r9
 80017a2:	eb43 0101 	adc.w	r1, r3, r1
 80017a6:	6179      	str	r1, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017b4:	4649      	mov	r1, r9
 80017b6:	008b      	lsls	r3, r1, #2
 80017b8:	4641      	mov	r1, r8
 80017ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017be:	4641      	mov	r1, r8
 80017c0:	008a      	lsls	r2, r1, #2
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	4622      	mov	r2, r4
 80017ca:	189b      	adds	r3, r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	460b      	mov	r3, r1
 80017d0:	462a      	mov	r2, r5
 80017d2:	eb42 0303 	adc.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017e4:	4649      	mov	r1, r9
 80017e6:	008b      	lsls	r3, r1, #2
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ee:	4641      	mov	r1, r8
 80017f0:	008a      	lsls	r2, r1, #2
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	4622      	mov	r2, r4
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
 80017fe:	462b      	mov	r3, r5
 8001800:	460a      	mov	r2, r1
 8001802:	eb42 0303 	adc.w	r3, r2, r3
 8001806:	677b      	str	r3, [r7, #116]	; 0x74
 8001808:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800180c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001810:	f7ff fa12 	bl	8000c38 <__aeabi_ldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <BME280_compensate_P_int64+0x580>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	b21b      	sxth	r3, r3
 8001824:	17da      	asrs	r2, r3, #31
 8001826:	66bb      	str	r3, [r7, #104]	; 0x68
 8001828:	66fa      	str	r2, [r7, #108]	; 0x6c
 800182a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0b50      	lsrs	r0, r2, #13
 8001838:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800183c:	1359      	asrs	r1, r3, #13
 800183e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001842:	462b      	mov	r3, r5
 8001844:	fb00 f203 	mul.w	r2, r0, r3
 8001848:	4623      	mov	r3, r4
 800184a:	fb03 f301 	mul.w	r3, r3, r1
 800184e:	4413      	add	r3, r2
 8001850:	4622      	mov	r2, r4
 8001852:	fba2 1200 	umull	r1, r2, r2, r0
 8001856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800185a:	460a      	mov	r2, r1
 800185c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001860:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001864:	4413      	add	r3, r2
 8001866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800186a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0b50      	lsrs	r0, r2, #13
 8001878:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800187c:	1359      	asrs	r1, r3, #13
 800187e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001882:	462b      	mov	r3, r5
 8001884:	fb00 f203 	mul.w	r2, r0, r3
 8001888:	4623      	mov	r3, r4
 800188a:	fb03 f301 	mul.w	r3, r3, r1
 800188e:	4413      	add	r3, r2
 8001890:	4622      	mov	r2, r4
 8001892:	fba2 1200 	umull	r1, r2, r2, r0
 8001896:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800189a:	460a      	mov	r2, r1
 800189c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018a4:	4413      	add	r3, r2
 80018a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018b6:	4621      	mov	r1, r4
 80018b8:	0e4a      	lsrs	r2, r1, #25
 80018ba:	4629      	mov	r1, r5
 80018bc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018c0:	4629      	mov	r1, r5
 80018c2:	164b      	asrs	r3, r1, #25
 80018c4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <BME280_compensate_P_int64+0x584>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	17da      	asrs	r2, r3, #31
 80018d2:	663b      	str	r3, [r7, #96]	; 0x60
 80018d4:	667a      	str	r2, [r7, #100]	; 0x64
 80018d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018de:	462a      	mov	r2, r5
 80018e0:	fb02 f203 	mul.w	r2, r2, r3
 80018e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018e8:	4621      	mov	r1, r4
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018f4:	4621      	mov	r1, r4
 80018f6:	fba2 1201 	umull	r1, r2, r2, r1
 80018fa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018fe:	460a      	mov	r2, r1
 8001900:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001904:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001908:	4413      	add	r3, r2
 800190a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800191a:	4621      	mov	r1, r4
 800191c:	0cca      	lsrs	r2, r1, #19
 800191e:	4629      	mov	r1, r5
 8001920:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001924:	4629      	mov	r1, r5
 8001926:	14cb      	asrs	r3, r1, #19
 8001928:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800192c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001930:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001934:	1884      	adds	r4, r0, r2
 8001936:	65bc      	str	r4, [r7, #88]	; 0x58
 8001938:	eb41 0303 	adc.w	r3, r1, r3
 800193c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800193e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001942:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001946:	4621      	mov	r1, r4
 8001948:	1889      	adds	r1, r1, r2
 800194a:	6539      	str	r1, [r7, #80]	; 0x50
 800194c:	4629      	mov	r1, r5
 800194e:	eb43 0101 	adc.w	r1, r3, r1
 8001952:	6579      	str	r1, [r7, #84]	; 0x54
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001960:	4623      	mov	r3, r4
 8001962:	0a18      	lsrs	r0, r3, #8
 8001964:	462b      	mov	r3, r5
 8001966:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800196a:	462b      	mov	r3, r5
 800196c:	1219      	asrs	r1, r3, #8
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <BME280_compensate_P_int64+0x588>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b21b      	sxth	r3, r3
 8001976:	17da      	asrs	r2, r3, #31
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
 800197a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001988:	464c      	mov	r4, r9
 800198a:	0123      	lsls	r3, r4, #4
 800198c:	4644      	mov	r4, r8
 800198e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001992:	4644      	mov	r4, r8
 8001994:	0122      	lsls	r2, r4, #4
 8001996:	1884      	adds	r4, r0, r2
 8001998:	603c      	str	r4, [r7, #0]
 800199a:	eb41 0303 	adc.w	r3, r1, r3
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80019a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b8:	200000be 	.word	0x200000be
 80019bc:	200000bc 	.word	0x200000bc
 80019c0:	200000ba 	.word	0x200000ba

080019c4 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <bme280_compensate_H_int32+0xbc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019d4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	039a      	lsls	r2, r3, #14
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <bme280_compensate_H_int32+0xc0>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	1ad2      	subs	r2, r2, r3
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <bme280_compensate_H_int32+0xc4>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	4619      	mov	r1, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019f8:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <bme280_compensate_H_int32+0xc8>)
 80019fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a00:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a08:	1292      	asrs	r2, r2, #10
 8001a0a:	4921      	ldr	r1, [pc, #132]	; (8001a90 <bme280_compensate_H_int32+0xcc>)
 8001a0c:	8809      	ldrh	r1, [r1, #0]
 8001a0e:	4608      	mov	r0, r1
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	fb00 f101 	mul.w	r1, r0, r1
 8001a16:	12c9      	asrs	r1, r1, #11
 8001a18:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a1c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a20:	1292      	asrs	r2, r2, #10
 8001a22:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a26:	491b      	ldr	r1, [pc, #108]	; (8001a94 <bme280_compensate_H_int32+0xd0>)
 8001a28:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a2c:	fb01 f202 	mul.w	r2, r1, r2
 8001a30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a34:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	13db      	asrs	r3, r3, #15
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	13d2      	asrs	r2, r2, #15
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <bme280_compensate_H_int32+0xd4>)
 8001a4c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a52:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a60:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a68:	bfa8      	it	ge
 8001a6a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a6e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	131b      	asrs	r3, r3, #12
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200000c8 	.word	0x200000c8
 8001a84:	200000c2 	.word	0x200000c2
 8001a88:	200000c4 	.word	0x200000c4
 8001a8c:	200000c6 	.word	0x200000c6
 8001a90:	200000aa 	.word	0x200000aa
 8001a94:	200000c0 	.word	0x200000c0
 8001a98:	200000a8 	.word	0x200000a8

08001a9c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001aa0:	f7ff fc38 	bl	8001314 <BMEReadRaw>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d163      	bne.n	8001b72 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <BME280_Measure+0xf4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ab2:	d104      	bne.n	8001abe <BME280_Measure+0x22>
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <BME280_Measure+0xf8>)
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e016      	b.n	8001aec <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <BME280_Measure+0xf4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fc76 	bl	80013b4 <BME280_compensate_T_int32>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd22 	bl	8000514 <__aeabi_i2d>
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <BME280_Measure+0xfc>)
 8001ad6:	f7fe feb1 	bl	800083c <__aeabi_ddiv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f859 	bl	8000b98 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <BME280_Measure+0xf8>)
 8001aea:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <BME280_Measure+0x100>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001af4:	d104      	bne.n	8001b00 <BME280_Measure+0x64>
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <BME280_Measure+0x104>)
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e016      	b.n	8001b2e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <BME280_Measure+0x100>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc97 	bl	8001438 <BME280_compensate_P_int64>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcf1 	bl	80004f4 <__aeabi_ui2d>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <BME280_Measure+0x108>)
 8001b18:	f7fe fe90 	bl	800083c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f838 	bl	8000b98 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <BME280_Measure+0x104>)
 8001b2c:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <BME280_Measure+0x10c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b36:	d104      	bne.n	8001b42 <BME280_Measure+0xa6>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <BME280_Measure+0x110>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
	else
	{
		Temperature = Pressure = Humidity = 0;

	}
}
 8001b40:	e023      	b.n	8001b8a <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <BME280_Measure+0x10c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff3c 	bl	80019c4 <bme280_compensate_H_int32>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fcd0 	bl	80004f4 <__aeabi_ui2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <BME280_Measure+0x114>)
 8001b5a:	f7fe fe6f 	bl	800083c <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f817 	bl	8000b98 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <BME280_Measure+0x110>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	e00b      	b.n	8001b8a <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <BME280_Measure+0x110>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <BME280_Measure+0x110>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <BME280_Measure+0x104>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <BME280_Measure+0x104>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <BME280_Measure+0xf8>)
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000098 	.word	0x20000098
 8001b94:	20000194 	.word	0x20000194
 8001b98:	40590000 	.word	0x40590000
 8001b9c:	2000009c 	.word	0x2000009c
 8001ba0:	20000198 	.word	0x20000198
 8001ba4:	40700000 	.word	0x40700000
 8001ba8:	200000a0 	.word	0x200000a0
 8001bac:	2000019c 	.word	0x2000019c
 8001bb0:	40900000 	.word	0x40900000

08001bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc4:	6153      	str	r3, [r2, #20]
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6153      	str	r3, [r2, #20]
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_GPIO_Init+0x5c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <MX_I2C1_Init+0x78>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c20:	f240 220b 	movw	r2, #523	; 0x20b
 8001c24:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c52:	f000 fea1 	bl	8002998 <HAL_I2C_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c5c:	f000 fa74 	bl	8002148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c64:	f001 fcb2 	bl	80035cc <HAL_I2CEx_ConfigAnalogFilter>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c6e:	f000 fa6b 	bl	8002148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_I2C1_Init+0x74>)
 8001c76:	f001 fcf4 	bl	8003662 <HAL_I2CEx_ConfigDigitalFilter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c80:	f000 fa62 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200000cc 	.word	0x200000cc
 8001c8c:	40005400 	.word	0x40005400

08001c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_I2C_MspInit+0x7c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d127      	bne.n	8001d02 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6153      	str	r3, [r2, #20]
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480b      	ldr	r0, [pc, #44]	; (8001d14 <HAL_I2C_MspInit+0x84>)
 8001ce6:	f000 fce5 	bl	80026b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400

08001d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	ed2d 8b02 	vpush	{d8}
 8001d1e:	b09e      	sub	sp, #120	; 0x78
 8001d20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d22:	f000 fb57 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d26:	f000 f9b7 	bl	8002098 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2a:	f7ff ff43 	bl	8001bb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d2e:	f7ff ff71 	bl	8001c14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d32:	f000 fa0f 	bl	8002154 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001d36:	f003 f98f 	bl	8005058 <ssd1306_Init>

  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2303      	movs	r3, #3
 8001d44:	2201      	movs	r2, #1
 8001d46:	2105      	movs	r1, #5
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa0d 	bl	8001168 <BME280_Config>
//				  PIN_LOW);

  while (1)
  {

	BME280_Measure();
 8001d4e:	f7ff fea5 	bl	8001a9c <BME280_Measure>
//	else {
//		sprintf(tMessage, "T: error");
//		sprintf(hMessage, "P: error");
//		sprintf(pMessage, "T: error");
//	}
	const double PA_TO_MMHG = 0.00750062;
 8001d52:	a3cf      	add	r3, pc, #828	; (adr r3, 8002090 <main+0x378>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	int tIntPart = (int)Temperature;
 8001d5c:	4bbc      	ldr	r3, [pc, #752]	; (8002050 <main+0x338>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	667b      	str	r3, [r7, #100]	; 0x64
	int tDecimalPart = (int)((Temperature - tIntPart) * 100);
 8001d6c:	4bb8      	ldr	r3, [pc, #736]	; (8002050 <main+0x338>)
 8001d6e:	ed93 7a00 	vldr	s14, [r3]
 8001d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8002054 <main+0x33c>
 8001d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8c:	ee17 3a90 	vmov	r3, s15
 8001d90:	663b      	str	r3, [r7, #96]	; 0x60
	int hIntPart = (int)Humidity;
 8001d92:	4bb1      	ldr	r3, [pc, #708]	; (8002058 <main+0x340>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9c:	ee17 3a90 	vmov	r3, s15
 8001da0:	65fb      	str	r3, [r7, #92]	; 0x5c
	int hDecimalPart = (int)((Humidity - hIntPart) * 100);
 8001da2:	4bad      	ldr	r3, [pc, #692]	; (8002058 <main+0x340>)
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002054 <main+0x33c>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc2:	ee17 3a90 	vmov	r3, s15
 8001dc6:	65bb      	str	r3, [r7, #88]	; 0x58
//	int pDecimalPartKpa = (int)((Pressure / 100 - pIntPartKpa) * 100);

//	const double standardPressurePa = 101325.0;
//	const double mmHgConversionFactor = 760.0;

	double PressureMmHg = Pressure * PA_TO_MMHG;
 8001dc8:	4ba4      	ldr	r3, [pc, #656]	; (800205c <main+0x344>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbb3 	bl	8000538 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dda:	f7fe fc05 	bl	80005e8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	int pIntPartMmHg = (int)PressureMmHg;
 8001de6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001dea:	f7fe fead 	bl	8000b48 <__aeabi_d2iz>
 8001dee:	4603      	mov	r3, r0
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
	int pDecimalPartMmHg = (int)((PressureMmHg - pIntPartMmHg) * 100);
 8001df2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001df4:	f7fe fb8e 	bl	8000514 <__aeabi_i2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e00:	f7fe fa3a 	bl	8000278 <__aeabi_dsub>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b93      	ldr	r3, [pc, #588]	; (8002060 <main+0x348>)
 8001e12:	f7fe fbe9 	bl	80005e8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fe93 	bl	8000b48 <__aeabi_d2iz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48

	const double T0 = 288.15;
 8001e26:	a37c      	add	r3, pc, #496	; (adr r3, 8002018 <main+0x300>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	const double L = 0.0065;
 8001e30:	a37b      	add	r3, pc, #492	; (adr r3, 8002020 <main+0x308>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	const double P0 = 101325.0;
 8001e3a:	a37b      	add	r3, pc, #492	; (adr r3, 8002028 <main+0x310>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	const double R = 287.05;
 8001e44:	a37a      	add	r3, pc, #488	; (adr r3, 8002030 <main+0x318>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	const double g = 9.81;
 8001e4e:	a37a      	add	r3, pc, #488	; (adr r3, 8002038 <main+0x320>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double M = 0.0289644;
 8001e58:	a379      	add	r3, pc, #484	; (adr r3, 8002040 <main+0x328>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	e9c7 2306 	strd	r2, r3, [r7, #24]

//	double Altitude = (T0 / L) * (1 - pow((Pressure / P0), (R * L) / g));
	double Pressure286 = P0 * pow(1 - (L * 286) / T0, (g * M) / (R * L)) * PA_TO_MMHG;
 8001e62:	a379      	add	r3, pc, #484	; (adr r3, 8002048 <main+0x330>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e6c:	f7fe fbbc 	bl	80005e8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e7c:	f7fe fcde 	bl	800083c <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	4976      	ldr	r1, [pc, #472]	; (8002064 <main+0x34c>)
 8001e8a:	f7fe f9f5 	bl	8000278 <__aeabi_dsub>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b18 	vmov	d8, r2, r3
 8001e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e9e:	f7fe fba3 	bl	80005e8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001eae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001eb2:	f7fe fb99 	bl	80005e8 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fcbd 	bl	800083c <__aeabi_ddiv>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	ec43 2b17 	vmov	d7, r2, r3
 8001eca:	eeb0 1a47 	vmov.f32	s2, s14
 8001ece:	eef0 1a67 	vmov.f32	s3, s15
 8001ed2:	eeb0 0a48 	vmov.f32	s0, s16
 8001ed6:	eef0 0a68 	vmov.f32	s1, s17
 8001eda:	f003 ff71 	bl	8005dc0 <pow>
 8001ede:	ec51 0b10 	vmov	r0, r1, d0
 8001ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee6:	f7fe fb7f 	bl	80005e8 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ef2:	f7fe fb79 	bl	80005e8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double deltaPressure = ( PressureMmHg / Pressure286 ) * 100;
 8001efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f06:	f7fe fc99 	bl	800083c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b52      	ldr	r3, [pc, #328]	; (8002060 <main+0x348>)
 8001f18:	f7fe fb66 	bl	80005e8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9c7 2302 	strd	r2, r3, [r7, #8]


//	int aIntPart = (int)Altitude;
//	int aDecimalPart = (int)((Altitude - aIntPart) * 100);

	int dIntPart = (int)deltaPressure;
 8001f24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f28:	f7fe fe0e 	bl	8000b48 <__aeabi_d2iz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	607b      	str	r3, [r7, #4]
	int dDecimalPart = (int)((deltaPressure - dIntPart) * 100);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe faef 	bl	8000514 <__aeabi_i2d>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f3e:	f7fe f99b 	bl	8000278 <__aeabi_dsub>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <main+0x348>)
 8001f50:	f7fe fb4a 	bl	80005e8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fdf4 	bl	8000b48 <__aeabi_d2iz>
 8001f60:	4603      	mov	r3, r0
 8001f62:	603b      	str	r3, [r7, #0]

	sprintf(tMessage, "T  %d.%02d *C", tIntPart, tDecimalPart);
 8001f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f68:	493f      	ldr	r1, [pc, #252]	; (8002068 <main+0x350>)
 8001f6a:	4840      	ldr	r0, [pc, #256]	; (800206c <main+0x354>)
 8001f6c:	f003 fa84 	bl	8005478 <siprintf>
	sprintf(hMessage, "H  %d.%02d %%", hIntPart, hDecimalPart);
 8001f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f74:	493e      	ldr	r1, [pc, #248]	; (8002070 <main+0x358>)
 8001f76:	483f      	ldr	r0, [pc, #252]	; (8002074 <main+0x35c>)
 8001f78:	f003 fa7e 	bl	8005478 <siprintf>
//	sprintf(pMessagePa, "P %d.%02dkPa", pIntPartKpa, pDecimalPartKpa);
	sprintf(pMessageHg, "P %d.%02d mmHg", pIntPartMmHg, pDecimalPartMmHg);
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f80:	493d      	ldr	r1, [pc, #244]	; (8002078 <main+0x360>)
 8001f82:	483e      	ldr	r0, [pc, #248]	; (800207c <main+0x364>)
 8001f84:	f003 fa78 	bl	8005478 <siprintf>
//	sprintf(aMessage, "A %d.%02dm", aIntPart, aDecimalPart);
	sprintf(dMessage, "P  %d.%02d %%", dIntPart, dDecimalPart);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	493c      	ldr	r1, [pc, #240]	; (8002080 <main+0x368>)
 8001f8e:	483d      	ldr	r0, [pc, #244]	; (8002084 <main+0x36c>)
 8001f90:	f003 fa72 	bl	8005478 <siprintf>

//Sending out data
//	  	  HAL_UART_Transmit(&huart2,buff, strlen((char *)buff),HAL_MAX_DELAY);

	ssd1306_SetCursor(5, 3);
 8001f94:	2103      	movs	r1, #3
 8001f96:	2005      	movs	r0, #5
 8001f98:	f003 fa24 	bl	80053e4 <ssd1306_SetCursor>
	result = ssd1306_WriteString(tMessage, Font_7x10, White);
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <main+0x370>)
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	ca06      	ldmia	r2, {r1, r2}
 8001fa2:	4832      	ldr	r0, [pc, #200]	; (800206c <main+0x354>)
 8001fa4:	f003 f9f8 	bl	8005398 <ssd1306_WriteString>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <main+0x374>)
 8001fae:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(5, 15);
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	2005      	movs	r0, #5
 8001fb4:	f003 fa16 	bl	80053e4 <ssd1306_SetCursor>
	result = ssd1306_WriteString(hMessage, Font_7x10, White);
 8001fb8:	4a33      	ldr	r2, [pc, #204]	; (8002088 <main+0x370>)
 8001fba:	2301      	movs	r3, #1
 8001fbc:	ca06      	ldmia	r2, {r1, r2}
 8001fbe:	482d      	ldr	r0, [pc, #180]	; (8002074 <main+0x35c>)
 8001fc0:	f003 f9ea 	bl	8005398 <ssd1306_WriteString>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <main+0x374>)
 8001fca:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(5, 27);
 8001fcc:	211b      	movs	r1, #27
 8001fce:	2005      	movs	r0, #5
 8001fd0:	f003 fa08 	bl	80053e4 <ssd1306_SetCursor>
//	result = ssd1306_WriteString(pMessagePa, Font_7x10, White);
	result = ssd1306_WriteString(pMessageHg, Font_7x10, White);
 8001fd4:	4a2c      	ldr	r2, [pc, #176]	; (8002088 <main+0x370>)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	ca06      	ldmia	r2, {r1, r2}
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <main+0x364>)
 8001fdc:	f003 f9dc 	bl	8005398 <ssd1306_WriteString>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <main+0x374>)
 8001fe6:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(5, 39);
 8001fe8:	2127      	movs	r1, #39	; 0x27
 8001fea:	2005      	movs	r0, #5
 8001fec:	f003 f9fa 	bl	80053e4 <ssd1306_SetCursor>
	result = ssd1306_WriteString(dMessage, Font_7x10, White);
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <main+0x370>)
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	ca06      	ldmia	r2, {r1, r2}
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <main+0x36c>)
 8001ff8:	f003 f9ce 	bl	8005398 <ssd1306_WriteString>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <main+0x374>)
 8002002:	701a      	strb	r2, [r3, #0]
//	ssd1306_SetCursor(5, 51);
//	result = ssd1306_WriteString(aMessage, Font_7x10, White);
	ssd1306_UpdateScreen();
 8002004:	f003 f8b6 	bl	8005174 <ssd1306_UpdateScreen>
//
//
//	HAL_Delay(750);

	HAL_Delay(500);
 8002008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800200c:	f000 fa48 	bl	80024a0 <HAL_Delay>
  {
 8002010:	e69d      	b.n	8001d4e <main+0x36>
 8002012:	bf00      	nop
 8002014:	f3af 8000 	nop.w
 8002018:	66666666 	.word	0x66666666
 800201c:	40720266 	.word	0x40720266
 8002020:	76c8b439 	.word	0x76c8b439
 8002024:	3f7a9fbe 	.word	0x3f7a9fbe
 8002028:	00000000 	.word	0x00000000
 800202c:	40f8bcd0 	.word	0x40f8bcd0
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	4071f0cc 	.word	0x4071f0cc
 8002038:	51eb851f 	.word	0x51eb851f
 800203c:	40239eb8 	.word	0x40239eb8
 8002040:	fafe3880 	.word	0xfafe3880
 8002044:	3f9da8d7 	.word	0x3f9da8d7
 8002048:	00000000 	.word	0x00000000
 800204c:	4071e000 	.word	0x4071e000
 8002050:	20000194 	.word	0x20000194
 8002054:	42c80000 	.word	0x42c80000
 8002058:	2000019c 	.word	0x2000019c
 800205c:	20000198 	.word	0x20000198
 8002060:	40590000 	.word	0x40590000
 8002064:	3ff00000 	.word	0x3ff00000
 8002068:	08006c48 	.word	0x08006c48
 800206c:	20000150 	.word	0x20000150
 8002070:	08006c58 	.word	0x08006c58
 8002074:	20000160 	.word	0x20000160
 8002078:	08006c68 	.word	0x08006c68
 800207c:	20000170 	.word	0x20000170
 8002080:	08006c78 	.word	0x08006c78
 8002084:	20000180 	.word	0x20000180
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000190 	.word	0x20000190
 8002090:	599877b1 	.word	0x599877b1
 8002094:	3f7eb8f8 	.word	0x3f7eb8f8

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	; 0x58
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a2:	2228      	movs	r2, #40	; 0x28
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fa06 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d0:	2301      	movs	r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d4:	2310      	movs	r3, #16
 80020d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d8:	2302      	movs	r3, #2
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020dc:	2300      	movs	r3, #0
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fb06 	bl	80036fc <HAL_RCC_OscConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80020f6:	f000 f827 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fa:	230f      	movs	r3, #15
 80020fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fb2e 	bl	8004778 <HAL_RCC_ClockConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002122:	f000 f811 	bl	8002148 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002126:	2320      	movs	r3, #32
 8002128:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fd07 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800213c:	f000 f804 	bl	8002148 <Error_Handler>
  }
}
 8002140:	bf00      	nop
 8002142:	3758      	adds	r7, #88	; 0x58
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>
	...

08002154 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <MX_SPI1_Init+0x74>)
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <MX_SPI1_Init+0x78>)
 800215c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800216c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002170:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_SPI1_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_SPI1_Init+0x74>)
 800218c:	2208      	movs	r2, #8
 800218e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_SPI1_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MX_SPI1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_SPI1_Init+0x74>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_SPI1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_SPI1_Init+0x74>)
 80021b0:	2208      	movs	r2, #8
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <MX_SPI1_Init+0x74>)
 80021b6:	f002 fdeb 	bl	8004d90 <HAL_SPI_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80021c0:	f7ff ffc2 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200001a0 	.word	0x200001a0
 80021cc:	40013000 	.word	0x40013000

080021d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_SPI_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d128      	bne.n	8002244 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_SPI_MspInit+0x80>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_SPI_MspInit+0x80>)
 80021f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_SPI_MspInit+0x80>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_SPI_MspInit+0x80>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_SPI_MspInit+0x80>)
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	6153      	str	r3, [r2, #20]
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_SPI_MspInit+0x80>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002222:	23a0      	movs	r3, #160	; 0xa0
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002232:	2305      	movs	r3, #5
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002240:	f000 fa38 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40013000 	.word	0x40013000
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <HAL_MspInit+0x44>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_MspInit+0x44>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6193      	str	r3, [r2, #24]
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_MspInit+0x44>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_MspInit+0x44>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <HAL_MspInit+0x44>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_MspInit+0x44>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <NMI_Handler+0x4>

080022a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <MemManage_Handler+0x4>

080022ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <UsageFault_Handler+0x4>

080022ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e8:	f000 f8ba 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f003 f8d2 	bl	80054c8 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20003000 	.word	0x20003000
 8002350:	00000400 	.word	0x00000400
 8002354:	2000022c 	.word	0x2000022c
 8002358:	20000798 	.word	0x20000798

0800235c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002384:	f7ff ffea 	bl	800235c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f003 f891 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b2:	f7ff fcb1 	bl	8001d18 <main>

080023b6 <LoopForever>:

LoopForever:
    b LoopForever
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023b8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023c4:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 80023c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023cc:	20000794 	.word	0x20000794

080023d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_2_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x28>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x28>)
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f931 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f808 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff ff30 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x54>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x58>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f93b 	bl	800269a <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243c:	f000 f911 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_InitTick+0x5c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000000 	.word	0x20000000
 8002458:	20000008 	.word	0x20000008
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008
 8002484:	20000230 	.word	0x20000230

08002488 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;  
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000230 	.word	0x20000230

080024a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff47 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff5c 	bl	8002530 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb0 	bl	8002608 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c2:	e14e      	b.n	8002962 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8140 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <HAL_GPIO_Init+0x40>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272a:	2201      	movs	r2, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d017      	beq.n	8002792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 809a 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286a:	d013      	beq.n	8002894 <HAL_GPIO_Init+0x1e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_GPIO_Init+0x2d4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_GPIO_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a45      	ldr	r2, [pc, #276]	; (800298c <HAL_GPIO_Init+0x2d8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <HAL_GPIO_Init+0x1d8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a44      	ldr	r2, [pc, #272]	; (8002990 <HAL_GPIO_Init+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_GPIO_Init+0x1d4>
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002888:	2305      	movs	r3, #5
 800288a:	e004      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 800288c:	2302      	movs	r3, #2
 800288e:	e002      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002894:	2300      	movs	r3, #0
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a6:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028d8:	4a2e      	ldr	r2, [pc, #184]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f aea9 	bne.w	80026c4 <HAL_GPIO_Init+0x10>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0a7      	b.n	8002afa <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12c      	bne.n	8002a10 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_I2C_Init+0x16c>)
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <HAL_I2C_Init+0x170>)
 80029c8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_I2C_Init+0x174>)
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_I2C_Init+0x178>)
 80029d4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_I2C_Init+0x17c>)
 80029da:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_I2C_Init+0x180>)
 80029e0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_I2C_Init+0x184>)
 80029e6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_I2C_Init+0x188>)
 80029ec:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_I2C_Init+0x18c>)
 80029f2:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_I2C_Init+0x190>)
 80029f8:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a49      	ldr	r2, [pc, #292]	; (8002b2c <HAL_I2C_Init+0x194>)
 8002a06:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e006      	b.n	8002a6c <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d104      	bne.n	8002a7e <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08002f8d 	.word	0x08002f8d
 8002b08:	08002fa1 	.word	0x08002fa1
 8002b0c:	08002fb5 	.word	0x08002fb5
 8002b10:	08002fc9 	.word	0x08002fc9
 8002b14:	08002ff9 	.word	0x08002ff9
 8002b18:	0800300d 	.word	0x0800300d
 8002b1c:	08003021 	.word	0x08003021
 8002b20:	08003035 	.word	0x08003035
 8002b24:	08003049 	.word	0x08003049
 8002b28:	08002fdd 	.word	0x08002fdd
 8002b2c:	08001c91 	.word	0x08001c91

08002b30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	460b      	mov	r3, r1
 8002b44:	813b      	strh	r3, [r7, #8]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	f040 80f9 	bne.w	8002d4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_I2C_Mem_Write+0x34>
 8002b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ed      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Mem_Write+0x4e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0e6      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b86:	f7ff fc7f 	bl	8002488 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb2b 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0d1      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2221      	movs	r2, #33	; 0x21
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd0:	88f8      	ldrh	r0, [r7, #6]
 8002bd2:	893a      	ldrh	r2, [r7, #8]
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4603      	mov	r3, r0
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fa3b 	bl	800305c <I2C_RequestMemoryWrite>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0a9      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2bff      	cmp	r3, #255	; 0xff
 8002c00:	d90e      	bls.n	8002c20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	8979      	ldrh	r1, [r7, #10]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fca5 	bl	8003568 <I2C_TransferConfig>
 8002c1e:	e00f      	b.n	8002c40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	2300      	movs	r3, #0
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fc94 	bl	8003568 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fb24 	bl	8003292 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e07b      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d034      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x1c8>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d130      	bne.n	8002cf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 faa7 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e04d      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2bff      	cmp	r3, #255	; 0xff
 8002cb8:	d90e      	bls.n	8002cd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	8979      	ldrh	r1, [r7, #10]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fc49 	bl	8003568 <I2C_TransferConfig>
 8002cd6:	e00f      	b.n	8002cf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	8979      	ldrh	r1, [r7, #10]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fc38 	bl	8003568 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d19e      	bne.n	8002c40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fb0a 	bl	8003320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e01a      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_I2C_Mem_Write+0x224>)
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	817b      	strh	r3, [r7, #10]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	813b      	strh	r3, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 80fd 	bne.w	8002f7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x34>
 8002d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0f1      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x4e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0ea      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dae:	f7ff fb6b 	bl	8002488 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2319      	movs	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa17 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0d5      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2222      	movs	r2, #34	; 0x22
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002df8:	88f8      	ldrh	r0, [r7, #6]
 8002dfa:	893a      	ldrh	r2, [r7, #8]
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4603      	mov	r3, r0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f97b 	bl	8003104 <I2C_RequestMemoryRead>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0ad      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d90e      	bls.n	8002e48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <HAL_I2C_Mem_Read+0x22c>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fb91 	bl	8003568 <I2C_TransferConfig>
 8002e46:	e00f      	b.n	8002e68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_I2C_Mem_Read+0x22c>)
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fb80 	bl	8003568 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2104      	movs	r1, #4
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f9be 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07c      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d034      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x1d0>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d130      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f98f 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04d      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d90e      	bls.n	8002f08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fb31 	bl	8003568 <I2C_TransferConfig>
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	8979      	ldrh	r1, [r7, #10]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb20 	bl	8003568 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d19a      	bne.n	8002e68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9f2 	bl	8003320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e01a      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_I2C_Mem_Read+0x230>)
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	80002400 	.word	0x80002400
 8002f88:	fe00e800 	.word	0xfe00e800

08002f8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	817b      	strh	r3, [r7, #10]
 800306e:	460b      	mov	r3, r1
 8003070:	813b      	strh	r3, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <I2C_RequestMemoryWrite+0xa4>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fa6f 	bl	8003568 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8ff 	bl	8003292 <I2C_WaitOnTXISFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02c      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
 80030ae:	e015      	b.n	80030dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	69b9      	ldr	r1, [r7, #24]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f8e5 	bl	8003292 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e012      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f884 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	80002000 	.word	0x80002000

08003104 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	817b      	strh	r3, [r7, #10]
 8003116:	460b      	mov	r3, r1
 8003118:	813b      	strh	r3, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <I2C_RequestMemoryRead+0xa4>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa1c 	bl	8003568 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f8ac 	bl	8003292 <I2C_WaitOnTXISFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e02c      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
 8003154:	e015      	b.n	8003182 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f892 	bl	8003292 <I2C_WaitOnTXISFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e012      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003178:	893b      	ldrh	r3, [r7, #8]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f831 	bl	80031f4 <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	80002000 	.word	0x80002000

080031ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	619a      	str	r2, [r3, #24]
  }
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003204:	e031      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320c:	d02d      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7ff f93b 	bl	8002488 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d122      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d113      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	429a      	cmp	r2, r3
 8003286:	d0be      	beq.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800329e:	e033      	b.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f87f 	bl	80033a8 <I2C_IsErrorOccurred>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e031      	b.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ba:	d025      	beq.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7ff f8e4 	bl	8002488 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11a      	bne.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d013      	beq.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e007      	b.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d1c4      	bne.n	80032a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332c:	e02f      	b.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f838 	bl	80033a8 <I2C_IsErrorOccurred>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e02d      	b.n	800339e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7ff f8a1 	bl	8002488 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b20      	cmp	r3, #32
 8003364:	d013      	beq.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e007      	b.n	800339e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d1c8      	bne.n	800332e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d068      	beq.n	80034a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033dc:	e049      	b.n	8003472 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e4:	d045      	beq.n	8003472 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7ff f84f 	bl	8002488 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_IsErrorOccurred+0x54>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d13a      	bne.n	8003472 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800340e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d121      	bne.n	8003464 <I2C_IsErrorOccurred+0xbc>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003426:	d01d      	beq.n	8003464 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b20      	cmp	r3, #32
 800342c:	d01a      	beq.n	8003464 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800343e:	f7ff f823 	bl	8002488 <HAL_GetTick>
 8003442:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003444:	e00e      	b.n	8003464 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003446:	f7ff f81f 	bl	8002488 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b19      	cmp	r3, #25
 8003452:	d907      	bls.n	8003464 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f043 0320 	orr.w	r3, r3, #32
 800345a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003462:	e006      	b.n	8003472 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d1e9      	bne.n	8003446 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d003      	beq.n	8003488 <I2C_IsErrorOccurred+0xe0>
 8003480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0aa      	beq.n	80033de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f043 0308 	orr.w	r3, r3, #8
 80034e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fe45 	bl	80031ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <I2C_IsErrorOccurred+0x1bc>)
 800352e:	400b      	ands	r3, r1
 8003530:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800355a:	4618      	mov	r0, r3
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	fe00e800 	.word	0xfe00e800

08003568 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	4613      	mov	r3, r2
 8003578:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003580:	7a7b      	ldrb	r3, [r7, #9]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003588:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	4313      	orrs	r3, r2
 8003592:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003596:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	0d5b      	lsrs	r3, r3, #21
 80035a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <I2C_TransferConfig+0x60>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	43db      	mvns	r3, r3
 80035ac:	ea02 0103 	and.w	r1, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	03ff63ff 	.word	0x03ff63ff

080035cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d138      	bne.n	8003654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e032      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800361e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	d139      	bne.n	80036ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003682:	2302      	movs	r3, #2
 8003684:	e033      	b.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	; 0x24
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003702:	af00      	add	r7, sp, #0
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f001 b823 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 817d 	beq.w	8003a32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003738:	4bbc      	ldr	r3, [pc, #752]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b04      	cmp	r3, #4
 8003742:	d00c      	beq.n	800375e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003744:	4bb9      	ldr	r3, [pc, #740]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d15c      	bne.n	800380a <HAL_RCC_OscConfig+0x10e>
 8003750:	4bb6      	ldr	r3, [pc, #728]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d155      	bne.n	800380a <HAL_RCC_OscConfig+0x10e>
 800375e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003762:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003772:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_RCC_OscConfig+0x94>
 800378a:	4ba8      	ldr	r3, [pc, #672]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	e015      	b.n	80037bc <HAL_RCC_OscConfig+0xc0>
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037b8:	4b9c      	ldr	r3, [pc, #624]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80037c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80037d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 811f 	beq.w	8003a30 <HAL_RCC_OscConfig+0x334>
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 8116 	bne.w	8003a30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f000 bfaf 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x12e>
 800381c:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a82      	ldr	r2, [pc, #520]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e036      	b.n	8003898 <HAL_RCC_OscConfig+0x19c>
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x158>
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7b      	ldr	r2, [pc, #492]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b79      	ldr	r3, [pc, #484]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a78      	ldr	r2, [pc, #480]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800384c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e021      	b.n	8003898 <HAL_RCC_OscConfig+0x19c>
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x184>
 8003866:	4b71      	ldr	r3, [pc, #452]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a70      	ldr	r2, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b6e      	ldr	r3, [pc, #440]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x19c>
 8003880:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a69      	ldr	r2, [pc, #420]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a66      	ldr	r2, [pc, #408]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003898:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f023 020f 	bic.w	r2, r3, #15
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	495f      	ldr	r1, [pc, #380]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d059      	beq.n	8003976 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fde1 	bl	8002488 <HAL_GetTick>
 80038c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe fddc 	bl	8002488 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	; 0x64
 80038da:	d902      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	f000 bf43 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 80038e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80038f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0x218>
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e015      	b.n	8003940 <HAL_RCC_OscConfig+0x244>
 8003914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003918:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003930:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003944:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003948:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003954:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ab      	beq.n	80038cc <HAL_RCC_OscConfig+0x1d0>
 8003974:	e05d      	b.n	8003a32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fe fd87 	bl	8002488 <HAL_GetTick>
 800397a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fd82 	bl	8002488 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b64      	cmp	r3, #100	; 0x64
 800398e:	d902      	bls.n	8003996 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	f000 bee9 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 8003996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80039aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d102      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2cc>
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	e015      	b.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
 80039c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_RCC_OscConfig+0x330>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a00:	fa92 f2a2 	rbit	r2, r2
 8003a04:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003a08:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f042 0220 	orr.w	r2, r2, #32
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f002 021f 	and.w	r2, r2, #31
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ab      	bne.n	8003980 <HAL_RCC_OscConfig+0x284>
 8003a28:	e003      	b.n	8003a32 <HAL_RCC_OscConfig+0x336>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 817d 	beq.w	8003d42 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a48:	4ba6      	ldr	r3, [pc, #664]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a54:	4ba3      	ldr	r3, [pc, #652]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d172      	bne.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003a60:	4ba0      	ldr	r3, [pc, #640]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d16c      	bne.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3a0>
 8003a96:	4b93      	ldr	r3, [pc, #588]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	e013      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c8>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003aca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ace:	fa92 f2a2 	rbit	r2, r2
 8003ad2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ad6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ada:	fab2 f282 	clz	r2, r2
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f002 021f 	and.w	r2, r2, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCC_OscConfig+0x410>
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f000 be2e 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b75      	ldr	r3, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	21f8      	movs	r1, #248	; 0xf8
 8003b22:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b2a:	fa91 f1a1 	rbit	r1, r1
 8003b2e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b32:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b36:	fab1 f181 	clz	r1, r1
 8003b3a:	b2c9      	uxtb	r1, r1
 8003b3c:	408b      	lsls	r3, r1
 8003b3e:	4969      	ldr	r1, [pc, #420]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	e0fd      	b.n	8003d42 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8088 	beq.w	8003c68 <HAL_RCC_OscConfig+0x56c>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fc80 	bl	8002488 <HAL_GetTick>
 8003b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fc7b 	bl	8002488 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	f000 bde2 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003bb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4d8>
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e013      	b.n	8003bfc <HAL_RCC_OscConfig+0x500>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003be6:	2302      	movs	r3, #2
 8003be8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c06:	fa92 f2a2 	rbit	r2, r2
 8003c0a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c12:	fab2 f282 	clz	r2, r2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f042 0220 	orr.w	r2, r2, #32
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f002 021f 	and.w	r2, r2, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0af      	beq.n	8003b8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	21f8      	movs	r1, #248	; 0xf8
 8003c44:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c4c:	fa91 f1a1 	rbit	r1, r1
 8003c50:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c54:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c58:	fab1 f181 	clz	r1, r1
 8003c5c:	b2c9      	uxtb	r1, r1
 8003c5e:	408b      	lsls	r3, r1
 8003c60:	4920      	ldr	r1, [pc, #128]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	e06c      	b.n	8003d42 <HAL_RCC_OscConfig+0x646>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fbf8 	bl	8002488 <HAL_GetTick>
 8003c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fbf3 	bl	8002488 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f000 bd5a 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d104      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x5ec>
 8003cde:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <HAL_RCC_OscConfig+0x5e8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	e015      	b.n	8003d10 <HAL_RCC_OscConfig+0x614>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d0c:	4bc8      	ldr	r3, [pc, #800]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2202      	movs	r2, #2
 8003d12:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d1a:	fa92 f2a2 	rbit	r2, r2
 8003d1e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d22:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f042 0220 	orr.w	r2, r2, #32
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	f002 021f 	and.w	r2, r2, #31
 8003d36:	2101      	movs	r1, #1
 8003d38:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ad      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8110 	beq.w	8003f78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d079      	beq.n	8003e5c <HAL_RCC_OscConfig+0x760>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4bab      	ldr	r3, [pc, #684]	; (8004034 <HAL_RCC_OscConfig+0x938>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fb79 	bl	8002488 <HAL_GetTick>
 8003d96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fb74 	bl	8002488 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	f000 bcdb 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 8003db2:	2302      	movs	r3, #2
 8003db4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dcc:	2202      	movs	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	fa93 f2a3 	rbit	r2, r3
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df0:	2202      	movs	r2, #2
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	fa93 f2a3 	rbit	r2, r3
 8003e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0c:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e18:	2102      	movs	r1, #2
 8003e1a:	6019      	str	r1, [r3, #0]
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f1a3 	rbit	r1, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e32:	6019      	str	r1, [r3, #0]
  return result;
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0a0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x6a0>
 8003e5a:	e08d      	b.n	8003f78 <HAL_RCC_OscConfig+0x87c>
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e7e:	601a      	str	r2, [r3, #0]
  return result;
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b68      	ldr	r3, [pc, #416]	; (8004034 <HAL_RCC_OscConfig+0x938>)
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe faf3 	bl	8002488 <HAL_GetTick>
 8003ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fe faee 	bl	8002488 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d902      	bls.n	8003ebe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	f000 bc55 	b.w	8004768 <HAL_RCC_OscConfig+0x106c>
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eea:	2202      	movs	r2, #2
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	fa93 f2a3 	rbit	r2, r3
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f0e:	2202      	movs	r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f36:	2102      	movs	r1, #2
 8003f38:	6019      	str	r1, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f1a3 	rbit	r1, r3
 8003f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f50:	6019      	str	r1, [r3, #0]
  return result;
 8003f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f56:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d197      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 81a1 	beq.w	80042d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b23      	ldr	r3, [pc, #140]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	61d3      	str	r3, [r2, #28]
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fc6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCC_OscConfig+0x93c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_RCC_OscConfig+0x93c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_RCC_OscConfig+0x93c>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fa4f 	bl	8002488 <HAL_GetTick>
 8003fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	e009      	b.n	8004004 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fe fa4a 	bl	8002488 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e3b1      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x93c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ef      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10d      	bne.n	800403c <HAL_RCC_OscConfig+0x940>
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a02      	ldr	r2, [pc, #8]	; (8004030 <HAL_RCC_OscConfig+0x934>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6213      	str	r3, [r2, #32]
 800402c:	e03c      	b.n	80040a8 <HAL_RCC_OscConfig+0x9ac>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	10908120 	.word	0x10908120
 8004038:	40007000 	.word	0x40007000
 800403c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_OscConfig+0x96a>
 800404c:	4bc1      	ldr	r3, [pc, #772]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4ac0      	ldr	r2, [pc, #768]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	4bbe      	ldr	r3, [pc, #760]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4abd      	ldr	r2, [pc, #756]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6213      	str	r3, [r2, #32]
 8004064:	e020      	b.n	80040a8 <HAL_RCC_OscConfig+0x9ac>
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x994>
 8004076:	4bb7      	ldr	r3, [pc, #732]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4ab6      	ldr	r2, [pc, #728]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6213      	str	r3, [r2, #32]
 8004082:	4bb4      	ldr	r3, [pc, #720]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4ab3      	ldr	r2, [pc, #716]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6213      	str	r3, [r2, #32]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0x9ac>
 8004090:	4bb0      	ldr	r3, [pc, #704]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4aaf      	ldr	r2, [pc, #700]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	6213      	str	r3, [r2, #32]
 800409c:	4bad      	ldr	r3, [pc, #692]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4aac      	ldr	r2, [pc, #688]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 80040a2:	f023 0304 	bic.w	r3, r3, #4
 80040a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8081 	beq.w	80041bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fe f9e5 	bl	8002488 <HAL_GetTick>
 80040be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fe f9e0 	bl	8002488 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e345      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040e4:	2202      	movs	r2, #2
 80040e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fa93 f2a3 	rbit	r2, r3
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004108:	2202      	movs	r2, #2
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	fa93 f2a3 	rbit	r2, r3
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004122:	601a      	str	r2, [r3, #0]
  return result;
 8004124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004128:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800412c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d102      	bne.n	8004148 <HAL_RCC_OscConfig+0xa4c>
 8004142:	4b84      	ldr	r3, [pc, #528]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	e013      	b.n	8004170 <HAL_RCC_OscConfig+0xa74>
 8004148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004150:	2202      	movs	r2, #2
 8004152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4b79      	ldr	r3, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004174:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004178:	2102      	movs	r1, #2
 800417a:	6011      	str	r1, [r2, #0]
 800417c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004180:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	fa92 f1a2 	rbit	r1, r2
 800418a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800418e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004192:	6011      	str	r1, [r2, #0]
  return result;
 8004194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004198:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	fab2 f282 	clz	r2, r2
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f002 021f 	and.w	r2, r2, #31
 80041ae:	2101      	movs	r1, #1
 80041b0:	fa01 f202 	lsl.w	r2, r1, r2
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d084      	beq.n	80040c4 <HAL_RCC_OscConfig+0x9c8>
 80041ba:	e07f      	b.n	80042bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041bc:	f7fe f964 	bl	8002488 <HAL_GetTick>
 80041c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c4:	e00b      	b.n	80041de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fe f95f 	bl	8002488 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e2c4      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041e6:	2202      	movs	r2, #2
 80041e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800420a:	2202      	movs	r2, #2
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	fa93 f2a3 	rbit	r2, r3
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004224:	601a      	str	r2, [r3, #0]
  return result;
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800422e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0xb4e>
 8004244:	4b43      	ldr	r3, [pc, #268]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	e013      	b.n	8004272 <HAL_RCC_OscConfig+0xb76>
 800424a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004252:	2202      	movs	r2, #2
 8004254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	fa93 f2a3 	rbit	r2, r3
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004276:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800427a:	2102      	movs	r1, #2
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004282:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	fa92 f1a2 	rbit	r1, r2
 800428c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004290:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004294:	6011      	str	r1, [r2, #0]
  return result;
 8004296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800429a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f002 021f 	and.w	r2, r2, #31
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d184      	bne.n	80041c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 80042ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8242 	beq.w	8004766 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_RCC_OscConfig+0xc58>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	f000 8213 	beq.w	8004716 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f040 8162 	bne.w	80045c6 <HAL_RCC_OscConfig+0xeca>
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800430a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004314:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004322:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004326:	601a      	str	r2, [r3, #0]
  return result;
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004330:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800433c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe f89e 	bl	8002488 <HAL_GetTick>
 800434c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e00c      	b.n	800436c <HAL_RCC_OscConfig+0xc70>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe f896 	bl	8002488 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e1fd      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004390:	601a      	str	r2, [r3, #0]
  return result;
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800439a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <HAL_RCC_OscConfig+0xcba>
 80043b0:	4bb0      	ldr	r3, [pc, #704]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	e027      	b.n	8004406 <HAL_RCC_OscConfig+0xd0a>
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fa93 f2a3 	rbit	r2, r3
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	4b9c      	ldr	r3, [pc, #624]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800440e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004412:	6011      	str	r1, [r2, #0]
 8004414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004418:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	fa92 f1a2 	rbit	r1, r2
 8004422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004426:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800442a:	6011      	str	r1, [r2, #0]
  return result;
 800442c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004430:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f042 0220 	orr.w	r2, r2, #32
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f002 021f 	and.w	r2, r2, #31
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f202 	lsl.w	r2, r1, r2
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d182      	bne.n	8004358 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	430b      	orrs	r3, r1
 8004474:	497f      	ldr	r1, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004482:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800449e:	601a      	str	r2, [r3, #0]
  return result;
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	461a      	mov	r2, r3
 80044bc:	2301      	movs	r3, #1
 80044be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd ffe2 	bl	8002488 <HAL_GetTick>
 80044c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c8:	e009      	b.n	80044de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fd ffdd 	bl	8002488 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e144      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f2a3 	rbit	r2, r3
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004502:	601a      	str	r2, [r3, #0]
  return result;
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800450c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d102      	bne.n	8004528 <HAL_RCC_OscConfig+0xe2c>
 8004522:	4b54      	ldr	r3, [pc, #336]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e027      	b.n	8004578 <HAL_RCC_OscConfig+0xe7c>
 8004528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	fa93 f2a3 	rbit	r2, r3
 8004544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004548:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800457c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800458a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	fa92 f1a2 	rbit	r1, r2
 8004594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004598:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800459c:	6011      	str	r1, [r2, #0]
  return result;
 800459e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	f042 0220 	orr.w	r2, r2, #32
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	f002 021f 	and.w	r2, r2, #31
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f202 	lsl.w	r2, r1, r2
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d082      	beq.n	80044ca <HAL_RCC_OscConfig+0xdce>
 80045c4:	e0cf      	b.n	8004766 <HAL_RCC_OscConfig+0x106a>
 80045c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	fa93 f2a3 	rbit	r2, r3
 80045e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045ea:	601a      	str	r2, [r3, #0]
  return result;
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd ff3c 	bl	8002488 <HAL_GetTick>
 8004610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004614:	e009      	b.n	800462a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd ff37 	bl	8002488 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e09e      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
 800462a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	fa93 f2a3 	rbit	r2, r3
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800464e:	601a      	str	r2, [r3, #0]
  return result;
 8004650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004654:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d104      	bne.n	8004678 <HAL_RCC_OscConfig+0xf7c>
 800466e:	4b01      	ldr	r3, [pc, #4]	; (8004674 <HAL_RCC_OscConfig+0xf78>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	e029      	b.n	80046c8 <HAL_RCC_OscConfig+0xfcc>
 8004674:	40021000 	.word	0x40021000
 8004678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	fa93 f2a3 	rbit	r2, r3
 8004694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004698:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	fa93 f2a3 	rbit	r2, r3
 80046ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_RCC_OscConfig+0x1078>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046cc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046da:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	fa92 f1a2 	rbit	r1, r2
 80046e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046ec:	6011      	str	r1, [r2, #0]
  return result;
 80046ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	f042 0220 	orr.w	r2, r2, #32
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f002 021f 	and.w	r2, r2, #31
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f202 	lsl.w	r2, r1, r2
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d180      	bne.n	8004616 <HAL_RCC_OscConfig+0xf1a>
 8004714:	e027      	b.n	8004766 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01e      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCC_OscConfig+0x1078>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004732:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004736:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	429a      	cmp	r2, r3
 8004748:	d10b      	bne.n	8004762 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800474a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800474e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b09e      	sub	sp, #120	; 0x78
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e162      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b90      	ldr	r3, [pc, #576]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d910      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 0207 	bic.w	r2, r3, #7
 80047a6:	498b      	ldr	r1, [pc, #556]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b89      	ldr	r3, [pc, #548]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e14a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	497f      	ldr	r1, [pc, #508]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80dc 	beq.w	80049a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d13c      	bne.n	800486e <HAL_RCC_ClockConfig+0xf6>
 80047f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <HAL_RCC_ClockConfig+0xa6>
 8004818:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	e00f      	b.n	800483e <HAL_RCC_ClockConfig+0xc6>
 800481e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	667b      	str	r3, [r7, #100]	; 0x64
 800482c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004830:	663b      	str	r3, [r7, #96]	; 0x60
 8004832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800483a:	4b67      	ldr	r3, [pc, #412]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004842:	65ba      	str	r2, [r7, #88]	; 0x58
 8004844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004846:	fa92 f2a2 	rbit	r2, r2
 800484a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800484c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800484e:	fab2 f282 	clz	r2, r2
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f042 0220 	orr.w	r2, r2, #32
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f002 021f 	and.w	r2, r2, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f202 	lsl.w	r2, r1, r2
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d17b      	bne.n	8004962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0f3      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d13c      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x178>
 8004876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x128>
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	e00f      	b.n	80048c0 <HAL_RCC_ClockConfig+0x148>
 80048a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
 80048ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80048c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c8:	fa92 f2a2 	rbit	r2, r2
 80048cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d0:	fab2 f282 	clz	r2, r2
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	f042 0220 	orr.w	r2, r2, #32
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	f002 021f 	and.w	r2, r2, #31
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f202 	lsl.w	r2, r1, r2
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d13a      	bne.n	8004962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b2      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
 80048f0:	2302      	movs	r3, #2
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d102      	bne.n	8004918 <HAL_RCC_ClockConfig+0x1a0>
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	e00d      	b.n	8004934 <HAL_RCC_ClockConfig+0x1bc>
 8004918:	2302      	movs	r3, #2
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	2302      	movs	r3, #2
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2202      	movs	r2, #2
 8004936:	61ba      	str	r2, [r7, #24]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	fa92 f2a2 	rbit	r2, r2
 800493e:	617a      	str	r2, [r7, #20]
  return result;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	f042 0220 	orr.w	r2, r2, #32
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	f002 021f 	and.w	r2, r2, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e079      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	491a      	ldr	r1, [pc, #104]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004974:	f7fd fd88 	bl	8002488 <HAL_GetTick>
 8004978:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fd fd84 	bl	8002488 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e061      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCC_ClockConfig+0x260>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d214      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 0207 	bic.w	r2, r3, #7
 80049ba:	4906      	ldr	r1, [pc, #24]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_RCC_ClockConfig+0x25c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e040      	b.n	8004a56 <HAL_RCC_ClockConfig+0x2de>
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCC_ClockConfig+0x2e8>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	491a      	ldr	r1, [pc, #104]	; (8004a60 <HAL_RCC_ClockConfig+0x2e8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_RCC_ClockConfig+0x2e8>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4912      	ldr	r1, [pc, #72]	; (8004a60 <HAL_RCC_ClockConfig+0x2e8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a1a:	f000 f829 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4601      	mov	r1, r0
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <HAL_RCC_ClockConfig+0x2e8>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a28:	22f0      	movs	r2, #240	; 0xf0
 8004a2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	fa92 f2a2 	rbit	r2, r2
 8004a32:	60fa      	str	r2, [r7, #12]
  return result;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	fab2 f282 	clz	r2, r2
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	40d3      	lsrs	r3, r2
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x2ec>)
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	fa21 f303 	lsr.w	r3, r1, r3
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <HAL_RCC_ClockConfig+0x2f0>)
 8004a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a4a:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_RCC_ClockConfig+0x2f4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd fcd6 	bl	8002400 <HAL_InitTick>
  
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3778      	adds	r7, #120	; 0x78
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08006c88 	.word	0x08006c88
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	20000004 	.word	0x20000004

08004a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b08b      	sub	sp, #44	; 0x2c
 8004a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a8a:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8004a9e:	e03c      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa0:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aa2:	623b      	str	r3, [r7, #32]
      break;
 8004aa4:	e03c      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004aac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ab0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	fa92 f2a2 	rbit	r2, r2
 8004ab8:	607a      	str	r2, [r7, #4]
  return result;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	fab2 f282 	clz	r2, r2
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	40d3      	lsrs	r3, r2
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004aca:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	220f      	movs	r2, #15
 8004ad4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	fa92 f2a2 	rbit	r2, r2
 8004adc:	60fa      	str	r2, [r7, #12]
  return result;
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	fab2 f282 	clz	r2, r2
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	40d3      	lsrs	r3, r2
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004af8:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	e004      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	623b      	str	r3, [r7, #32]
      break;
 8004b18:	e002      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b1c:	623b      	str	r3, [r7, #32]
      break;
 8004b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b20:	6a3b      	ldr	r3, [r7, #32]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	372c      	adds	r7, #44	; 0x2c
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	007a1200 	.word	0x007a1200
 8004b38:	08006c98 	.word	0x08006c98
 8004b3c:	08006ca8 	.word	0x08006ca8
 8004b40:	003d0900 	.word	0x003d0900

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b092      	sub	sp, #72	; 0x48
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80cd 	beq.w	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b68:	4b86      	ldr	r3, [pc, #536]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10e      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	4b83      	ldr	r3, [pc, #524]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4a82      	ldr	r2, [pc, #520]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	61d3      	str	r3, [r2, #28]
 8004b80:	4b80      	ldr	r3, [pc, #512]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b7d      	ldr	r3, [pc, #500]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a79      	ldr	r2, [pc, #484]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004baa:	f7fd fc6d 	bl	8002488 <HAL_GetTick>
 8004bae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fd fc69 	bl	8002488 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b64      	cmp	r3, #100	; 0x64
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0db      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	4b70      	ldr	r3, [pc, #448]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd0:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d07d      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d076      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b5e      	ldr	r3, [pc, #376]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	461a      	mov	r2, r3
 8004c18:	2301      	movs	r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2c:	fab3 f383 	clz	r3, r3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b55      	ldr	r3, [pc, #340]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c40:	4a50      	ldr	r2, [pc, #320]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d045      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd fc1a 	bl	8002488 <HAL_GetTick>
 8004c54:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fd fc16 	bl	8002488 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e086      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	61fb      	str	r3, [r7, #28]
  return result;
 8004c86:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f043 0302 	orr.w	r3, r3, #2
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d102      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	e007      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	613a      	str	r2, [r7, #16]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	fa92 f2a2 	rbit	r2, r2
 8004cbc:	60fa      	str	r2, [r7, #12]
  return result;
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	fab2 f282 	clz	r2, r2
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	f002 021f 	and.w	r2, r2, #31
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0bd      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4926      	ldr	r1, [pc, #152]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	491a      	ldr	r1, [pc, #104]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	f023 0210 	bic.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4912      	ldr	r1, [pc, #72]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	490b      	ldr	r1, [pc, #44]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3748      	adds	r7, #72	; 0x48
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	10908100 	.word	0x10908100

08004d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0b9      	b.n	8004f16 <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d108      	bne.n	8004dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db2:	d009      	beq.n	8004dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	61da      	str	r2, [r3, #28]
 8004dba:	e005      	b.n	8004dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d12a      	bne.n	8004e30 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4e      	ldr	r2, [pc, #312]	; (8004f20 <HAL_SPI_Init+0x190>)
 8004de6:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	; (8004f24 <HAL_SPI_Init+0x194>)
 8004dec:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4d      	ldr	r2, [pc, #308]	; (8004f28 <HAL_SPI_Init+0x198>)
 8004df2:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a4d      	ldr	r2, [pc, #308]	; (8004f2c <HAL_SPI_Init+0x19c>)
 8004df8:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a4c      	ldr	r2, [pc, #304]	; (8004f30 <HAL_SPI_Init+0x1a0>)
 8004dfe:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4c      	ldr	r2, [pc, #304]	; (8004f34 <HAL_SPI_Init+0x1a4>)
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a4b      	ldr	r2, [pc, #300]	; (8004f38 <HAL_SPI_Init+0x1a8>)
 8004e0a:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a4b      	ldr	r2, [pc, #300]	; (8004f3c <HAL_SPI_Init+0x1ac>)
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a47      	ldr	r2, [pc, #284]	; (8004f40 <HAL_SPI_Init+0x1b0>)
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e50:	d902      	bls.n	8004e58 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e002      	b.n	8004e5e <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e66:	d007      	beq.n	8004e78 <HAL_SPI_Init+0xe8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	f003 0204 	and.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f59 	.word	0x08004f59
 8004f28:	08004f6d 	.word	0x08004f6d
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08004f95 	.word	0x08004f95
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fbd 	.word	0x08004fbd
 8004f3c:	08004fd1 	.word	0x08004fd1
 8004f40:	080021d1 	.word	0x080021d1

08004f44 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af04      	add	r7, sp, #16
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	2301      	movs	r3, #1
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	1dfb      	adds	r3, r7, #7
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	2200      	movs	r2, #0
 8005010:	2178      	movs	r1, #120	; 0x78
 8005012:	4803      	ldr	r0, [pc, #12]	; (8005020 <ssd1306_WriteCommand+0x2c>)
 8005014:	f7fd fd8c 	bl	8002b30 <HAL_I2C_Mem_Write>
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200000cc 	.word	0x200000cc

08005024 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af04      	add	r7, sp, #16
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005036:	9202      	str	r2, [sp, #8]
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	2240      	movs	r2, #64	; 0x40
 8005042:	2178      	movs	r1, #120	; 0x78
 8005044:	4803      	ldr	r0, [pc, #12]	; (8005054 <ssd1306_WriteData+0x30>)
 8005046:	f7fd fd73 	bl	8002b30 <HAL_I2C_Mem_Write>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200000cc 	.word	0x200000cc

08005058 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800505c:	f7ff ffc2 	bl	8004fe4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005060:	2064      	movs	r0, #100	; 0x64
 8005062:	f7fd fa1d 	bl	80024a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005066:	2000      	movs	r0, #0
 8005068:	f000 f9e8 	bl	800543c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800506c:	2020      	movs	r0, #32
 800506e:	f7ff ffc1 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005072:	2000      	movs	r0, #0
 8005074:	f7ff ffbe 	bl	8004ff4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005078:	20b0      	movs	r0, #176	; 0xb0
 800507a:	f7ff ffbb 	bl	8004ff4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800507e:	20c8      	movs	r0, #200	; 0xc8
 8005080:	f7ff ffb8 	bl	8004ff4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005084:	2000      	movs	r0, #0
 8005086:	f7ff ffb5 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800508a:	2010      	movs	r0, #16
 800508c:	f7ff ffb2 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005090:	2040      	movs	r0, #64	; 0x40
 8005092:	f7ff ffaf 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005096:	20ff      	movs	r0, #255	; 0xff
 8005098:	f000 f9bc 	bl	8005414 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800509c:	20a1      	movs	r0, #161	; 0xa1
 800509e:	f7ff ffa9 	bl	8004ff4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80050a2:	20a6      	movs	r0, #166	; 0xa6
 80050a4:	f7ff ffa6 	bl	8004ff4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80050a8:	20a8      	movs	r0, #168	; 0xa8
 80050aa:	f7ff ffa3 	bl	8004ff4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80050ae:	203f      	movs	r0, #63	; 0x3f
 80050b0:	f7ff ffa0 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80050b4:	20a4      	movs	r0, #164	; 0xa4
 80050b6:	f7ff ff9d 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80050ba:	20d3      	movs	r0, #211	; 0xd3
 80050bc:	f7ff ff9a 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7ff ff97 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80050c6:	20d5      	movs	r0, #213	; 0xd5
 80050c8:	f7ff ff94 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80050cc:	20f0      	movs	r0, #240	; 0xf0
 80050ce:	f7ff ff91 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80050d2:	20d9      	movs	r0, #217	; 0xd9
 80050d4:	f7ff ff8e 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80050d8:	2022      	movs	r0, #34	; 0x22
 80050da:	f7ff ff8b 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80050de:	20da      	movs	r0, #218	; 0xda
 80050e0:	f7ff ff88 	bl	8004ff4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80050e4:	2012      	movs	r0, #18
 80050e6:	f7ff ff85 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80050ea:	20db      	movs	r0, #219	; 0xdb
 80050ec:	f7ff ff82 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80050f0:	2020      	movs	r0, #32
 80050f2:	f7ff ff7f 	bl	8004ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80050f6:	208d      	movs	r0, #141	; 0x8d
 80050f8:	f7ff ff7c 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80050fc:	2014      	movs	r0, #20
 80050fe:	f7ff ff79 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005102:	2001      	movs	r0, #1
 8005104:	f000 f99a 	bl	800543c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005108:	2000      	movs	r0, #0
 800510a:	f000 f80f 	bl	800512c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800510e:	f000 f831 	bl	8005174 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <ssd1306_Init+0xd0>)
 8005114:	2200      	movs	r2, #0
 8005116:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <ssd1306_Init+0xd0>)
 800511a:	2200      	movs	r2, #0
 800511c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800511e:	4b02      	ldr	r3, [pc, #8]	; (8005128 <ssd1306_Init+0xd0>)
 8005120:	2201      	movs	r2, #1
 8005122:	711a      	strb	r2, [r3, #4]
}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000644 	.word	0x20000644

0800512c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e00d      	b.n	8005158 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <ssd1306_Fill+0x1a>
 8005142:	2100      	movs	r1, #0
 8005144:	e000      	b.n	8005148 <ssd1306_Fill+0x1c>
 8005146:	21ff      	movs	r1, #255	; 0xff
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <ssd1306_Fill+0x44>)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	460a      	mov	r2, r1
 8005150:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800515e:	d3ed      	bcc.n	800513c <ssd1306_Fill+0x10>
    }
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000234 	.word	0x20000234

08005174 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800517a:	2300      	movs	r3, #0
 800517c:	71fb      	strb	r3, [r7, #7]
 800517e:	e01a      	b.n	80051b6 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	3b50      	subs	r3, #80	; 0x50
 8005184:	b2db      	uxtb	r3, r3
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff34 	bl	8004ff4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800518c:	2000      	movs	r0, #0
 800518e:	f7ff ff31 	bl	8004ff4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005192:	2010      	movs	r0, #16
 8005194:	f7ff ff2e 	bl	8004ff4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005198:	79fa      	ldrb	r2, [r7, #7]
 800519a:	4613      	mov	r3, r2
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	4413      	add	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <ssd1306_UpdateScreen+0x54>)
 80051a6:	4413      	add	r3, r2
 80051a8:	2182      	movs	r1, #130	; 0x82
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ff3a 	bl	8005024 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	3301      	adds	r3, #1
 80051b4:	71fb      	strb	r3, [r7, #7]
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b07      	cmp	r3, #7
 80051ba:	d9e1      	bls.n	8005180 <ssd1306_UpdateScreen+0xc>
    }
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000234 	.word	0x20000234

080051cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80051cc:	b490      	push	{r4, r7}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	460b      	mov	r3, r1
 80051d8:	71bb      	strb	r3, [r7, #6]
 80051da:	4613      	mov	r3, r2
 80051dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b81      	cmp	r3, #129	; 0x81
 80051e2:	d849      	bhi.n	8005278 <ssd1306_DrawPixel+0xac>
 80051e4:	79bb      	ldrb	r3, [r7, #6]
 80051e6:	2b3f      	cmp	r3, #63	; 0x3f
 80051e8:	d846      	bhi.n	8005278 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80051ea:	797b      	ldrb	r3, [r7, #5]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d120      	bne.n	8005232 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80051f0:	79fa      	ldrb	r2, [r7, #7]
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	b2d8      	uxtb	r0, r3
 80051f8:	4601      	mov	r1, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	440b      	add	r3, r1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	4a1f      	ldr	r2, [pc, #124]	; (8005284 <ssd1306_DrawPixel+0xb8>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	b25a      	sxtb	r2, r3
 800520a:	79bb      	ldrb	r3, [r7, #6]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	2101      	movs	r1, #1
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	b25b      	sxtb	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b25c      	sxtb	r4, r3
 800521c:	79fa      	ldrb	r2, [r7, #7]
 800521e:	4601      	mov	r1, r0
 8005220:	460b      	mov	r3, r1
 8005222:	019b      	lsls	r3, r3, #6
 8005224:	440b      	add	r3, r1
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4413      	add	r3, r2
 800522a:	b2e1      	uxtb	r1, r4
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <ssd1306_DrawPixel+0xb8>)
 800522e:	54d1      	strb	r1, [r2, r3]
 8005230:	e023      	b.n	800527a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005232:	79fa      	ldrb	r2, [r7, #7]
 8005234:	79bb      	ldrb	r3, [r7, #6]
 8005236:	08db      	lsrs	r3, r3, #3
 8005238:	b2d8      	uxtb	r0, r3
 800523a:	4601      	mov	r1, r0
 800523c:	460b      	mov	r3, r1
 800523e:	019b      	lsls	r3, r3, #6
 8005240:	440b      	add	r3, r1
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <ssd1306_DrawPixel+0xb8>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	b25a      	sxtb	r2, r3
 800524c:	79bb      	ldrb	r3, [r7, #6]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	b25b      	sxtb	r3, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	b25b      	sxtb	r3, r3
 800525e:	4013      	ands	r3, r2
 8005260:	b25c      	sxtb	r4, r3
 8005262:	79fa      	ldrb	r2, [r7, #7]
 8005264:	4601      	mov	r1, r0
 8005266:	460b      	mov	r3, r1
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	440b      	add	r3, r1
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	b2e1      	uxtb	r1, r4
 8005272:	4a04      	ldr	r2, [pc, #16]	; (8005284 <ssd1306_DrawPixel+0xb8>)
 8005274:	54d1      	strb	r1, [r2, r3]
 8005276:	e000      	b.n	800527a <ssd1306_DrawPixel+0xae>
        return;
 8005278:	bf00      	nop
    }
}
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bc90      	pop	{r4, r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000234 	.word	0x20000234

08005288 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	4604      	mov	r4, r0
 8005290:	1d38      	adds	r0, r7, #4
 8005292:	e880 0006 	stmia.w	r0, {r1, r2}
 8005296:	461a      	mov	r2, r3
 8005298:	4623      	mov	r3, r4
 800529a:	73fb      	strb	r3, [r7, #15]
 800529c:	4613      	mov	r3, r2
 800529e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b1f      	cmp	r3, #31
 80052a4:	d902      	bls.n	80052ac <ssd1306_WriteChar+0x24>
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b7e      	cmp	r3, #126	; 0x7e
 80052aa:	d901      	bls.n	80052b0 <ssd1306_WriteChar+0x28>
        return 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e06d      	b.n	800538c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80052b0:	4b38      	ldr	r3, [pc, #224]	; (8005394 <ssd1306_WriteChar+0x10c>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	793b      	ldrb	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	2b82      	cmp	r3, #130	; 0x82
 80052bc:	dc06      	bgt.n	80052cc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <ssd1306_WriteChar+0x10c>)
 80052c0:	885b      	ldrh	r3, [r3, #2]
 80052c2:	461a      	mov	r2, r3
 80052c4:	797b      	ldrb	r3, [r7, #5]
 80052c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	dd01      	ble.n	80052d0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e05d      	b.n	800538c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e04c      	b.n	8005370 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	3b20      	subs	r3, #32
 80052dc:	7979      	ldrb	r1, [r7, #5]
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	4619      	mov	r1, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	440b      	add	r3, r1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e034      	b.n	8005360 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d012      	beq.n	800532c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <ssd1306_WriteChar+0x10c>)
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	4413      	add	r3, r2
 8005312:	b2d8      	uxtb	r0, r3
 8005314:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <ssd1306_WriteChar+0x10c>)
 8005316:	885b      	ldrh	r3, [r3, #2]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	4413      	add	r3, r2
 8005320:	b2db      	uxtb	r3, r3
 8005322:	7bba      	ldrb	r2, [r7, #14]
 8005324:	4619      	mov	r1, r3
 8005326:	f7ff ff51 	bl	80051cc <ssd1306_DrawPixel>
 800532a:	e016      	b.n	800535a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800532c:	4b19      	ldr	r3, [pc, #100]	; (8005394 <ssd1306_WriteChar+0x10c>)
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4413      	add	r3, r2
 8005338:	b2d8      	uxtb	r0, r3
 800533a:	4b16      	ldr	r3, [pc, #88]	; (8005394 <ssd1306_WriteChar+0x10c>)
 800533c:	885b      	ldrh	r3, [r3, #2]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	4413      	add	r3, r2
 8005346:	b2d9      	uxtb	r1, r3
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	f7ff ff39 	bl	80051cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3301      	adds	r3, #1
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	793b      	ldrb	r3, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4293      	cmp	r3, r2
 8005368:	d3c5      	bcc.n	80052f6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3301      	adds	r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	797b      	ldrb	r3, [r7, #5]
 8005372:	461a      	mov	r2, r3
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4293      	cmp	r3, r2
 8005378:	d3ad      	bcc.n	80052d6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <ssd1306_WriteChar+0x10c>)
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	793b      	ldrb	r3, [r7, #4]
 8005380:	b29b      	uxth	r3, r3
 8005382:	4413      	add	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	4b03      	ldr	r3, [pc, #12]	; (8005394 <ssd1306_WriteChar+0x10c>)
 8005388:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3724      	adds	r7, #36	; 0x24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	20000644 	.word	0x20000644

08005398 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	1d38      	adds	r0, r7, #4
 80053a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80053a6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80053a8:	e012      	b.n	80053d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	7818      	ldrb	r0, [r3, #0]
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	1d3a      	adds	r2, r7, #4
 80053b2:	ca06      	ldmia	r2, {r1, r2}
 80053b4:	f7ff ff68 	bl	8005288 <ssd1306_WriteChar>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d002      	beq.n	80053ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	e008      	b.n	80053dc <ssd1306_WriteString+0x44>
        }
        str++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e8      	bne.n	80053aa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	460a      	mov	r2, r1
 80053ee:	71fb      	strb	r3, [r7, #7]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <ssd1306_SetCursor+0x2c>)
 80053fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80053fc:	79bb      	ldrb	r3, [r7, #6]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <ssd1306_SetCursor+0x2c>)
 8005402:	805a      	strh	r2, [r3, #2]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	20000644 	.word	0x20000644

08005414 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800541e:	2381      	movs	r3, #129	; 0x81
 8005420:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fde5 	bl	8004ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fde1 	bl	8004ff4 <ssd1306_WriteCommand>
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800544c:	23af      	movs	r3, #175	; 0xaf
 800544e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <ssd1306_SetDisplayOn+0x38>)
 8005452:	2201      	movs	r2, #1
 8005454:	715a      	strb	r2, [r3, #5]
 8005456:	e004      	b.n	8005462 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005458:	23ae      	movs	r3, #174	; 0xae
 800545a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <ssd1306_SetDisplayOn+0x38>)
 800545e:	2200      	movs	r2, #0
 8005460:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fdc5 	bl	8004ff4 <ssd1306_WriteCommand>
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000644 	.word	0x20000644

08005478 <siprintf>:
 8005478:	b40e      	push	{r1, r2, r3}
 800547a:	b500      	push	{lr}
 800547c:	b09c      	sub	sp, #112	; 0x70
 800547e:	ab1d      	add	r3, sp, #116	; 0x74
 8005480:	9002      	str	r0, [sp, #8]
 8005482:	9006      	str	r0, [sp, #24]
 8005484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <siprintf+0x38>)
 800548a:	9107      	str	r1, [sp, #28]
 800548c:	9104      	str	r1, [sp, #16]
 800548e:	4909      	ldr	r1, [pc, #36]	; (80054b4 <siprintf+0x3c>)
 8005490:	f853 2b04 	ldr.w	r2, [r3], #4
 8005494:	9105      	str	r1, [sp, #20]
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	a902      	add	r1, sp, #8
 800549c:	f000 f8a8 	bl	80055f0 <_svfiprintf_r>
 80054a0:	9b02      	ldr	r3, [sp, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	b01c      	add	sp, #112	; 0x70
 80054a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ac:	b003      	add	sp, #12
 80054ae:	4770      	bx	lr
 80054b0:	20000060 	.word	0x20000060
 80054b4:	ffff0208 	.word	0xffff0208

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <__errno>:
 80054c8:	4b01      	ldr	r3, [pc, #4]	; (80054d0 <__errno+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000060 	.word	0x20000060

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4d0d      	ldr	r5, [pc, #52]	; (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054da:	1b64      	subs	r4, r4, r5
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2600      	movs	r6, #0
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4d0b      	ldr	r5, [pc, #44]	; (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	; (8005518 <__libc_init_array+0x44>)
 80054e8:	f001 fba2 	bl	8006c30 <_init>
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2600      	movs	r6, #0
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fc:	4798      	blx	r3
 80054fe:	3601      	adds	r6, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f855 3b04 	ldr.w	r3, [r5], #4
 8005506:	4798      	blx	r3
 8005508:	3601      	adds	r6, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	08007490 	.word	0x08007490
 8005510:	08007490 	.word	0x08007490
 8005514:	08007490 	.word	0x08007490
 8005518:	08007494 	.word	0x08007494

0800551c <__retarget_lock_acquire_recursive>:
 800551c:	4770      	bx	lr

0800551e <__retarget_lock_release_recursive>:
 800551e:	4770      	bx	lr

08005520 <memcpy>:
 8005520:	440a      	add	r2, r1
 8005522:	4291      	cmp	r1, r2
 8005524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005528:	d100      	bne.n	800552c <memcpy+0xc>
 800552a:	4770      	bx	lr
 800552c:	b510      	push	{r4, lr}
 800552e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005536:	4291      	cmp	r1, r2
 8005538:	d1f9      	bne.n	800552e <memcpy+0xe>
 800553a:	bd10      	pop	{r4, pc}

0800553c <__ssputs_r>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	688e      	ldr	r6, [r1, #8]
 8005542:	461f      	mov	r7, r3
 8005544:	42be      	cmp	r6, r7
 8005546:	680b      	ldr	r3, [r1, #0]
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4690      	mov	r8, r2
 800554e:	d82c      	bhi.n	80055aa <__ssputs_r+0x6e>
 8005550:	898a      	ldrh	r2, [r1, #12]
 8005552:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005556:	d026      	beq.n	80055a6 <__ssputs_r+0x6a>
 8005558:	6965      	ldr	r5, [r4, #20]
 800555a:	6909      	ldr	r1, [r1, #16]
 800555c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005560:	eba3 0901 	sub.w	r9, r3, r1
 8005564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005568:	1c7b      	adds	r3, r7, #1
 800556a:	444b      	add	r3, r9
 800556c:	106d      	asrs	r5, r5, #1
 800556e:	429d      	cmp	r5, r3
 8005570:	bf38      	it	cc
 8005572:	461d      	movcc	r5, r3
 8005574:	0553      	lsls	r3, r2, #21
 8005576:	d527      	bpl.n	80055c8 <__ssputs_r+0x8c>
 8005578:	4629      	mov	r1, r5
 800557a:	f000 f957 	bl	800582c <_malloc_r>
 800557e:	4606      	mov	r6, r0
 8005580:	b360      	cbz	r0, 80055dc <__ssputs_r+0xa0>
 8005582:	6921      	ldr	r1, [r4, #16]
 8005584:	464a      	mov	r2, r9
 8005586:	f7ff ffcb 	bl	8005520 <memcpy>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	6126      	str	r6, [r4, #16]
 8005598:	6165      	str	r5, [r4, #20]
 800559a:	444e      	add	r6, r9
 800559c:	eba5 0509 	sub.w	r5, r5, r9
 80055a0:	6026      	str	r6, [r4, #0]
 80055a2:	60a5      	str	r5, [r4, #8]
 80055a4:	463e      	mov	r6, r7
 80055a6:	42be      	cmp	r6, r7
 80055a8:	d900      	bls.n	80055ac <__ssputs_r+0x70>
 80055aa:	463e      	mov	r6, r7
 80055ac:	6820      	ldr	r0, [r4, #0]
 80055ae:	4632      	mov	r2, r6
 80055b0:	4641      	mov	r1, r8
 80055b2:	f000 fb86 	bl	8005cc2 <memmove>
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	60a3      	str	r3, [r4, #8]
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	4433      	add	r3, r6
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	2000      	movs	r0, #0
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	462a      	mov	r2, r5
 80055ca:	f000 fb4b 	bl	8005c64 <_realloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e0      	bne.n	8005596 <__ssputs_r+0x5a>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	4650      	mov	r0, sl
 80055d8:	f000 fb9e 	bl	8005d18 <_free_r>
 80055dc:	230c      	movs	r3, #12
 80055de:	f8ca 3000 	str.w	r3, [sl]
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ee:	e7e9      	b.n	80055c4 <__ssputs_r+0x88>

080055f0 <_svfiprintf_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	4698      	mov	r8, r3
 80055f6:	898b      	ldrh	r3, [r1, #12]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	b09d      	sub	sp, #116	; 0x74
 80055fc:	4607      	mov	r7, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	4614      	mov	r4, r2
 8005602:	d50e      	bpl.n	8005622 <_svfiprintf_r+0x32>
 8005604:	690b      	ldr	r3, [r1, #16]
 8005606:	b963      	cbnz	r3, 8005622 <_svfiprintf_r+0x32>
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	f000 f90f 	bl	800582c <_malloc_r>
 800560e:	6028      	str	r0, [r5, #0]
 8005610:	6128      	str	r0, [r5, #16]
 8005612:	b920      	cbnz	r0, 800561e <_svfiprintf_r+0x2e>
 8005614:	230c      	movs	r3, #12
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561c:	e0d0      	b.n	80057c0 <_svfiprintf_r+0x1d0>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	616b      	str	r3, [r5, #20]
 8005622:	2300      	movs	r3, #0
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	2320      	movs	r3, #32
 8005628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800562c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005630:	2330      	movs	r3, #48	; 0x30
 8005632:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057d8 <_svfiprintf_r+0x1e8>
 8005636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800563a:	f04f 0901 	mov.w	r9, #1
 800563e:	4623      	mov	r3, r4
 8005640:	469a      	mov	sl, r3
 8005642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005646:	b10a      	cbz	r2, 800564c <_svfiprintf_r+0x5c>
 8005648:	2a25      	cmp	r2, #37	; 0x25
 800564a:	d1f9      	bne.n	8005640 <_svfiprintf_r+0x50>
 800564c:	ebba 0b04 	subs.w	fp, sl, r4
 8005650:	d00b      	beq.n	800566a <_svfiprintf_r+0x7a>
 8005652:	465b      	mov	r3, fp
 8005654:	4622      	mov	r2, r4
 8005656:	4629      	mov	r1, r5
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff ff6f 	bl	800553c <__ssputs_r>
 800565e:	3001      	adds	r0, #1
 8005660:	f000 80a9 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005666:	445a      	add	r2, fp
 8005668:	9209      	str	r2, [sp, #36]	; 0x24
 800566a:	f89a 3000 	ldrb.w	r3, [sl]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80a1 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005674:	2300      	movs	r3, #0
 8005676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567e:	f10a 0a01 	add.w	sl, sl, #1
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	9307      	str	r3, [sp, #28]
 8005686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800568a:	931a      	str	r3, [sp, #104]	; 0x68
 800568c:	4654      	mov	r4, sl
 800568e:	2205      	movs	r2, #5
 8005690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005694:	4850      	ldr	r0, [pc, #320]	; (80057d8 <_svfiprintf_r+0x1e8>)
 8005696:	f7fa fd9b 	bl	80001d0 <memchr>
 800569a:	9a04      	ldr	r2, [sp, #16]
 800569c:	b9d8      	cbnz	r0, 80056d6 <_svfiprintf_r+0xe6>
 800569e:	06d0      	lsls	r0, r2, #27
 80056a0:	bf44      	itt	mi
 80056a2:	2320      	movmi	r3, #32
 80056a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a8:	0711      	lsls	r1, r2, #28
 80056aa:	bf44      	itt	mi
 80056ac:	232b      	movmi	r3, #43	; 0x2b
 80056ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b2:	f89a 3000 	ldrb.w	r3, [sl]
 80056b6:	2b2a      	cmp	r3, #42	; 0x2a
 80056b8:	d015      	beq.n	80056e6 <_svfiprintf_r+0xf6>
 80056ba:	9a07      	ldr	r2, [sp, #28]
 80056bc:	4654      	mov	r4, sl
 80056be:	2000      	movs	r0, #0
 80056c0:	f04f 0c0a 	mov.w	ip, #10
 80056c4:	4621      	mov	r1, r4
 80056c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ca:	3b30      	subs	r3, #48	; 0x30
 80056cc:	2b09      	cmp	r3, #9
 80056ce:	d94d      	bls.n	800576c <_svfiprintf_r+0x17c>
 80056d0:	b1b0      	cbz	r0, 8005700 <_svfiprintf_r+0x110>
 80056d2:	9207      	str	r2, [sp, #28]
 80056d4:	e014      	b.n	8005700 <_svfiprintf_r+0x110>
 80056d6:	eba0 0308 	sub.w	r3, r0, r8
 80056da:	fa09 f303 	lsl.w	r3, r9, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	9304      	str	r3, [sp, #16]
 80056e2:	46a2      	mov	sl, r4
 80056e4:	e7d2      	b.n	800568c <_svfiprintf_r+0x9c>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	1d19      	adds	r1, r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	9103      	str	r1, [sp, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfbb      	ittet	lt
 80056f2:	425b      	neglt	r3, r3
 80056f4:	f042 0202 	orrlt.w	r2, r2, #2
 80056f8:	9307      	strge	r3, [sp, #28]
 80056fa:	9307      	strlt	r3, [sp, #28]
 80056fc:	bfb8      	it	lt
 80056fe:	9204      	strlt	r2, [sp, #16]
 8005700:	7823      	ldrb	r3, [r4, #0]
 8005702:	2b2e      	cmp	r3, #46	; 0x2e
 8005704:	d10c      	bne.n	8005720 <_svfiprintf_r+0x130>
 8005706:	7863      	ldrb	r3, [r4, #1]
 8005708:	2b2a      	cmp	r3, #42	; 0x2a
 800570a:	d134      	bne.n	8005776 <_svfiprintf_r+0x186>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	1d1a      	adds	r2, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	9203      	str	r2, [sp, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfb8      	it	lt
 8005718:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800571c:	3402      	adds	r4, #2
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057e8 <_svfiprintf_r+0x1f8>
 8005724:	7821      	ldrb	r1, [r4, #0]
 8005726:	2203      	movs	r2, #3
 8005728:	4650      	mov	r0, sl
 800572a:	f7fa fd51 	bl	80001d0 <memchr>
 800572e:	b138      	cbz	r0, 8005740 <_svfiprintf_r+0x150>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	eba0 000a 	sub.w	r0, r0, sl
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	4082      	lsls	r2, r0
 800573a:	4313      	orrs	r3, r2
 800573c:	3401      	adds	r4, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	4825      	ldr	r0, [pc, #148]	; (80057dc <_svfiprintf_r+0x1ec>)
 8005746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800574a:	2206      	movs	r2, #6
 800574c:	f7fa fd40 	bl	80001d0 <memchr>
 8005750:	2800      	cmp	r0, #0
 8005752:	d038      	beq.n	80057c6 <_svfiprintf_r+0x1d6>
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <_svfiprintf_r+0x1f0>)
 8005756:	bb1b      	cbnz	r3, 80057a0 <_svfiprintf_r+0x1b0>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3307      	adds	r3, #7
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005766:	4433      	add	r3, r6
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
 800576a:	e768      	b.n	800563e <_svfiprintf_r+0x4e>
 800576c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005770:	460c      	mov	r4, r1
 8005772:	2001      	movs	r0, #1
 8005774:	e7a6      	b.n	80056c4 <_svfiprintf_r+0xd4>
 8005776:	2300      	movs	r3, #0
 8005778:	3401      	adds	r4, #1
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4620      	mov	r0, r4
 8005784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005788:	3a30      	subs	r2, #48	; 0x30
 800578a:	2a09      	cmp	r2, #9
 800578c:	d903      	bls.n	8005796 <_svfiprintf_r+0x1a6>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0c6      	beq.n	8005720 <_svfiprintf_r+0x130>
 8005792:	9105      	str	r1, [sp, #20]
 8005794:	e7c4      	b.n	8005720 <_svfiprintf_r+0x130>
 8005796:	fb0c 2101 	mla	r1, ip, r1, r2
 800579a:	4604      	mov	r4, r0
 800579c:	2301      	movs	r3, #1
 800579e:	e7f0      	b.n	8005782 <_svfiprintf_r+0x192>
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	462a      	mov	r2, r5
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <_svfiprintf_r+0x1f4>)
 80057a8:	a904      	add	r1, sp, #16
 80057aa:	4638      	mov	r0, r7
 80057ac:	f3af 8000 	nop.w
 80057b0:	1c42      	adds	r2, r0, #1
 80057b2:	4606      	mov	r6, r0
 80057b4:	d1d6      	bne.n	8005764 <_svfiprintf_r+0x174>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	065b      	lsls	r3, r3, #25
 80057ba:	f53f af2d 	bmi.w	8005618 <_svfiprintf_r+0x28>
 80057be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c0:	b01d      	add	sp, #116	; 0x74
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <_svfiprintf_r+0x1f4>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4638      	mov	r0, r7
 80057d2:	f000 f919 	bl	8005a08 <_printf_i>
 80057d6:	e7eb      	b.n	80057b0 <_svfiprintf_r+0x1c0>
 80057d8:	08007424 	.word	0x08007424
 80057dc:	0800742e 	.word	0x0800742e
 80057e0:	00000000 	.word	0x00000000
 80057e4:	0800553d 	.word	0x0800553d
 80057e8:	0800742a 	.word	0x0800742a

080057ec <sbrk_aligned>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4e0e      	ldr	r6, [pc, #56]	; (8005828 <sbrk_aligned+0x3c>)
 80057f0:	460c      	mov	r4, r1
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	4605      	mov	r5, r0
 80057f6:	b911      	cbnz	r1, 80057fe <sbrk_aligned+0x12>
 80057f8:	f000 fa7e 	bl	8005cf8 <_sbrk_r>
 80057fc:	6030      	str	r0, [r6, #0]
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 fa79 	bl	8005cf8 <_sbrk_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d00a      	beq.n	8005820 <sbrk_aligned+0x34>
 800580a:	1cc4      	adds	r4, r0, #3
 800580c:	f024 0403 	bic.w	r4, r4, #3
 8005810:	42a0      	cmp	r0, r4
 8005812:	d007      	beq.n	8005824 <sbrk_aligned+0x38>
 8005814:	1a21      	subs	r1, r4, r0
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fa6e 	bl	8005cf8 <_sbrk_r>
 800581c:	3001      	adds	r0, #1
 800581e:	d101      	bne.n	8005824 <sbrk_aligned+0x38>
 8005820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005824:	4620      	mov	r0, r4
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	2000078c 	.word	0x2000078c

0800582c <_malloc_r>:
 800582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005830:	1ccd      	adds	r5, r1, #3
 8005832:	f025 0503 	bic.w	r5, r5, #3
 8005836:	3508      	adds	r5, #8
 8005838:	2d0c      	cmp	r5, #12
 800583a:	bf38      	it	cc
 800583c:	250c      	movcc	r5, #12
 800583e:	2d00      	cmp	r5, #0
 8005840:	4607      	mov	r7, r0
 8005842:	db01      	blt.n	8005848 <_malloc_r+0x1c>
 8005844:	42a9      	cmp	r1, r5
 8005846:	d905      	bls.n	8005854 <_malloc_r+0x28>
 8005848:	230c      	movs	r3, #12
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	2600      	movs	r6, #0
 800584e:	4630      	mov	r0, r6
 8005850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005854:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005928 <_malloc_r+0xfc>
 8005858:	f000 f9f8 	bl	8005c4c <__malloc_lock>
 800585c:	f8d8 3000 	ldr.w	r3, [r8]
 8005860:	461c      	mov	r4, r3
 8005862:	bb5c      	cbnz	r4, 80058bc <_malloc_r+0x90>
 8005864:	4629      	mov	r1, r5
 8005866:	4638      	mov	r0, r7
 8005868:	f7ff ffc0 	bl	80057ec <sbrk_aligned>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	4604      	mov	r4, r0
 8005870:	d155      	bne.n	800591e <_malloc_r+0xf2>
 8005872:	f8d8 4000 	ldr.w	r4, [r8]
 8005876:	4626      	mov	r6, r4
 8005878:	2e00      	cmp	r6, #0
 800587a:	d145      	bne.n	8005908 <_malloc_r+0xdc>
 800587c:	2c00      	cmp	r4, #0
 800587e:	d048      	beq.n	8005912 <_malloc_r+0xe6>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	4631      	mov	r1, r6
 8005884:	4638      	mov	r0, r7
 8005886:	eb04 0903 	add.w	r9, r4, r3
 800588a:	f000 fa35 	bl	8005cf8 <_sbrk_r>
 800588e:	4581      	cmp	r9, r0
 8005890:	d13f      	bne.n	8005912 <_malloc_r+0xe6>
 8005892:	6821      	ldr	r1, [r4, #0]
 8005894:	1a6d      	subs	r5, r5, r1
 8005896:	4629      	mov	r1, r5
 8005898:	4638      	mov	r0, r7
 800589a:	f7ff ffa7 	bl	80057ec <sbrk_aligned>
 800589e:	3001      	adds	r0, #1
 80058a0:	d037      	beq.n	8005912 <_malloc_r+0xe6>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	442b      	add	r3, r5
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	f8d8 3000 	ldr.w	r3, [r8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d038      	beq.n	8005922 <_malloc_r+0xf6>
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	42a2      	cmp	r2, r4
 80058b4:	d12b      	bne.n	800590e <_malloc_r+0xe2>
 80058b6:	2200      	movs	r2, #0
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e00f      	b.n	80058dc <_malloc_r+0xb0>
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	1b52      	subs	r2, r2, r5
 80058c0:	d41f      	bmi.n	8005902 <_malloc_r+0xd6>
 80058c2:	2a0b      	cmp	r2, #11
 80058c4:	d917      	bls.n	80058f6 <_malloc_r+0xca>
 80058c6:	1961      	adds	r1, r4, r5
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	6025      	str	r5, [r4, #0]
 80058cc:	bf18      	it	ne
 80058ce:	6059      	strne	r1, [r3, #4]
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	bf08      	it	eq
 80058d4:	f8c8 1000 	streq.w	r1, [r8]
 80058d8:	5162      	str	r2, [r4, r5]
 80058da:	604b      	str	r3, [r1, #4]
 80058dc:	4638      	mov	r0, r7
 80058de:	f104 060b 	add.w	r6, r4, #11
 80058e2:	f000 f9b9 	bl	8005c58 <__malloc_unlock>
 80058e6:	f026 0607 	bic.w	r6, r6, #7
 80058ea:	1d23      	adds	r3, r4, #4
 80058ec:	1af2      	subs	r2, r6, r3
 80058ee:	d0ae      	beq.n	800584e <_malloc_r+0x22>
 80058f0:	1b9b      	subs	r3, r3, r6
 80058f2:	50a3      	str	r3, [r4, r2]
 80058f4:	e7ab      	b.n	800584e <_malloc_r+0x22>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	6862      	ldr	r2, [r4, #4]
 80058fa:	d1dd      	bne.n	80058b8 <_malloc_r+0x8c>
 80058fc:	f8c8 2000 	str.w	r2, [r8]
 8005900:	e7ec      	b.n	80058dc <_malloc_r+0xb0>
 8005902:	4623      	mov	r3, r4
 8005904:	6864      	ldr	r4, [r4, #4]
 8005906:	e7ac      	b.n	8005862 <_malloc_r+0x36>
 8005908:	4634      	mov	r4, r6
 800590a:	6876      	ldr	r6, [r6, #4]
 800590c:	e7b4      	b.n	8005878 <_malloc_r+0x4c>
 800590e:	4613      	mov	r3, r2
 8005910:	e7cc      	b.n	80058ac <_malloc_r+0x80>
 8005912:	230c      	movs	r3, #12
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	4638      	mov	r0, r7
 8005918:	f000 f99e 	bl	8005c58 <__malloc_unlock>
 800591c:	e797      	b.n	800584e <_malloc_r+0x22>
 800591e:	6025      	str	r5, [r4, #0]
 8005920:	e7dc      	b.n	80058dc <_malloc_r+0xb0>
 8005922:	605b      	str	r3, [r3, #4]
 8005924:	deff      	udf	#255	; 0xff
 8005926:	bf00      	nop
 8005928:	20000788 	.word	0x20000788

0800592c <_printf_common>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	4616      	mov	r6, r2
 8005932:	4699      	mov	r9, r3
 8005934:	688a      	ldr	r2, [r1, #8]
 8005936:	690b      	ldr	r3, [r1, #16]
 8005938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800593c:	4293      	cmp	r3, r2
 800593e:	bfb8      	it	lt
 8005940:	4613      	movlt	r3, r2
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005948:	4607      	mov	r7, r0
 800594a:	460c      	mov	r4, r1
 800594c:	b10a      	cbz	r2, 8005952 <_printf_common+0x26>
 800594e:	3301      	adds	r3, #1
 8005950:	6033      	str	r3, [r6, #0]
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	0699      	lsls	r1, r3, #26
 8005956:	bf42      	ittt	mi
 8005958:	6833      	ldrmi	r3, [r6, #0]
 800595a:	3302      	addmi	r3, #2
 800595c:	6033      	strmi	r3, [r6, #0]
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	f015 0506 	ands.w	r5, r5, #6
 8005964:	d106      	bne.n	8005974 <_printf_common+0x48>
 8005966:	f104 0a19 	add.w	sl, r4, #25
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	6832      	ldr	r2, [r6, #0]
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc26      	bgt.n	80059c2 <_printf_common+0x96>
 8005974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005978:	1e13      	subs	r3, r2, #0
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	bf18      	it	ne
 800597e:	2301      	movne	r3, #1
 8005980:	0692      	lsls	r2, r2, #26
 8005982:	d42b      	bmi.n	80059dc <_printf_common+0xb0>
 8005984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005988:	4649      	mov	r1, r9
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d01e      	beq.n	80059d0 <_printf_common+0xa4>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	f003 0306 	and.w	r3, r3, #6
 800599a:	2b04      	cmp	r3, #4
 800599c:	bf02      	ittt	eq
 800599e:	68e5      	ldreq	r5, [r4, #12]
 80059a0:	6833      	ldreq	r3, [r6, #0]
 80059a2:	1aed      	subeq	r5, r5, r3
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	bf0c      	ite	eq
 80059a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ac:	2500      	movne	r5, #0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bfc4      	itt	gt
 80059b2:	1a9b      	subgt	r3, r3, r2
 80059b4:	18ed      	addgt	r5, r5, r3
 80059b6:	2600      	movs	r6, #0
 80059b8:	341a      	adds	r4, #26
 80059ba:	42b5      	cmp	r5, r6
 80059bc:	d11a      	bne.n	80059f4 <_printf_common+0xc8>
 80059be:	2000      	movs	r0, #0
 80059c0:	e008      	b.n	80059d4 <_printf_common+0xa8>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4649      	mov	r1, r9
 80059c8:	4638      	mov	r0, r7
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d103      	bne.n	80059d8 <_printf_common+0xac>
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	3501      	adds	r5, #1
 80059da:	e7c6      	b.n	800596a <_printf_common+0x3e>
 80059dc:	18e1      	adds	r1, r4, r3
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	2030      	movs	r0, #48	; 0x30
 80059e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059e6:	4422      	add	r2, r4
 80059e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f0:	3302      	adds	r3, #2
 80059f2:	e7c7      	b.n	8005984 <_printf_common+0x58>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4622      	mov	r2, r4
 80059f8:	4649      	mov	r1, r9
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0e6      	beq.n	80059d0 <_printf_common+0xa4>
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7d9      	b.n	80059ba <_printf_common+0x8e>
	...

08005a08 <_printf_i>:
 8005a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	7e0f      	ldrb	r7, [r1, #24]
 8005a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a10:	2f78      	cmp	r7, #120	; 0x78
 8005a12:	4691      	mov	r9, r2
 8005a14:	4680      	mov	r8, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	469a      	mov	sl, r3
 8005a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a1e:	d807      	bhi.n	8005a30 <_printf_i+0x28>
 8005a20:	2f62      	cmp	r7, #98	; 0x62
 8005a22:	d80a      	bhi.n	8005a3a <_printf_i+0x32>
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	f000 80d4 	beq.w	8005bd2 <_printf_i+0x1ca>
 8005a2a:	2f58      	cmp	r7, #88	; 0x58
 8005a2c:	f000 80c0 	beq.w	8005bb0 <_printf_i+0x1a8>
 8005a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a38:	e03a      	b.n	8005ab0 <_printf_i+0xa8>
 8005a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a3e:	2b15      	cmp	r3, #21
 8005a40:	d8f6      	bhi.n	8005a30 <_printf_i+0x28>
 8005a42:	a101      	add	r1, pc, #4	; (adr r1, 8005a48 <_printf_i+0x40>)
 8005a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005a31 	.word	0x08005a31
 8005a54:	08005a31 	.word	0x08005a31
 8005a58:	08005a31 	.word	0x08005a31
 8005a5c:	08005a31 	.word	0x08005a31
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a31 	.word	0x08005a31
 8005a68:	08005a31 	.word	0x08005a31
 8005a6c:	08005a31 	.word	0x08005a31
 8005a70:	08005a31 	.word	0x08005a31
 8005a74:	08005bb9 	.word	0x08005bb9
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005b73 	.word	0x08005b73
 8005a80:	08005a31 	.word	0x08005a31
 8005a84:	08005a31 	.word	0x08005a31
 8005a88:	08005bdb 	.word	0x08005bdb
 8005a8c:	08005a31 	.word	0x08005a31
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005a31 	.word	0x08005a31
 8005a98:	08005a31 	.word	0x08005a31
 8005a9c:	08005b7b 	.word	0x08005b7b
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e09f      	b.n	8005bf4 <_printf_i+0x1ec>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	0607      	lsls	r7, r0, #24
 8005aba:	f103 0104 	add.w	r1, r3, #4
 8005abe:	6029      	str	r1, [r5, #0]
 8005ac0:	d501      	bpl.n	8005ac6 <_printf_i+0xbe>
 8005ac2:	681e      	ldr	r6, [r3, #0]
 8005ac4:	e003      	b.n	8005ace <_printf_i+0xc6>
 8005ac6:	0646      	lsls	r6, r0, #25
 8005ac8:	d5fb      	bpl.n	8005ac2 <_printf_i+0xba>
 8005aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	da03      	bge.n	8005ada <_printf_i+0xd2>
 8005ad2:	232d      	movs	r3, #45	; 0x2d
 8005ad4:	4276      	negs	r6, r6
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	485a      	ldr	r0, [pc, #360]	; (8005c44 <_printf_i+0x23c>)
 8005adc:	230a      	movs	r3, #10
 8005ade:	e012      	b.n	8005b06 <_printf_i+0xfe>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6029      	str	r1, [r5, #0]
 8005ae8:	0605      	lsls	r5, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xe8>
 8005aec:	681e      	ldr	r6, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0xee>
 8005af0:	0641      	lsls	r1, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xe4>
 8005af4:	881e      	ldrh	r6, [r3, #0]
 8005af6:	4853      	ldr	r0, [pc, #332]	; (8005c44 <_printf_i+0x23c>)
 8005af8:	2f6f      	cmp	r7, #111	; 0x6f
 8005afa:	bf0c      	ite	eq
 8005afc:	2308      	moveq	r3, #8
 8005afe:	230a      	movne	r3, #10
 8005b00:	2100      	movs	r1, #0
 8005b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b06:	6865      	ldr	r5, [r4, #4]
 8005b08:	60a5      	str	r5, [r4, #8]
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	bfa2      	ittt	ge
 8005b0e:	6821      	ldrge	r1, [r4, #0]
 8005b10:	f021 0104 	bicge.w	r1, r1, #4
 8005b14:	6021      	strge	r1, [r4, #0]
 8005b16:	b90e      	cbnz	r6, 8005b1c <_printf_i+0x114>
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	d04b      	beq.n	8005bb4 <_printf_i+0x1ac>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b22:	fb03 6711 	mls	r7, r3, r1, r6
 8005b26:	5dc7      	ldrb	r7, [r0, r7]
 8005b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b2c:	4637      	mov	r7, r6
 8005b2e:	42bb      	cmp	r3, r7
 8005b30:	460e      	mov	r6, r1
 8005b32:	d9f4      	bls.n	8005b1e <_printf_i+0x116>
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d10b      	bne.n	8005b50 <_printf_i+0x148>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	07de      	lsls	r6, r3, #31
 8005b3c:	d508      	bpl.n	8005b50 <_printf_i+0x148>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	6861      	ldr	r1, [r4, #4]
 8005b42:	4299      	cmp	r1, r3
 8005b44:	bfde      	ittt	le
 8005b46:	2330      	movle	r3, #48	; 0x30
 8005b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b50:	1b52      	subs	r2, r2, r5
 8005b52:	6122      	str	r2, [r4, #16]
 8005b54:	f8cd a000 	str.w	sl, [sp]
 8005b58:	464b      	mov	r3, r9
 8005b5a:	aa03      	add	r2, sp, #12
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f7ff fee4 	bl	800592c <_printf_common>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d14a      	bne.n	8005bfe <_printf_i+0x1f6>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b6c:	b004      	add	sp, #16
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f043 0320 	orr.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	4833      	ldr	r0, [pc, #204]	; (8005c48 <_printf_i+0x240>)
 8005b7c:	2778      	movs	r7, #120	; 0x78
 8005b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6829      	ldr	r1, [r5, #0]
 8005b86:	061f      	lsls	r7, r3, #24
 8005b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b8c:	d402      	bmi.n	8005b94 <_printf_i+0x18c>
 8005b8e:	065f      	lsls	r7, r3, #25
 8005b90:	bf48      	it	mi
 8005b92:	b2b6      	uxthmi	r6, r6
 8005b94:	07df      	lsls	r7, r3, #31
 8005b96:	bf48      	it	mi
 8005b98:	f043 0320 	orrmi.w	r3, r3, #32
 8005b9c:	6029      	str	r1, [r5, #0]
 8005b9e:	bf48      	it	mi
 8005ba0:	6023      	strmi	r3, [r4, #0]
 8005ba2:	b91e      	cbnz	r6, 8005bac <_printf_i+0x1a4>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	f023 0320 	bic.w	r3, r3, #32
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	2310      	movs	r3, #16
 8005bae:	e7a7      	b.n	8005b00 <_printf_i+0xf8>
 8005bb0:	4824      	ldr	r0, [pc, #144]	; (8005c44 <_printf_i+0x23c>)
 8005bb2:	e7e4      	b.n	8005b7e <_printf_i+0x176>
 8005bb4:	4615      	mov	r5, r2
 8005bb6:	e7bd      	b.n	8005b34 <_printf_i+0x12c>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6826      	ldr	r6, [r4, #0]
 8005bbc:	6961      	ldr	r1, [r4, #20]
 8005bbe:	1d18      	adds	r0, r3, #4
 8005bc0:	6028      	str	r0, [r5, #0]
 8005bc2:	0635      	lsls	r5, r6, #24
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	d501      	bpl.n	8005bcc <_printf_i+0x1c4>
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	e002      	b.n	8005bd2 <_printf_i+0x1ca>
 8005bcc:	0670      	lsls	r0, r6, #25
 8005bce:	d5fb      	bpl.n	8005bc8 <_printf_i+0x1c0>
 8005bd0:	8019      	strh	r1, [r3, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	4615      	mov	r5, r2
 8005bd8:	e7bc      	b.n	8005b54 <_printf_i+0x14c>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	602a      	str	r2, [r5, #0]
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	2100      	movs	r1, #0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7fa faf2 	bl	80001d0 <memchr>
 8005bec:	b108      	cbz	r0, 8005bf2 <_printf_i+0x1ea>
 8005bee:	1b40      	subs	r0, r0, r5
 8005bf0:	6060      	str	r0, [r4, #4]
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	e7aa      	b.n	8005b54 <_printf_i+0x14c>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	462a      	mov	r2, r5
 8005c02:	4649      	mov	r1, r9
 8005c04:	4640      	mov	r0, r8
 8005c06:	47d0      	blx	sl
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d0ad      	beq.n	8005b68 <_printf_i+0x160>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	079b      	lsls	r3, r3, #30
 8005c10:	d413      	bmi.n	8005c3a <_printf_i+0x232>
 8005c12:	68e0      	ldr	r0, [r4, #12]
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	4298      	cmp	r0, r3
 8005c18:	bfb8      	it	lt
 8005c1a:	4618      	movlt	r0, r3
 8005c1c:	e7a6      	b.n	8005b6c <_printf_i+0x164>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4632      	mov	r2, r6
 8005c22:	4649      	mov	r1, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	47d0      	blx	sl
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d09d      	beq.n	8005b68 <_printf_i+0x160>
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	9903      	ldr	r1, [sp, #12]
 8005c32:	1a5b      	subs	r3, r3, r1
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	dcf2      	bgt.n	8005c1e <_printf_i+0x216>
 8005c38:	e7eb      	b.n	8005c12 <_printf_i+0x20a>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	f104 0619 	add.w	r6, r4, #25
 8005c40:	e7f5      	b.n	8005c2e <_printf_i+0x226>
 8005c42:	bf00      	nop
 8005c44:	08007435 	.word	0x08007435
 8005c48:	08007446 	.word	0x08007446

08005c4c <__malloc_lock>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	; (8005c54 <__malloc_lock+0x8>)
 8005c4e:	f7ff bc65 	b.w	800551c <__retarget_lock_acquire_recursive>
 8005c52:	bf00      	nop
 8005c54:	20000784 	.word	0x20000784

08005c58 <__malloc_unlock>:
 8005c58:	4801      	ldr	r0, [pc, #4]	; (8005c60 <__malloc_unlock+0x8>)
 8005c5a:	f7ff bc60 	b.w	800551e <__retarget_lock_release_recursive>
 8005c5e:	bf00      	nop
 8005c60:	20000784 	.word	0x20000784

08005c64 <_realloc_r>:
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	b921      	cbnz	r1, 8005c7a <_realloc_r+0x16>
 8005c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c74:	4611      	mov	r1, r2
 8005c76:	f7ff bdd9 	b.w	800582c <_malloc_r>
 8005c7a:	b92a      	cbnz	r2, 8005c88 <_realloc_r+0x24>
 8005c7c:	f000 f84c 	bl	8005d18 <_free_r>
 8005c80:	4625      	mov	r5, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	f000 f892 	bl	8005db0 <_malloc_usable_size_r>
 8005c8c:	4284      	cmp	r4, r0
 8005c8e:	4607      	mov	r7, r0
 8005c90:	d802      	bhi.n	8005c98 <_realloc_r+0x34>
 8005c92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c96:	d812      	bhi.n	8005cbe <_realloc_r+0x5a>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fdc6 	bl	800582c <_malloc_r>
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d0ed      	beq.n	8005c82 <_realloc_r+0x1e>
 8005ca6:	42bc      	cmp	r4, r7
 8005ca8:	4622      	mov	r2, r4
 8005caa:	4631      	mov	r1, r6
 8005cac:	bf28      	it	cs
 8005cae:	463a      	movcs	r2, r7
 8005cb0:	f7ff fc36 	bl	8005520 <memcpy>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f000 f82e 	bl	8005d18 <_free_r>
 8005cbc:	e7e1      	b.n	8005c82 <_realloc_r+0x1e>
 8005cbe:	4635      	mov	r5, r6
 8005cc0:	e7df      	b.n	8005c82 <_realloc_r+0x1e>

08005cc2 <memmove>:
 8005cc2:	4288      	cmp	r0, r1
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	eb01 0402 	add.w	r4, r1, r2
 8005cca:	d902      	bls.n	8005cd2 <memmove+0x10>
 8005ccc:	4284      	cmp	r4, r0
 8005cce:	4623      	mov	r3, r4
 8005cd0:	d807      	bhi.n	8005ce2 <memmove+0x20>
 8005cd2:	1e43      	subs	r3, r0, #1
 8005cd4:	42a1      	cmp	r1, r4
 8005cd6:	d008      	beq.n	8005cea <memmove+0x28>
 8005cd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ce0:	e7f8      	b.n	8005cd4 <memmove+0x12>
 8005ce2:	4402      	add	r2, r0
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	428a      	cmp	r2, r1
 8005ce8:	d100      	bne.n	8005cec <memmove+0x2a>
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cf4:	e7f7      	b.n	8005ce6 <memmove+0x24>
	...

08005cf8 <_sbrk_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	; (8005d14 <_sbrk_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fc faf4 	bl	80022f0 <_sbrk>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_sbrk_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_sbrk_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	20000790 	.word	0x20000790

08005d18 <_free_r>:
 8005d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d044      	beq.n	8005da8 <_free_r+0x90>
 8005d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d22:	9001      	str	r0, [sp, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f1a1 0404 	sub.w	r4, r1, #4
 8005d2a:	bfb8      	it	lt
 8005d2c:	18e4      	addlt	r4, r4, r3
 8005d2e:	f7ff ff8d 	bl	8005c4c <__malloc_lock>
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <_free_r+0x94>)
 8005d34:	9801      	ldr	r0, [sp, #4]
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	b933      	cbnz	r3, 8005d48 <_free_r+0x30>
 8005d3a:	6063      	str	r3, [r4, #4]
 8005d3c:	6014      	str	r4, [r2, #0]
 8005d3e:	b003      	add	sp, #12
 8005d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d44:	f7ff bf88 	b.w	8005c58 <__malloc_unlock>
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d908      	bls.n	8005d5e <_free_r+0x46>
 8005d4c:	6825      	ldr	r5, [r4, #0]
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf01      	itttt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	1949      	addeq	r1, r1, r5
 8005d5a:	6021      	streq	r1, [r4, #0]
 8005d5c:	e7ed      	b.n	8005d3a <_free_r+0x22>
 8005d5e:	461a      	mov	r2, r3
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b10b      	cbz	r3, 8005d68 <_free_r+0x50>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d9fa      	bls.n	8005d5e <_free_r+0x46>
 8005d68:	6811      	ldr	r1, [r2, #0]
 8005d6a:	1855      	adds	r5, r2, r1
 8005d6c:	42a5      	cmp	r5, r4
 8005d6e:	d10b      	bne.n	8005d88 <_free_r+0x70>
 8005d70:	6824      	ldr	r4, [r4, #0]
 8005d72:	4421      	add	r1, r4
 8005d74:	1854      	adds	r4, r2, r1
 8005d76:	42a3      	cmp	r3, r4
 8005d78:	6011      	str	r1, [r2, #0]
 8005d7a:	d1e0      	bne.n	8005d3e <_free_r+0x26>
 8005d7c:	681c      	ldr	r4, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	6053      	str	r3, [r2, #4]
 8005d82:	440c      	add	r4, r1
 8005d84:	6014      	str	r4, [r2, #0]
 8005d86:	e7da      	b.n	8005d3e <_free_r+0x26>
 8005d88:	d902      	bls.n	8005d90 <_free_r+0x78>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	6003      	str	r3, [r0, #0]
 8005d8e:	e7d6      	b.n	8005d3e <_free_r+0x26>
 8005d90:	6825      	ldr	r5, [r4, #0]
 8005d92:	1961      	adds	r1, r4, r5
 8005d94:	428b      	cmp	r3, r1
 8005d96:	bf04      	itt	eq
 8005d98:	6819      	ldreq	r1, [r3, #0]
 8005d9a:	685b      	ldreq	r3, [r3, #4]
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	bf04      	itt	eq
 8005da0:	1949      	addeq	r1, r1, r5
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	6054      	str	r4, [r2, #4]
 8005da6:	e7ca      	b.n	8005d3e <_free_r+0x26>
 8005da8:	b003      	add	sp, #12
 8005daa:	bd30      	pop	{r4, r5, pc}
 8005dac:	20000788 	.word	0x20000788

08005db0 <_malloc_usable_size_r>:
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f18      	subs	r0, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfbc      	itt	lt
 8005dba:	580b      	ldrlt	r3, [r1, r0]
 8005dbc:	18c0      	addlt	r0, r0, r3
 8005dbe:	4770      	bx	lr

08005dc0 <pow>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	ed2d 8b02 	vpush	{d8}
 8005dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dca:	eef0 8a60 	vmov.f32	s17, s1
 8005dce:	ec55 4b11 	vmov	r4, r5, d1
 8005dd2:	f000 f871 	bl	8005eb8 <__ieee754_pow>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	ec57 6b10 	vmov	r6, r7, d0
 8005de2:	f7fa fe9b 	bl	8000b1c <__aeabi_dcmpun>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d13b      	bne.n	8005e62 <pow+0xa2>
 8005dea:	ec51 0b18 	vmov	r0, r1, d8
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	f7fa fe61 	bl	8000ab8 <__aeabi_dcmpeq>
 8005df6:	b1b8      	cbz	r0, 8005e28 <pow+0x68>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fe5a 	bl	8000ab8 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d146      	bne.n	8005e96 <pow+0xd6>
 8005e08:	ec45 4b10 	vmov	d0, r4, r5
 8005e0c:	f000 f848 	bl	8005ea0 <finite>
 8005e10:	b338      	cbz	r0, 8005e62 <pow+0xa2>
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa fe57 	bl	8000acc <__aeabi_dcmplt>
 8005e1e:	b300      	cbz	r0, 8005e62 <pow+0xa2>
 8005e20:	f7ff fb52 	bl	80054c8 <__errno>
 8005e24:	2322      	movs	r3, #34	; 0x22
 8005e26:	e01b      	b.n	8005e60 <pow+0xa0>
 8005e28:	ec47 6b10 	vmov	d0, r6, r7
 8005e2c:	f000 f838 	bl	8005ea0 <finite>
 8005e30:	b9e0      	cbnz	r0, 8005e6c <pow+0xac>
 8005e32:	eeb0 0a48 	vmov.f32	s0, s16
 8005e36:	eef0 0a68 	vmov.f32	s1, s17
 8005e3a:	f000 f831 	bl	8005ea0 <finite>
 8005e3e:	b1a8      	cbz	r0, 8005e6c <pow+0xac>
 8005e40:	ec45 4b10 	vmov	d0, r4, r5
 8005e44:	f000 f82c 	bl	8005ea0 <finite>
 8005e48:	b180      	cbz	r0, 8005e6c <pow+0xac>
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	4639      	mov	r1, r7
 8005e52:	f7fa fe63 	bl	8000b1c <__aeabi_dcmpun>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d0e2      	beq.n	8005e20 <pow+0x60>
 8005e5a:	f7ff fb35 	bl	80054c8 <__errno>
 8005e5e:	2321      	movs	r3, #33	; 0x21
 8005e60:	6003      	str	r3, [r0, #0]
 8005e62:	ecbd 8b02 	vpop	{d8}
 8005e66:	ec47 6b10 	vmov	d0, r6, r7
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fe20 	bl	8000ab8 <__aeabi_dcmpeq>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d0f2      	beq.n	8005e62 <pow+0xa2>
 8005e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e80:	eef0 0a68 	vmov.f32	s1, s17
 8005e84:	f000 f80c 	bl	8005ea0 <finite>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d0ea      	beq.n	8005e62 <pow+0xa2>
 8005e8c:	ec45 4b10 	vmov	d0, r4, r5
 8005e90:	f000 f806 	bl	8005ea0 <finite>
 8005e94:	e7c3      	b.n	8005e1e <pow+0x5e>
 8005e96:	4f01      	ldr	r7, [pc, #4]	; (8005e9c <pow+0xdc>)
 8005e98:	2600      	movs	r6, #0
 8005e9a:	e7e2      	b.n	8005e62 <pow+0xa2>
 8005e9c:	3ff00000 	.word	0x3ff00000

08005ea0 <finite>:
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	ed8d 0b00 	vstr	d0, [sp]
 8005ea6:	9801      	ldr	r0, [sp, #4]
 8005ea8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005eac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005eb0:	0fc0      	lsrs	r0, r0, #31
 8005eb2:	b002      	add	sp, #8
 8005eb4:	4770      	bx	lr
	...

08005eb8 <__ieee754_pow>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	ed2d 8b06 	vpush	{d8-d10}
 8005ec0:	b089      	sub	sp, #36	; 0x24
 8005ec2:	ed8d 1b00 	vstr	d1, [sp]
 8005ec6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005eca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005ece:	ea58 0102 	orrs.w	r1, r8, r2
 8005ed2:	ec57 6b10 	vmov	r6, r7, d0
 8005ed6:	d115      	bne.n	8005f04 <__ieee754_pow+0x4c>
 8005ed8:	19b3      	adds	r3, r6, r6
 8005eda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005ede:	4152      	adcs	r2, r2
 8005ee0:	4299      	cmp	r1, r3
 8005ee2:	4b89      	ldr	r3, [pc, #548]	; (8006108 <__ieee754_pow+0x250>)
 8005ee4:	4193      	sbcs	r3, r2
 8005ee6:	f080 84d1 	bcs.w	800688c <__ieee754_pow+0x9d4>
 8005eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	f7fa f9c3 	bl	800027c <__adddf3>
 8005ef6:	ec41 0b10 	vmov	d0, r0, r1
 8005efa:	b009      	add	sp, #36	; 0x24
 8005efc:	ecbd 8b06 	vpop	{d8-d10}
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	4b81      	ldr	r3, [pc, #516]	; (800610c <__ieee754_pow+0x254>)
 8005f06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	ee10 aa10 	vmov	sl, s0
 8005f10:	463d      	mov	r5, r7
 8005f12:	dc06      	bgt.n	8005f22 <__ieee754_pow+0x6a>
 8005f14:	d101      	bne.n	8005f1a <__ieee754_pow+0x62>
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d1e7      	bne.n	8005eea <__ieee754_pow+0x32>
 8005f1a:	4598      	cmp	r8, r3
 8005f1c:	dc01      	bgt.n	8005f22 <__ieee754_pow+0x6a>
 8005f1e:	d10f      	bne.n	8005f40 <__ieee754_pow+0x88>
 8005f20:	b172      	cbz	r2, 8005f40 <__ieee754_pow+0x88>
 8005f22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f2a:	ea55 050a 	orrs.w	r5, r5, sl
 8005f2e:	d1dc      	bne.n	8005eea <__ieee754_pow+0x32>
 8005f30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005f34:	18db      	adds	r3, r3, r3
 8005f36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005f3a:	4152      	adcs	r2, r2
 8005f3c:	429d      	cmp	r5, r3
 8005f3e:	e7d0      	b.n	8005ee2 <__ieee754_pow+0x2a>
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	da3b      	bge.n	8005fbc <__ieee754_pow+0x104>
 8005f44:	4b72      	ldr	r3, [pc, #456]	; (8006110 <__ieee754_pow+0x258>)
 8005f46:	4598      	cmp	r8, r3
 8005f48:	dc51      	bgt.n	8005fee <__ieee754_pow+0x136>
 8005f4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f4e:	4598      	cmp	r8, r3
 8005f50:	f340 84ab 	ble.w	80068aa <__ieee754_pow+0x9f2>
 8005f54:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f5c:	2b14      	cmp	r3, #20
 8005f5e:	dd0f      	ble.n	8005f80 <__ieee754_pow+0xc8>
 8005f60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f64:	fa22 f103 	lsr.w	r1, r2, r3
 8005f68:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	f040 849c 	bne.w	80068aa <__ieee754_pow+0x9f2>
 8005f72:	f001 0101 	and.w	r1, r1, #1
 8005f76:	f1c1 0302 	rsb	r3, r1, #2
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	b182      	cbz	r2, 8005fa0 <__ieee754_pow+0xe8>
 8005f7e:	e05f      	b.n	8006040 <__ieee754_pow+0x188>
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d15b      	bne.n	800603c <__ieee754_pow+0x184>
 8005f84:	f1c3 0314 	rsb	r3, r3, #20
 8005f88:	fa48 f103 	asr.w	r1, r8, r3
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	4543      	cmp	r3, r8
 8005f92:	f040 8487 	bne.w	80068a4 <__ieee754_pow+0x9ec>
 8005f96:	f001 0101 	and.w	r1, r1, #1
 8005f9a:	f1c1 0302 	rsb	r3, r1, #2
 8005f9e:	9304      	str	r3, [sp, #16]
 8005fa0:	4b5c      	ldr	r3, [pc, #368]	; (8006114 <__ieee754_pow+0x25c>)
 8005fa2:	4598      	cmp	r8, r3
 8005fa4:	d132      	bne.n	800600c <__ieee754_pow+0x154>
 8005fa6:	f1b9 0f00 	cmp.w	r9, #0
 8005faa:	f280 8477 	bge.w	800689c <__ieee754_pow+0x9e4>
 8005fae:	4959      	ldr	r1, [pc, #356]	; (8006114 <__ieee754_pow+0x25c>)
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fa fc41 	bl	800083c <__aeabi_ddiv>
 8005fba:	e79c      	b.n	8005ef6 <__ieee754_pow+0x3e>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	d13d      	bne.n	8006040 <__ieee754_pow+0x188>
 8005fc4:	4b51      	ldr	r3, [pc, #324]	; (800610c <__ieee754_pow+0x254>)
 8005fc6:	4598      	cmp	r8, r3
 8005fc8:	d1ea      	bne.n	8005fa0 <__ieee754_pow+0xe8>
 8005fca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005fce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005fd2:	ea53 030a 	orrs.w	r3, r3, sl
 8005fd6:	f000 8459 	beq.w	800688c <__ieee754_pow+0x9d4>
 8005fda:	4b4f      	ldr	r3, [pc, #316]	; (8006118 <__ieee754_pow+0x260>)
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	dd08      	ble.n	8005ff2 <__ieee754_pow+0x13a>
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	f2c0 8456 	blt.w	8006894 <__ieee754_pow+0x9dc>
 8005fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fec:	e783      	b.n	8005ef6 <__ieee754_pow+0x3e>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e7e5      	b.n	8005fbe <__ieee754_pow+0x106>
 8005ff2:	f1b9 0f00 	cmp.w	r9, #0
 8005ff6:	f04f 0000 	mov.w	r0, #0
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	f6bf af7a 	bge.w	8005ef6 <__ieee754_pow+0x3e>
 8006002:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006006:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800600a:	e774      	b.n	8005ef6 <__ieee754_pow+0x3e>
 800600c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006010:	d106      	bne.n	8006020 <__ieee754_pow+0x168>
 8006012:	4632      	mov	r2, r6
 8006014:	463b      	mov	r3, r7
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fae5 	bl	80005e8 <__aeabi_dmul>
 800601e:	e76a      	b.n	8005ef6 <__ieee754_pow+0x3e>
 8006020:	4b3e      	ldr	r3, [pc, #248]	; (800611c <__ieee754_pow+0x264>)
 8006022:	4599      	cmp	r9, r3
 8006024:	d10c      	bne.n	8006040 <__ieee754_pow+0x188>
 8006026:	2d00      	cmp	r5, #0
 8006028:	db0a      	blt.n	8006040 <__ieee754_pow+0x188>
 800602a:	ec47 6b10 	vmov	d0, r6, r7
 800602e:	b009      	add	sp, #36	; 0x24
 8006030:	ecbd 8b06 	vpop	{d8-d10}
 8006034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	f000 bd20 	b.w	8006a7c <__ieee754_sqrt>
 800603c:	2300      	movs	r3, #0
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	ec47 6b10 	vmov	d0, r6, r7
 8006044:	f000 fc92 	bl	800696c <fabs>
 8006048:	ec51 0b10 	vmov	r0, r1, d0
 800604c:	f1ba 0f00 	cmp.w	sl, #0
 8006050:	d129      	bne.n	80060a6 <__ieee754_pow+0x1ee>
 8006052:	b124      	cbz	r4, 800605e <__ieee754_pow+0x1a6>
 8006054:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <__ieee754_pow+0x25c>)
 8006056:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800605a:	429a      	cmp	r2, r3
 800605c:	d123      	bne.n	80060a6 <__ieee754_pow+0x1ee>
 800605e:	f1b9 0f00 	cmp.w	r9, #0
 8006062:	da05      	bge.n	8006070 <__ieee754_pow+0x1b8>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	2000      	movs	r0, #0
 800606a:	492a      	ldr	r1, [pc, #168]	; (8006114 <__ieee754_pow+0x25c>)
 800606c:	f7fa fbe6 	bl	800083c <__aeabi_ddiv>
 8006070:	2d00      	cmp	r5, #0
 8006072:	f6bf af40 	bge.w	8005ef6 <__ieee754_pow+0x3e>
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800607c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006080:	431c      	orrs	r4, r3
 8006082:	d108      	bne.n	8006096 <__ieee754_pow+0x1de>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4610      	mov	r0, r2
 800608a:	4619      	mov	r1, r3
 800608c:	f7fa f8f4 	bl	8000278 <__aeabi_dsub>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	e78f      	b.n	8005fb6 <__ieee754_pow+0xfe>
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	2b01      	cmp	r3, #1
 800609a:	f47f af2c 	bne.w	8005ef6 <__ieee754_pow+0x3e>
 800609e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060a2:	4619      	mov	r1, r3
 80060a4:	e727      	b.n	8005ef6 <__ieee754_pow+0x3e>
 80060a6:	0feb      	lsrs	r3, r5, #31
 80060a8:	3b01      	subs	r3, #1
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	9a06      	ldr	r2, [sp, #24]
 80060ae:	9b04      	ldr	r3, [sp, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d102      	bne.n	80060ba <__ieee754_pow+0x202>
 80060b4:	4632      	mov	r2, r6
 80060b6:	463b      	mov	r3, r7
 80060b8:	e7e6      	b.n	8006088 <__ieee754_pow+0x1d0>
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <__ieee754_pow+0x268>)
 80060bc:	4598      	cmp	r8, r3
 80060be:	f340 80fb 	ble.w	80062b8 <__ieee754_pow+0x400>
 80060c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060c6:	4598      	cmp	r8, r3
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <__ieee754_pow+0x260>)
 80060ca:	dd0c      	ble.n	80060e6 <__ieee754_pow+0x22e>
 80060cc:	429c      	cmp	r4, r3
 80060ce:	dc0f      	bgt.n	80060f0 <__ieee754_pow+0x238>
 80060d0:	f1b9 0f00 	cmp.w	r9, #0
 80060d4:	da0f      	bge.n	80060f6 <__ieee754_pow+0x23e>
 80060d6:	2000      	movs	r0, #0
 80060d8:	b009      	add	sp, #36	; 0x24
 80060da:	ecbd 8b06 	vpop	{d8-d10}
 80060de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e2:	f000 bc3a 	b.w	800695a <__math_oflow>
 80060e6:	429c      	cmp	r4, r3
 80060e8:	dbf2      	blt.n	80060d0 <__ieee754_pow+0x218>
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <__ieee754_pow+0x25c>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	dd19      	ble.n	8006124 <__ieee754_pow+0x26c>
 80060f0:	f1b9 0f00 	cmp.w	r9, #0
 80060f4:	dcef      	bgt.n	80060d6 <__ieee754_pow+0x21e>
 80060f6:	2000      	movs	r0, #0
 80060f8:	b009      	add	sp, #36	; 0x24
 80060fa:	ecbd 8b06 	vpop	{d8-d10}
 80060fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006102:	f000 bc21 	b.w	8006948 <__math_uflow>
 8006106:	bf00      	nop
 8006108:	fff00000 	.word	0xfff00000
 800610c:	7ff00000 	.word	0x7ff00000
 8006110:	433fffff 	.word	0x433fffff
 8006114:	3ff00000 	.word	0x3ff00000
 8006118:	3fefffff 	.word	0x3fefffff
 800611c:	3fe00000 	.word	0x3fe00000
 8006120:	41e00000 	.word	0x41e00000
 8006124:	4b60      	ldr	r3, [pc, #384]	; (80062a8 <__ieee754_pow+0x3f0>)
 8006126:	2200      	movs	r2, #0
 8006128:	f7fa f8a6 	bl	8000278 <__aeabi_dsub>
 800612c:	a354      	add	r3, pc, #336	; (adr r3, 8006280 <__ieee754_pow+0x3c8>)
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	4604      	mov	r4, r0
 8006134:	460d      	mov	r5, r1
 8006136:	f7fa fa57 	bl	80005e8 <__aeabi_dmul>
 800613a:	a353      	add	r3, pc, #332	; (adr r3, 8006288 <__ieee754_pow+0x3d0>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	4606      	mov	r6, r0
 8006142:	460f      	mov	r7, r1
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fa4e 	bl	80005e8 <__aeabi_dmul>
 800614c:	4b57      	ldr	r3, [pc, #348]	; (80062ac <__ieee754_pow+0x3f4>)
 800614e:	4682      	mov	sl, r0
 8006150:	468b      	mov	fp, r1
 8006152:	2200      	movs	r2, #0
 8006154:	4620      	mov	r0, r4
 8006156:	4629      	mov	r1, r5
 8006158:	f7fa fa46 	bl	80005e8 <__aeabi_dmul>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	a14b      	add	r1, pc, #300	; (adr r1, 8006290 <__ieee754_pow+0x3d8>)
 8006162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006166:	f7fa f887 	bl	8000278 <__aeabi_dsub>
 800616a:	4622      	mov	r2, r4
 800616c:	462b      	mov	r3, r5
 800616e:	f7fa fa3b 	bl	80005e8 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	2000      	movs	r0, #0
 8006178:	494d      	ldr	r1, [pc, #308]	; (80062b0 <__ieee754_pow+0x3f8>)
 800617a:	f7fa f87d 	bl	8000278 <__aeabi_dsub>
 800617e:	4622      	mov	r2, r4
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	462b      	mov	r3, r5
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fa2d 	bl	80005e8 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa fa27 	bl	80005e8 <__aeabi_dmul>
 800619a:	a33f      	add	r3, pc, #252	; (adr r3, 8006298 <__ieee754_pow+0x3e0>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa fa22 	bl	80005e8 <__aeabi_dmul>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4650      	mov	r0, sl
 80061aa:	4659      	mov	r1, fp
 80061ac:	f7fa f864 	bl	8000278 <__aeabi_dsub>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4680      	mov	r8, r0
 80061b6:	4689      	mov	r9, r1
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa f85e 	bl	800027c <__adddf3>
 80061c0:	2000      	movs	r0, #0
 80061c2:	4632      	mov	r2, r6
 80061c4:	463b      	mov	r3, r7
 80061c6:	4604      	mov	r4, r0
 80061c8:	460d      	mov	r5, r1
 80061ca:	f7fa f855 	bl	8000278 <__aeabi_dsub>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa f84f 	bl	8000278 <__aeabi_dsub>
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	9a06      	ldr	r2, [sp, #24]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	4682      	mov	sl, r0
 80061e4:	468b      	mov	fp, r1
 80061e6:	f040 81e7 	bne.w	80065b8 <__ieee754_pow+0x700>
 80061ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80062a0 <__ieee754_pow+0x3e8>
 80061ee:	eeb0 8a47 	vmov.f32	s16, s14
 80061f2:	eef0 8a67 	vmov.f32	s17, s15
 80061f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061fa:	2600      	movs	r6, #0
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006204:	f7fa f838 	bl	8000278 <__aeabi_dsub>
 8006208:	4622      	mov	r2, r4
 800620a:	462b      	mov	r3, r5
 800620c:	f7fa f9ec 	bl	80005e8 <__aeabi_dmul>
 8006210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	4650      	mov	r0, sl
 800621a:	4659      	mov	r1, fp
 800621c:	f7fa f9e4 	bl	80005e8 <__aeabi_dmul>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa f828 	bl	800027c <__adddf3>
 800622c:	4632      	mov	r2, r6
 800622e:	463b      	mov	r3, r7
 8006230:	4680      	mov	r8, r0
 8006232:	4689      	mov	r9, r1
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa f9d6 	bl	80005e8 <__aeabi_dmul>
 800623c:	460b      	mov	r3, r1
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	4602      	mov	r2, r0
 8006244:	4649      	mov	r1, r9
 8006246:	4640      	mov	r0, r8
 8006248:	f7fa f818 	bl	800027c <__adddf3>
 800624c:	4b19      	ldr	r3, [pc, #100]	; (80062b4 <__ieee754_pow+0x3fc>)
 800624e:	4299      	cmp	r1, r3
 8006250:	ec45 4b19 	vmov	d9, r4, r5
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	468b      	mov	fp, r1
 800625a:	f340 82f0 	ble.w	800683e <__ieee754_pow+0x986>
 800625e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006262:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006266:	4303      	orrs	r3, r0
 8006268:	f000 81e4 	beq.w	8006634 <__ieee754_pow+0x77c>
 800626c:	ec51 0b18 	vmov	r0, r1, d8
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	f7fa fc2a 	bl	8000acc <__aeabi_dcmplt>
 8006278:	3800      	subs	r0, #0
 800627a:	bf18      	it	ne
 800627c:	2001      	movne	r0, #1
 800627e:	e72b      	b.n	80060d8 <__ieee754_pow+0x220>
 8006280:	60000000 	.word	0x60000000
 8006284:	3ff71547 	.word	0x3ff71547
 8006288:	f85ddf44 	.word	0xf85ddf44
 800628c:	3e54ae0b 	.word	0x3e54ae0b
 8006290:	55555555 	.word	0x55555555
 8006294:	3fd55555 	.word	0x3fd55555
 8006298:	652b82fe 	.word	0x652b82fe
 800629c:	3ff71547 	.word	0x3ff71547
 80062a0:	00000000 	.word	0x00000000
 80062a4:	bff00000 	.word	0xbff00000
 80062a8:	3ff00000 	.word	0x3ff00000
 80062ac:	3fd00000 	.word	0x3fd00000
 80062b0:	3fe00000 	.word	0x3fe00000
 80062b4:	408fffff 	.word	0x408fffff
 80062b8:	4bd5      	ldr	r3, [pc, #852]	; (8006610 <__ieee754_pow+0x758>)
 80062ba:	402b      	ands	r3, r5
 80062bc:	2200      	movs	r2, #0
 80062be:	b92b      	cbnz	r3, 80062cc <__ieee754_pow+0x414>
 80062c0:	4bd4      	ldr	r3, [pc, #848]	; (8006614 <__ieee754_pow+0x75c>)
 80062c2:	f7fa f991 	bl	80005e8 <__aeabi_dmul>
 80062c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062ca:	460c      	mov	r4, r1
 80062cc:	1523      	asrs	r3, r4, #20
 80062ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062d2:	4413      	add	r3, r2
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	4bd0      	ldr	r3, [pc, #832]	; (8006618 <__ieee754_pow+0x760>)
 80062d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80062dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80062e0:	429c      	cmp	r4, r3
 80062e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80062e6:	dd08      	ble.n	80062fa <__ieee754_pow+0x442>
 80062e8:	4bcc      	ldr	r3, [pc, #816]	; (800661c <__ieee754_pow+0x764>)
 80062ea:	429c      	cmp	r4, r3
 80062ec:	f340 8162 	ble.w	80065b4 <__ieee754_pow+0x6fc>
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	3301      	adds	r3, #1
 80062f4:	9305      	str	r3, [sp, #20]
 80062f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80062fa:	2400      	movs	r4, #0
 80062fc:	00e3      	lsls	r3, r4, #3
 80062fe:	9307      	str	r3, [sp, #28]
 8006300:	4bc7      	ldr	r3, [pc, #796]	; (8006620 <__ieee754_pow+0x768>)
 8006302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006306:	ed93 7b00 	vldr	d7, [r3]
 800630a:	4629      	mov	r1, r5
 800630c:	ec53 2b17 	vmov	r2, r3, d7
 8006310:	eeb0 9a47 	vmov.f32	s18, s14
 8006314:	eef0 9a67 	vmov.f32	s19, s15
 8006318:	4682      	mov	sl, r0
 800631a:	f7f9 ffad 	bl	8000278 <__aeabi_dsub>
 800631e:	4652      	mov	r2, sl
 8006320:	4606      	mov	r6, r0
 8006322:	460f      	mov	r7, r1
 8006324:	462b      	mov	r3, r5
 8006326:	ec51 0b19 	vmov	r0, r1, d9
 800632a:	f7f9 ffa7 	bl	800027c <__adddf3>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	2000      	movs	r0, #0
 8006334:	49bb      	ldr	r1, [pc, #748]	; (8006624 <__ieee754_pow+0x76c>)
 8006336:	f7fa fa81 	bl	800083c <__aeabi_ddiv>
 800633a:	ec41 0b1a 	vmov	d10, r0, r1
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	f7fa f94f 	bl	80005e8 <__aeabi_dmul>
 800634a:	2300      	movs	r3, #0
 800634c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006350:	9302      	str	r3, [sp, #8]
 8006352:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006356:	46ab      	mov	fp, r5
 8006358:	106d      	asrs	r5, r5, #1
 800635a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800635e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006362:	ec41 0b18 	vmov	d8, r0, r1
 8006366:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800636a:	2200      	movs	r2, #0
 800636c:	4640      	mov	r0, r8
 800636e:	4649      	mov	r1, r9
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	f7fa f938 	bl	80005e8 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7f9 ff7a 	bl	8000278 <__aeabi_dsub>
 8006384:	ec53 2b19 	vmov	r2, r3, d9
 8006388:	4606      	mov	r6, r0
 800638a:	460f      	mov	r7, r1
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 ff72 	bl	8000278 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4650      	mov	r0, sl
 800639a:	4659      	mov	r1, fp
 800639c:	f7f9 ff6c 	bl	8000278 <__aeabi_dsub>
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	f7fa f920 	bl	80005e8 <__aeabi_dmul>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4630      	mov	r0, r6
 80063ae:	4639      	mov	r1, r7
 80063b0:	f7f9 ff62 	bl	8000278 <__aeabi_dsub>
 80063b4:	ec53 2b1a 	vmov	r2, r3, d10
 80063b8:	f7fa f916 	bl	80005e8 <__aeabi_dmul>
 80063bc:	ec53 2b18 	vmov	r2, r3, d8
 80063c0:	ec41 0b19 	vmov	d9, r0, r1
 80063c4:	ec51 0b18 	vmov	r0, r1, d8
 80063c8:	f7fa f90e 	bl	80005e8 <__aeabi_dmul>
 80063cc:	a37c      	add	r3, pc, #496	; (adr r3, 80065c0 <__ieee754_pow+0x708>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	4604      	mov	r4, r0
 80063d4:	460d      	mov	r5, r1
 80063d6:	f7fa f907 	bl	80005e8 <__aeabi_dmul>
 80063da:	a37b      	add	r3, pc, #492	; (adr r3, 80065c8 <__ieee754_pow+0x710>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7f9 ff4c 	bl	800027c <__adddf3>
 80063e4:	4622      	mov	r2, r4
 80063e6:	462b      	mov	r3, r5
 80063e8:	f7fa f8fe 	bl	80005e8 <__aeabi_dmul>
 80063ec:	a378      	add	r3, pc, #480	; (adr r3, 80065d0 <__ieee754_pow+0x718>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 ff43 	bl	800027c <__adddf3>
 80063f6:	4622      	mov	r2, r4
 80063f8:	462b      	mov	r3, r5
 80063fa:	f7fa f8f5 	bl	80005e8 <__aeabi_dmul>
 80063fe:	a376      	add	r3, pc, #472	; (adr r3, 80065d8 <__ieee754_pow+0x720>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7f9 ff3a 	bl	800027c <__adddf3>
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	f7fa f8ec 	bl	80005e8 <__aeabi_dmul>
 8006410:	a373      	add	r3, pc, #460	; (adr r3, 80065e0 <__ieee754_pow+0x728>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 ff31 	bl	800027c <__adddf3>
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f7fa f8e3 	bl	80005e8 <__aeabi_dmul>
 8006422:	a371      	add	r3, pc, #452	; (adr r3, 80065e8 <__ieee754_pow+0x730>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7f9 ff28 	bl	800027c <__adddf3>
 800642c:	4622      	mov	r2, r4
 800642e:	4606      	mov	r6, r0
 8006430:	460f      	mov	r7, r1
 8006432:	462b      	mov	r3, r5
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa f8d6 	bl	80005e8 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7fa f8d0 	bl	80005e8 <__aeabi_dmul>
 8006448:	4642      	mov	r2, r8
 800644a:	4604      	mov	r4, r0
 800644c:	460d      	mov	r5, r1
 800644e:	464b      	mov	r3, r9
 8006450:	ec51 0b18 	vmov	r0, r1, d8
 8006454:	f7f9 ff12 	bl	800027c <__adddf3>
 8006458:	ec53 2b19 	vmov	r2, r3, d9
 800645c:	f7fa f8c4 	bl	80005e8 <__aeabi_dmul>
 8006460:	4622      	mov	r2, r4
 8006462:	462b      	mov	r3, r5
 8006464:	f7f9 ff0a 	bl	800027c <__adddf3>
 8006468:	4642      	mov	r2, r8
 800646a:	4682      	mov	sl, r0
 800646c:	468b      	mov	fp, r1
 800646e:	464b      	mov	r3, r9
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa f8b8 	bl	80005e8 <__aeabi_dmul>
 8006478:	4b6b      	ldr	r3, [pc, #428]	; (8006628 <__ieee754_pow+0x770>)
 800647a:	2200      	movs	r2, #0
 800647c:	4606      	mov	r6, r0
 800647e:	460f      	mov	r7, r1
 8006480:	f7f9 fefc 	bl	800027c <__adddf3>
 8006484:	4652      	mov	r2, sl
 8006486:	465b      	mov	r3, fp
 8006488:	f7f9 fef8 	bl	800027c <__adddf3>
 800648c:	2000      	movs	r0, #0
 800648e:	4604      	mov	r4, r0
 8006490:	460d      	mov	r5, r1
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa f8a5 	bl	80005e8 <__aeabi_dmul>
 800649e:	4b62      	ldr	r3, [pc, #392]	; (8006628 <__ieee754_pow+0x770>)
 80064a0:	4680      	mov	r8, r0
 80064a2:	4689      	mov	r9, r1
 80064a4:	2200      	movs	r2, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7f9 fee5 	bl	8000278 <__aeabi_dsub>
 80064ae:	4632      	mov	r2, r6
 80064b0:	463b      	mov	r3, r7
 80064b2:	f7f9 fee1 	bl	8000278 <__aeabi_dsub>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4650      	mov	r0, sl
 80064bc:	4659      	mov	r1, fp
 80064be:	f7f9 fedb 	bl	8000278 <__aeabi_dsub>
 80064c2:	ec53 2b18 	vmov	r2, r3, d8
 80064c6:	f7fa f88f 	bl	80005e8 <__aeabi_dmul>
 80064ca:	4622      	mov	r2, r4
 80064cc:	4606      	mov	r6, r0
 80064ce:	460f      	mov	r7, r1
 80064d0:	462b      	mov	r3, r5
 80064d2:	ec51 0b19 	vmov	r0, r1, d9
 80064d6:	f7fa f887 	bl	80005e8 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fecb 	bl	800027c <__adddf3>
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7f9 fec3 	bl	800027c <__adddf3>
 80064f6:	a33e      	add	r3, pc, #248	; (adr r3, 80065f0 <__ieee754_pow+0x738>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	2000      	movs	r0, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	460d      	mov	r5, r1
 8006502:	f7fa f871 	bl	80005e8 <__aeabi_dmul>
 8006506:	4642      	mov	r2, r8
 8006508:	ec41 0b18 	vmov	d8, r0, r1
 800650c:	464b      	mov	r3, r9
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7f9 feb1 	bl	8000278 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7f9 feab 	bl	8000278 <__aeabi_dsub>
 8006522:	a335      	add	r3, pc, #212	; (adr r3, 80065f8 <__ieee754_pow+0x740>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f7fa f85e 	bl	80005e8 <__aeabi_dmul>
 800652c:	a334      	add	r3, pc, #208	; (adr r3, 8006600 <__ieee754_pow+0x748>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	4606      	mov	r6, r0
 8006534:	460f      	mov	r7, r1
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa f855 	bl	80005e8 <__aeabi_dmul>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7f9 fe99 	bl	800027c <__adddf3>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	4b37      	ldr	r3, [pc, #220]	; (800662c <__ieee754_pow+0x774>)
 800654e:	4413      	add	r3, r2
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe92 	bl	800027c <__adddf3>
 8006558:	4682      	mov	sl, r0
 800655a:	9805      	ldr	r0, [sp, #20]
 800655c:	468b      	mov	fp, r1
 800655e:	f7f9 ffd9 	bl	8000514 <__aeabi_i2d>
 8006562:	9a07      	ldr	r2, [sp, #28]
 8006564:	4b32      	ldr	r3, [pc, #200]	; (8006630 <__ieee754_pow+0x778>)
 8006566:	4413      	add	r3, r2
 8006568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	4652      	mov	r2, sl
 8006572:	465b      	mov	r3, fp
 8006574:	ec51 0b18 	vmov	r0, r1, d8
 8006578:	f7f9 fe80 	bl	800027c <__adddf3>
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	f7f9 fe7c 	bl	800027c <__adddf3>
 8006584:	4632      	mov	r2, r6
 8006586:	463b      	mov	r3, r7
 8006588:	f7f9 fe78 	bl	800027c <__adddf3>
 800658c:	2000      	movs	r0, #0
 800658e:	4632      	mov	r2, r6
 8006590:	463b      	mov	r3, r7
 8006592:	4604      	mov	r4, r0
 8006594:	460d      	mov	r5, r1
 8006596:	f7f9 fe6f 	bl	8000278 <__aeabi_dsub>
 800659a:	4642      	mov	r2, r8
 800659c:	464b      	mov	r3, r9
 800659e:	f7f9 fe6b 	bl	8000278 <__aeabi_dsub>
 80065a2:	ec53 2b18 	vmov	r2, r3, d8
 80065a6:	f7f9 fe67 	bl	8000278 <__aeabi_dsub>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4650      	mov	r0, sl
 80065b0:	4659      	mov	r1, fp
 80065b2:	e610      	b.n	80061d6 <__ieee754_pow+0x31e>
 80065b4:	2401      	movs	r4, #1
 80065b6:	e6a1      	b.n	80062fc <__ieee754_pow+0x444>
 80065b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006608 <__ieee754_pow+0x750>
 80065bc:	e617      	b.n	80061ee <__ieee754_pow+0x336>
 80065be:	bf00      	nop
 80065c0:	4a454eef 	.word	0x4a454eef
 80065c4:	3fca7e28 	.word	0x3fca7e28
 80065c8:	93c9db65 	.word	0x93c9db65
 80065cc:	3fcd864a 	.word	0x3fcd864a
 80065d0:	a91d4101 	.word	0xa91d4101
 80065d4:	3fd17460 	.word	0x3fd17460
 80065d8:	518f264d 	.word	0x518f264d
 80065dc:	3fd55555 	.word	0x3fd55555
 80065e0:	db6fabff 	.word	0xdb6fabff
 80065e4:	3fdb6db6 	.word	0x3fdb6db6
 80065e8:	33333303 	.word	0x33333303
 80065ec:	3fe33333 	.word	0x3fe33333
 80065f0:	e0000000 	.word	0xe0000000
 80065f4:	3feec709 	.word	0x3feec709
 80065f8:	dc3a03fd 	.word	0xdc3a03fd
 80065fc:	3feec709 	.word	0x3feec709
 8006600:	145b01f5 	.word	0x145b01f5
 8006604:	be3e2fe0 	.word	0xbe3e2fe0
 8006608:	00000000 	.word	0x00000000
 800660c:	3ff00000 	.word	0x3ff00000
 8006610:	7ff00000 	.word	0x7ff00000
 8006614:	43400000 	.word	0x43400000
 8006618:	0003988e 	.word	0x0003988e
 800661c:	000bb679 	.word	0x000bb679
 8006620:	08007458 	.word	0x08007458
 8006624:	3ff00000 	.word	0x3ff00000
 8006628:	40080000 	.word	0x40080000
 800662c:	08007478 	.word	0x08007478
 8006630:	08007468 	.word	0x08007468
 8006634:	a3b3      	add	r3, pc, #716	; (adr r3, 8006904 <__ieee754_pow+0xa4c>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7f9 fe1d 	bl	800027c <__adddf3>
 8006642:	4622      	mov	r2, r4
 8006644:	ec41 0b1a 	vmov	d10, r0, r1
 8006648:	462b      	mov	r3, r5
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7f9 fe13 	bl	8000278 <__aeabi_dsub>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	ec51 0b1a 	vmov	r0, r1, d10
 800665a:	f7fa fa55 	bl	8000b08 <__aeabi_dcmpgt>
 800665e:	2800      	cmp	r0, #0
 8006660:	f47f ae04 	bne.w	800626c <__ieee754_pow+0x3b4>
 8006664:	4aa2      	ldr	r2, [pc, #648]	; (80068f0 <__ieee754_pow+0xa38>)
 8006666:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800666a:	4293      	cmp	r3, r2
 800666c:	f340 8107 	ble.w	800687e <__ieee754_pow+0x9c6>
 8006670:	151b      	asrs	r3, r3, #20
 8006672:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006676:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800667a:	fa4a fa03 	asr.w	sl, sl, r3
 800667e:	44da      	add	sl, fp
 8006680:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006684:	489b      	ldr	r0, [pc, #620]	; (80068f4 <__ieee754_pow+0xa3c>)
 8006686:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800668a:	4108      	asrs	r0, r1
 800668c:	ea00 030a 	and.w	r3, r0, sl
 8006690:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006694:	f1c1 0114 	rsb	r1, r1, #20
 8006698:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800669c:	fa4a fa01 	asr.w	sl, sl, r1
 80066a0:	f1bb 0f00 	cmp.w	fp, #0
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	bfb8      	it	lt
 80066ae:	f1ca 0a00 	rsblt	sl, sl, #0
 80066b2:	f7f9 fde1 	bl	8000278 <__aeabi_dsub>
 80066b6:	ec41 0b19 	vmov	d9, r0, r1
 80066ba:	4642      	mov	r2, r8
 80066bc:	464b      	mov	r3, r9
 80066be:	ec51 0b19 	vmov	r0, r1, d9
 80066c2:	f7f9 fddb 	bl	800027c <__adddf3>
 80066c6:	a37a      	add	r3, pc, #488	; (adr r3, 80068b0 <__ieee754_pow+0x9f8>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	2000      	movs	r0, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	f7f9 ff89 	bl	80005e8 <__aeabi_dmul>
 80066d6:	ec53 2b19 	vmov	r2, r3, d9
 80066da:	4606      	mov	r6, r0
 80066dc:	460f      	mov	r7, r1
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7f9 fdc9 	bl	8000278 <__aeabi_dsub>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7f9 fdc3 	bl	8000278 <__aeabi_dsub>
 80066f2:	a371      	add	r3, pc, #452	; (adr r3, 80068b8 <__ieee754_pow+0xa00>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 ff76 	bl	80005e8 <__aeabi_dmul>
 80066fc:	a370      	add	r3, pc, #448	; (adr r3, 80068c0 <__ieee754_pow+0xa08>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	4620      	mov	r0, r4
 8006708:	4629      	mov	r1, r5
 800670a:	f7f9 ff6d 	bl	80005e8 <__aeabi_dmul>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdb1 	bl	800027c <__adddf3>
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4630      	mov	r0, r6
 8006724:	4639      	mov	r1, r7
 8006726:	f7f9 fda9 	bl	800027c <__adddf3>
 800672a:	4632      	mov	r2, r6
 800672c:	463b      	mov	r3, r7
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	f7f9 fda1 	bl	8000278 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4620      	mov	r0, r4
 800673c:	4629      	mov	r1, r5
 800673e:	f7f9 fd9b 	bl	8000278 <__aeabi_dsub>
 8006742:	4642      	mov	r2, r8
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	464b      	mov	r3, r9
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7f9 ff4b 	bl	80005e8 <__aeabi_dmul>
 8006752:	a35d      	add	r3, pc, #372	; (adr r3, 80068c8 <__ieee754_pow+0xa10>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	4604      	mov	r4, r0
 800675a:	460d      	mov	r5, r1
 800675c:	f7f9 ff44 	bl	80005e8 <__aeabi_dmul>
 8006760:	a35b      	add	r3, pc, #364	; (adr r3, 80068d0 <__ieee754_pow+0xa18>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd87 	bl	8000278 <__aeabi_dsub>
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 ff3b 	bl	80005e8 <__aeabi_dmul>
 8006772:	a359      	add	r3, pc, #356	; (adr r3, 80068d8 <__ieee754_pow+0xa20>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd80 	bl	800027c <__adddf3>
 800677c:	4622      	mov	r2, r4
 800677e:	462b      	mov	r3, r5
 8006780:	f7f9 ff32 	bl	80005e8 <__aeabi_dmul>
 8006784:	a356      	add	r3, pc, #344	; (adr r3, 80068e0 <__ieee754_pow+0xa28>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fd75 	bl	8000278 <__aeabi_dsub>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7f9 ff29 	bl	80005e8 <__aeabi_dmul>
 8006796:	a354      	add	r3, pc, #336	; (adr r3, 80068e8 <__ieee754_pow+0xa30>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fd6e 	bl	800027c <__adddf3>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 ff20 	bl	80005e8 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4640      	mov	r0, r8
 80067ae:	4649      	mov	r1, r9
 80067b0:	f7f9 fd62 	bl	8000278 <__aeabi_dsub>
 80067b4:	4604      	mov	r4, r0
 80067b6:	460d      	mov	r5, r1
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4640      	mov	r0, r8
 80067be:	4649      	mov	r1, r9
 80067c0:	f7f9 ff12 	bl	80005e8 <__aeabi_dmul>
 80067c4:	2200      	movs	r2, #0
 80067c6:	ec41 0b19 	vmov	d9, r0, r1
 80067ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd51 	bl	8000278 <__aeabi_dsub>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	ec51 0b19 	vmov	r0, r1, d9
 80067de:	f7fa f82d 	bl	800083c <__aeabi_ddiv>
 80067e2:	4632      	mov	r2, r6
 80067e4:	4604      	mov	r4, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	463b      	mov	r3, r7
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	f7f9 fefb 	bl	80005e8 <__aeabi_dmul>
 80067f2:	4632      	mov	r2, r6
 80067f4:	463b      	mov	r3, r7
 80067f6:	f7f9 fd41 	bl	800027c <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7f9 fd39 	bl	8000278 <__aeabi_dsub>
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	f7f9 fd35 	bl	8000278 <__aeabi_dsub>
 800680e:	460b      	mov	r3, r1
 8006810:	4602      	mov	r2, r0
 8006812:	4939      	ldr	r1, [pc, #228]	; (80068f8 <__ieee754_pow+0xa40>)
 8006814:	2000      	movs	r0, #0
 8006816:	f7f9 fd2f 	bl	8000278 <__aeabi_dsub>
 800681a:	ec41 0b10 	vmov	d0, r0, r1
 800681e:	ee10 3a90 	vmov	r3, s1
 8006822:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682a:	da2b      	bge.n	8006884 <__ieee754_pow+0x9cc>
 800682c:	4650      	mov	r0, sl
 800682e:	f000 f8a7 	bl	8006980 <scalbn>
 8006832:	ec51 0b10 	vmov	r0, r1, d0
 8006836:	ec53 2b18 	vmov	r2, r3, d8
 800683a:	f7ff bbee 	b.w	800601a <__ieee754_pow+0x162>
 800683e:	4b2f      	ldr	r3, [pc, #188]	; (80068fc <__ieee754_pow+0xa44>)
 8006840:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006844:	429e      	cmp	r6, r3
 8006846:	f77f af0d 	ble.w	8006664 <__ieee754_pow+0x7ac>
 800684a:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <__ieee754_pow+0xa48>)
 800684c:	440b      	add	r3, r1
 800684e:	4303      	orrs	r3, r0
 8006850:	d009      	beq.n	8006866 <__ieee754_pow+0x9ae>
 8006852:	ec51 0b18 	vmov	r0, r1, d8
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	f7fa f937 	bl	8000acc <__aeabi_dcmplt>
 800685e:	3800      	subs	r0, #0
 8006860:	bf18      	it	ne
 8006862:	2001      	movne	r0, #1
 8006864:	e448      	b.n	80060f8 <__ieee754_pow+0x240>
 8006866:	4622      	mov	r2, r4
 8006868:	462b      	mov	r3, r5
 800686a:	f7f9 fd05 	bl	8000278 <__aeabi_dsub>
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	f7fa f93f 	bl	8000af4 <__aeabi_dcmpge>
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f aef4 	beq.w	8006664 <__ieee754_pow+0x7ac>
 800687c:	e7e9      	b.n	8006852 <__ieee754_pow+0x99a>
 800687e:	f04f 0a00 	mov.w	sl, #0
 8006882:	e71a      	b.n	80066ba <__ieee754_pow+0x802>
 8006884:	ec51 0b10 	vmov	r0, r1, d0
 8006888:	4619      	mov	r1, r3
 800688a:	e7d4      	b.n	8006836 <__ieee754_pow+0x97e>
 800688c:	491a      	ldr	r1, [pc, #104]	; (80068f8 <__ieee754_pow+0xa40>)
 800688e:	2000      	movs	r0, #0
 8006890:	f7ff bb31 	b.w	8005ef6 <__ieee754_pow+0x3e>
 8006894:	2000      	movs	r0, #0
 8006896:	2100      	movs	r1, #0
 8006898:	f7ff bb2d 	b.w	8005ef6 <__ieee754_pow+0x3e>
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7ff bb29 	b.w	8005ef6 <__ieee754_pow+0x3e>
 80068a4:	9204      	str	r2, [sp, #16]
 80068a6:	f7ff bb7b 	b.w	8005fa0 <__ieee754_pow+0xe8>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f7ff bb65 	b.w	8005f7a <__ieee754_pow+0xc2>
 80068b0:	00000000 	.word	0x00000000
 80068b4:	3fe62e43 	.word	0x3fe62e43
 80068b8:	fefa39ef 	.word	0xfefa39ef
 80068bc:	3fe62e42 	.word	0x3fe62e42
 80068c0:	0ca86c39 	.word	0x0ca86c39
 80068c4:	be205c61 	.word	0xbe205c61
 80068c8:	72bea4d0 	.word	0x72bea4d0
 80068cc:	3e663769 	.word	0x3e663769
 80068d0:	c5d26bf1 	.word	0xc5d26bf1
 80068d4:	3ebbbd41 	.word	0x3ebbbd41
 80068d8:	af25de2c 	.word	0xaf25de2c
 80068dc:	3f11566a 	.word	0x3f11566a
 80068e0:	16bebd93 	.word	0x16bebd93
 80068e4:	3f66c16c 	.word	0x3f66c16c
 80068e8:	5555553e 	.word	0x5555553e
 80068ec:	3fc55555 	.word	0x3fc55555
 80068f0:	3fe00000 	.word	0x3fe00000
 80068f4:	fff00000 	.word	0xfff00000
 80068f8:	3ff00000 	.word	0x3ff00000
 80068fc:	4090cbff 	.word	0x4090cbff
 8006900:	3f6f3400 	.word	0x3f6f3400
 8006904:	652b82fe 	.word	0x652b82fe
 8006908:	3c971547 	.word	0x3c971547

0800690c <with_errno>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	4616      	mov	r6, r2
 8006914:	f7fe fdd8 	bl	80054c8 <__errno>
 8006918:	4629      	mov	r1, r5
 800691a:	6006      	str	r6, [r0, #0]
 800691c:	4620      	mov	r0, r4
 800691e:	bd70      	pop	{r4, r5, r6, pc}

08006920 <xflow>:
 8006920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006922:	4614      	mov	r4, r2
 8006924:	461d      	mov	r5, r3
 8006926:	b108      	cbz	r0, 800692c <xflow+0xc>
 8006928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800692c:	e9cd 2300 	strd	r2, r3, [sp]
 8006930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7f9 fe56 	bl	80005e8 <__aeabi_dmul>
 800693c:	2222      	movs	r2, #34	; 0x22
 800693e:	b003      	add	sp, #12
 8006940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006944:	f7ff bfe2 	b.w	800690c <with_errno>

08006948 <__math_uflow>:
 8006948:	b508      	push	{r3, lr}
 800694a:	2200      	movs	r2, #0
 800694c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006950:	f7ff ffe6 	bl	8006920 <xflow>
 8006954:	ec41 0b10 	vmov	d0, r0, r1
 8006958:	bd08      	pop	{r3, pc}

0800695a <__math_oflow>:
 800695a:	b508      	push	{r3, lr}
 800695c:	2200      	movs	r2, #0
 800695e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006962:	f7ff ffdd 	bl	8006920 <xflow>
 8006966:	ec41 0b10 	vmov	d0, r0, r1
 800696a:	bd08      	pop	{r3, pc}

0800696c <fabs>:
 800696c:	ec51 0b10 	vmov	r0, r1, d0
 8006970:	ee10 2a10 	vmov	r2, s0
 8006974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006978:	ec43 2b10 	vmov	d0, r2, r3
 800697c:	4770      	bx	lr
	...

08006980 <scalbn>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	ec55 4b10 	vmov	r4, r5, d0
 8006986:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800698a:	4606      	mov	r6, r0
 800698c:	462b      	mov	r3, r5
 800698e:	b999      	cbnz	r1, 80069b8 <scalbn+0x38>
 8006990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006994:	4323      	orrs	r3, r4
 8006996:	d03f      	beq.n	8006a18 <scalbn+0x98>
 8006998:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <scalbn+0xf0>)
 800699a:	4629      	mov	r1, r5
 800699c:	ee10 0a10 	vmov	r0, s0
 80069a0:	2200      	movs	r2, #0
 80069a2:	f7f9 fe21 	bl	80005e8 <__aeabi_dmul>
 80069a6:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <scalbn+0xf4>)
 80069a8:	429e      	cmp	r6, r3
 80069aa:	4604      	mov	r4, r0
 80069ac:	460d      	mov	r5, r1
 80069ae:	da10      	bge.n	80069d2 <scalbn+0x52>
 80069b0:	a327      	add	r3, pc, #156	; (adr r3, 8006a50 <scalbn+0xd0>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	e01f      	b.n	80069f8 <scalbn+0x78>
 80069b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80069bc:	4291      	cmp	r1, r2
 80069be:	d10c      	bne.n	80069da <scalbn+0x5a>
 80069c0:	ee10 2a10 	vmov	r2, s0
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	f7f9 fc58 	bl	800027c <__adddf3>
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	e022      	b.n	8006a18 <scalbn+0x98>
 80069d2:	460b      	mov	r3, r1
 80069d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069d8:	3936      	subs	r1, #54	; 0x36
 80069da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80069de:	4296      	cmp	r6, r2
 80069e0:	dd0d      	ble.n	80069fe <scalbn+0x7e>
 80069e2:	2d00      	cmp	r5, #0
 80069e4:	a11c      	add	r1, pc, #112	; (adr r1, 8006a58 <scalbn+0xd8>)
 80069e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ea:	da02      	bge.n	80069f2 <scalbn+0x72>
 80069ec:	a11c      	add	r1, pc, #112	; (adr r1, 8006a60 <scalbn+0xe0>)
 80069ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f2:	a319      	add	r3, pc, #100	; (adr r3, 8006a58 <scalbn+0xd8>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fdf6 	bl	80005e8 <__aeabi_dmul>
 80069fc:	e7e6      	b.n	80069cc <scalbn+0x4c>
 80069fe:	1872      	adds	r2, r6, r1
 8006a00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a04:	428a      	cmp	r2, r1
 8006a06:	dcec      	bgt.n	80069e2 <scalbn+0x62>
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	dd08      	ble.n	8006a1e <scalbn+0x9e>
 8006a0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a18:	ec45 4b10 	vmov	d0, r4, r5
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a22:	da08      	bge.n	8006a36 <scalbn+0xb6>
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	a10a      	add	r1, pc, #40	; (adr r1, 8006a50 <scalbn+0xd0>)
 8006a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a2c:	dac0      	bge.n	80069b0 <scalbn+0x30>
 8006a2e:	a10e      	add	r1, pc, #56	; (adr r1, 8006a68 <scalbn+0xe8>)
 8006a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a34:	e7bc      	b.n	80069b0 <scalbn+0x30>
 8006a36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a3a:	3236      	adds	r2, #54	; 0x36
 8006a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006a44:	4620      	mov	r0, r4
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <scalbn+0xf8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	e7d5      	b.n	80069f8 <scalbn+0x78>
 8006a4c:	f3af 8000 	nop.w
 8006a50:	c2f8f359 	.word	0xc2f8f359
 8006a54:	01a56e1f 	.word	0x01a56e1f
 8006a58:	8800759c 	.word	0x8800759c
 8006a5c:	7e37e43c 	.word	0x7e37e43c
 8006a60:	8800759c 	.word	0x8800759c
 8006a64:	fe37e43c 	.word	0xfe37e43c
 8006a68:	c2f8f359 	.word	0xc2f8f359
 8006a6c:	81a56e1f 	.word	0x81a56e1f
 8006a70:	43500000 	.word	0x43500000
 8006a74:	ffff3cb0 	.word	0xffff3cb0
 8006a78:	3c900000 	.word	0x3c900000

08006a7c <__ieee754_sqrt>:
 8006a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	ec55 4b10 	vmov	r4, r5, d0
 8006a84:	4e67      	ldr	r6, [pc, #412]	; (8006c24 <__ieee754_sqrt+0x1a8>)
 8006a86:	43ae      	bics	r6, r5
 8006a88:	ee10 0a10 	vmov	r0, s0
 8006a8c:	ee10 2a10 	vmov	r2, s0
 8006a90:	4629      	mov	r1, r5
 8006a92:	462b      	mov	r3, r5
 8006a94:	d10d      	bne.n	8006ab2 <__ieee754_sqrt+0x36>
 8006a96:	f7f9 fda7 	bl	80005e8 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fbeb 	bl	800027c <__adddf3>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	ec45 4b10 	vmov	d0, r4, r5
 8006aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	dc0b      	bgt.n	8006ace <__ieee754_sqrt+0x52>
 8006ab6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006aba:	4326      	orrs	r6, r4
 8006abc:	d0f5      	beq.n	8006aaa <__ieee754_sqrt+0x2e>
 8006abe:	b135      	cbz	r5, 8006ace <__ieee754_sqrt+0x52>
 8006ac0:	f7f9 fbda 	bl	8000278 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	f7f9 feb8 	bl	800083c <__aeabi_ddiv>
 8006acc:	e7eb      	b.n	8006aa6 <__ieee754_sqrt+0x2a>
 8006ace:	1509      	asrs	r1, r1, #20
 8006ad0:	f000 808d 	beq.w	8006bee <__ieee754_sqrt+0x172>
 8006ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ae0:	07c9      	lsls	r1, r1, #31
 8006ae2:	bf5c      	itt	pl
 8006ae4:	005b      	lslpl	r3, r3, #1
 8006ae6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006aea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006aee:	bf58      	it	pl
 8006af0:	0052      	lslpl	r2, r2, #1
 8006af2:	2500      	movs	r5, #0
 8006af4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006af8:	1076      	asrs	r6, r6, #1
 8006afa:	0052      	lsls	r2, r2, #1
 8006afc:	f04f 0e16 	mov.w	lr, #22
 8006b00:	46ac      	mov	ip, r5
 8006b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b06:	eb0c 0001 	add.w	r0, ip, r1
 8006b0a:	4298      	cmp	r0, r3
 8006b0c:	bfde      	ittt	le
 8006b0e:	1a1b      	suble	r3, r3, r0
 8006b10:	eb00 0c01 	addle.w	ip, r0, r1
 8006b14:	186d      	addle	r5, r5, r1
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	f1be 0e01 	subs.w	lr, lr, #1
 8006b1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006b20:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006b28:	d1ed      	bne.n	8006b06 <__ieee754_sqrt+0x8a>
 8006b2a:	4674      	mov	r4, lr
 8006b2c:	2720      	movs	r7, #32
 8006b2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006b32:	4563      	cmp	r3, ip
 8006b34:	eb01 000e 	add.w	r0, r1, lr
 8006b38:	dc02      	bgt.n	8006b40 <__ieee754_sqrt+0xc4>
 8006b3a:	d113      	bne.n	8006b64 <__ieee754_sqrt+0xe8>
 8006b3c:	4290      	cmp	r0, r2
 8006b3e:	d811      	bhi.n	8006b64 <__ieee754_sqrt+0xe8>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	eb00 0e01 	add.w	lr, r0, r1
 8006b46:	da57      	bge.n	8006bf8 <__ieee754_sqrt+0x17c>
 8006b48:	f1be 0f00 	cmp.w	lr, #0
 8006b4c:	db54      	blt.n	8006bf8 <__ieee754_sqrt+0x17c>
 8006b4e:	f10c 0801 	add.w	r8, ip, #1
 8006b52:	eba3 030c 	sub.w	r3, r3, ip
 8006b56:	4290      	cmp	r0, r2
 8006b58:	bf88      	it	hi
 8006b5a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8006b5e:	1a12      	subs	r2, r2, r0
 8006b60:	440c      	add	r4, r1
 8006b62:	46c4      	mov	ip, r8
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	3f01      	subs	r7, #1
 8006b68:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006b6c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006b74:	d1dd      	bne.n	8006b32 <__ieee754_sqrt+0xb6>
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d01b      	beq.n	8006bb2 <__ieee754_sqrt+0x136>
 8006b7a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006c28 <__ieee754_sqrt+0x1ac>
 8006b7e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006c2c <__ieee754_sqrt+0x1b0>
 8006b82:	e9da 0100 	ldrd	r0, r1, [sl]
 8006b86:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b8a:	f7f9 fb75 	bl	8000278 <__aeabi_dsub>
 8006b8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 ffa1 	bl	8000ae0 <__aeabi_dcmple>
 8006b9e:	b140      	cbz	r0, 8006bb2 <__ieee754_sqrt+0x136>
 8006ba0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006ba4:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ba8:	e9db 2300 	ldrd	r2, r3, [fp]
 8006bac:	d126      	bne.n	8006bfc <__ieee754_sqrt+0x180>
 8006bae:	3501      	adds	r5, #1
 8006bb0:	463c      	mov	r4, r7
 8006bb2:	106a      	asrs	r2, r5, #1
 8006bb4:	0863      	lsrs	r3, r4, #1
 8006bb6:	07e9      	lsls	r1, r5, #31
 8006bb8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006bbc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006bc0:	bf48      	it	mi
 8006bc2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006bc6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006bca:	461c      	mov	r4, r3
 8006bcc:	e76d      	b.n	8006aaa <__ieee754_sqrt+0x2e>
 8006bce:	0ad3      	lsrs	r3, r2, #11
 8006bd0:	3815      	subs	r0, #21
 8006bd2:	0552      	lsls	r2, r2, #21
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0fa      	beq.n	8006bce <__ieee754_sqrt+0x152>
 8006bd8:	02dc      	lsls	r4, r3, #11
 8006bda:	d50a      	bpl.n	8006bf2 <__ieee754_sqrt+0x176>
 8006bdc:	f1c1 0420 	rsb	r4, r1, #32
 8006be0:	fa22 f404 	lsr.w	r4, r2, r4
 8006be4:	1e4d      	subs	r5, r1, #1
 8006be6:	408a      	lsls	r2, r1
 8006be8:	4323      	orrs	r3, r4
 8006bea:	1b41      	subs	r1, r0, r5
 8006bec:	e772      	b.n	8006ad4 <__ieee754_sqrt+0x58>
 8006bee:	4608      	mov	r0, r1
 8006bf0:	e7f0      	b.n	8006bd4 <__ieee754_sqrt+0x158>
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	3101      	adds	r1, #1
 8006bf6:	e7ef      	b.n	8006bd8 <__ieee754_sqrt+0x15c>
 8006bf8:	46e0      	mov	r8, ip
 8006bfa:	e7aa      	b.n	8006b52 <__ieee754_sqrt+0xd6>
 8006bfc:	f7f9 fb3e 	bl	800027c <__adddf3>
 8006c00:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 ff5e 	bl	8000acc <__aeabi_dcmplt>
 8006c10:	b120      	cbz	r0, 8006c1c <__ieee754_sqrt+0x1a0>
 8006c12:	1ca0      	adds	r0, r4, #2
 8006c14:	bf08      	it	eq
 8006c16:	3501      	addeq	r5, #1
 8006c18:	3402      	adds	r4, #2
 8006c1a:	e7ca      	b.n	8006bb2 <__ieee754_sqrt+0x136>
 8006c1c:	3401      	adds	r4, #1
 8006c1e:	f024 0401 	bic.w	r4, r4, #1
 8006c22:	e7c6      	b.n	8006bb2 <__ieee754_sqrt+0x136>
 8006c24:	7ff00000 	.word	0x7ff00000
 8006c28:	20000068 	.word	0x20000068
 8006c2c:	20000070 	.word	0x20000070

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
