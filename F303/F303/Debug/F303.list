
F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000636c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800652c  0800652c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800652c  0800652c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800652c  0800652c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000214  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014204  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000272e  00000000  00000000  0003428f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e43  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b620  00000000  00000000  00038a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016862  00000000  00000000  0005402b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a44df  00000000  00000000  0006a88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d18  00000000  00000000  0010ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00113a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064dc 	.word	0x080064dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080064dc 	.word	0x080064dc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fe65 	bl	8000e9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f82d 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f983 	bl	80004e0 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001da:	f000 f8fb 	bl	80003d4 <MX_TIM16_Init>
  MX_I2C1_Init();
 80001de:	f000 f879 	bl	80002d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e2:	f000 f8b7 	bl	8000354 <MX_SPI1_Init>
  MX_TIM17_Init();
 80001e6:	f000 f91f 	bl	8000428 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80001ea:	f000 f943 	bl	8000474 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setModeLed();
 80001ee:	f000 fa1f 	bl	8000630 <setModeLed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  int delayTime = (6 - userMode) * 100;
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0x60>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	f1c3 0306 	rsb	r3, r3, #6
 80001fa:	2264      	movs	r2, #100	; 0x64
 80001fc:	fb02 f303 	mul.w	r3, r2, r3
 8000200:	607b      	str	r3, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	4809      	ldr	r0, [pc, #36]	; (800022c <main+0x64>)
 8000208:	f001 f9f2 	bl	80015f0 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 feaa 	bl	8000f68 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2108      	movs	r1, #8
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <main+0x64>)
 800021a:	f001 f9e9 	bl	80015f0 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fea1 	bl	8000f68 <HAL_Delay>
  {
 8000226:	e7e4      	b.n	80001f2 <main+0x2a>
 8000228:	20000000 	.word	0x20000000
 800022c:	48000400 	.word	0x48000400

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f006 f920 	bl	8006484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 031c 	add.w	r3, r7, #28
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	2302      	movs	r3, #2
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2310      	movs	r3, #16
 800026e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000278:	4618      	mov	r0, r3
 800027a:	f002 f895 	bl	80023a8 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000284:	f000 fbfa 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	f107 031c 	add.w	r3, r7, #28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 f8be 	bl	8003424 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ae:	f000 fbe5 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002b2:	2320      	movs	r3, #32
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f003 fae7 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002c8:	f000 fbd8 	bl	8000a7c <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	3758      	adds	r7, #88	; 0x58
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_I2C1_Init+0x74>)
 80002da:	4a1c      	ldr	r2, [pc, #112]	; (800034c <MX_I2C1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <MX_I2C1_Init+0x7c>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e6:	2224      	movs	r2, #36	; 0x24
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_I2C1_Init+0x74>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <MX_I2C1_Init+0x74>)
 8000310:	f001 f986 	bl	8001620 <HAL_I2C_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031a:	f000 fbaf 	bl	8000a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031e:	2100      	movs	r1, #0
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <MX_I2C1_Init+0x74>)
 8000322:	f001 ffaa 	bl	800227a <HAL_I2CEx_ConfigAnalogFilter>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800032c:	f000 fba6 	bl	8000a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000330:	2100      	movs	r1, #0
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_I2C1_Init+0x74>)
 8000334:	f001 ffec 	bl	8002310 <HAL_I2CEx_ConfigDigitalFilter>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 fb9d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000034 	.word	0x20000034
 800034c:	40005400 	.word	0x40005400
 8000350:	2000090e 	.word	0x2000090e

08000354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_SPI1_Init+0x74>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_SPI1_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_SPI1_Init+0x74>)
 800036c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_SPI1_Init+0x74>)
 8000398:	2207      	movs	r2, #7
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_SPI1_Init+0x74>)
 80003aa:	f003 fb97 	bl	8003adc <HAL_SPI_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80003b4:	f000 fb62 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  HAL_SPI_Receive_IT(&hspi1, &spiRxBuffer, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	4905      	ldr	r1, [pc, #20]	; (80003d0 <MX_SPI1_Init+0x7c>)
 80003bc:	4802      	ldr	r0, [pc, #8]	; (80003c8 <MX_SPI1_Init+0x74>)
 80003be:	f003 fda5 	bl	8003f0c <HAL_SPI_Receive_IT>
  /* USER CODE END SPI1_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000088 	.word	0x20000088
 80003cc:	40013000 	.word	0x40013000
 80003d0:	2000020d 	.word	0x2000020d

080003d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_TIM16_Init+0x50>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_TIM16_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_TIM16_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000404:	4806      	ldr	r0, [pc, #24]	; (8000420 <MX_TIM16_Init+0x4c>)
 8000406:	f004 fb85 	bl	8004b14 <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000410:	f000 fb34 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000414:	4802      	ldr	r0, [pc, #8]	; (8000420 <MX_TIM16_Init+0x4c>)
 8000416:	f004 fbd5 	bl	8004bc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000ec 	.word	0x200000ec
 8000424:	40014400 	.word	0x40014400

08000428 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_TIM17_Init+0x44>)
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_TIM17_Init+0x48>)
 8000430:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_TIM17_Init+0x44>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_TIM17_Init+0x44>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_TIM17_Init+0x44>)
 8000440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000444:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_TIM17_Init+0x44>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_TIM17_Init+0x44>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_TIM17_Init+0x44>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_TIM17_Init+0x44>)
 800045a:	f004 fb5b 	bl	8004b14 <HAL_TIM_Base_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000464:	f000 fb0a 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000138 	.word	0x20000138
 8000470:	40014800 	.word	0x40014800

08000474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 800047a:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <MX_USART2_UART_Init+0x64>)
 800047c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 8000480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b6:	4807      	ldr	r0, [pc, #28]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004b8:	f004 fdbe 	bl	8005038 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 fadb 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &uartRxBuffer, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <MX_USART2_UART_Init+0x68>)
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <MX_USART2_UART_Init+0x60>)
 80004cc:	f004 fe8c 	bl	80051e8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000184 	.word	0x20000184
 80004d8:	40004400 	.word	0x40004400
 80004dc:	2000020c 	.word	0x2000020c

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	4b42      	ldr	r3, [pc, #264]	; (8000600 <MX_GPIO_Init+0x120>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a41      	ldr	r2, [pc, #260]	; (8000600 <MX_GPIO_Init+0x120>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <MX_GPIO_Init+0x120>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <MX_GPIO_Init+0x120>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a3b      	ldr	r2, [pc, #236]	; (8000600 <MX_GPIO_Init+0x120>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b39      	ldr	r3, [pc, #228]	; (8000600 <MX_GPIO_Init+0x120>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b36      	ldr	r3, [pc, #216]	; (8000600 <MX_GPIO_Init+0x120>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a35      	ldr	r2, [pc, #212]	; (8000600 <MX_GPIO_Init+0x120>)
 800052c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b33      	ldr	r3, [pc, #204]	; (8000600 <MX_GPIO_Init+0x120>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2102      	movs	r1, #2
 8000542:	4830      	ldr	r0, [pc, #192]	; (8000604 <MX_GPIO_Init+0x124>)
 8000544:	f001 f854 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	210b      	movs	r1, #11
 800054c:	482e      	ldr	r0, [pc, #184]	; (8000608 <MX_GPIO_Init+0x128>)
 800054e:	f001 f84f 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f001 f848 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_Out_GPIO_Port, SPI1_NSS_Out_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4828      	ldr	r0, [pc, #160]	; (8000608 <MX_GPIO_Init+0x128>)
 8000566:	f001 f843 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 800056a:	2302      	movs	r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	4820      	ldr	r0, [pc, #128]	; (8000604 <MX_GPIO_Init+0x124>)
 8000582:	f000 feab 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_1_Pin LED_R_2_Pin LED_G_Pin SPI1_NSS_Out_Pin */
  GPIO_InitStruct.Pin = LED_R_1_Pin|LED_R_2_Pin|LED_G_Pin|SPI1_NSS_Out_Pin;
 8000586:	232b      	movs	r3, #43	; 0x2b
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	481a      	ldr	r0, [pc, #104]	; (8000608 <MX_GPIO_Init+0x128>)
 800059e:	f000 fe9d 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_3_Pin LED_R_4_Pin LED_R_5_Pin */
  GPIO_InitStruct.Pin = LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin;
 80005a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fe8d 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin|BTN_SET_Pin;
 80005c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f000 fe7f 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 80005de:	2310      	movs	r3, #16
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0x128>)
 80005f2:	f000 fe73 	bl	80012dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	48001400 	.word	0x48001400
 8000608:	48000400 	.word	0x48000400

0800060c <resetModeLed>:

/* USER CODE BEGIN 4 */

//INTERRUP PROCESSING
void resetModeLed(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(
 8000610:	2200      	movs	r2, #0
 8000612:	2103      	movs	r1, #3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <resetModeLed+0x20>)
 8000616:	f000 ffeb 	bl	80015f0 <HAL_GPIO_WritePin>
					GPIOB,
					LED_R_1_Pin|LED_R_2_Pin,
					GPIO_PIN_RESET
				   );
  HAL_GPIO_WritePin(
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 ffe4 	bl	80015f0 <HAL_GPIO_WritePin>
					GPIOA,
					LED_R_3_Pin|LED_R_4_Pin|LED_R_5_Pin,
					GPIO_PIN_RESET
				   );
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48000400 	.word	0x48000400

08000630 <setModeLed>:

void setModeLed(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if(userMode == 1)
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <setModeLed+0x84>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d106      	bne.n	800064a <setModeLed+0x1a>
	{
	  resetModeLed();
 800063c:	f7ff ffe6 	bl	800060c <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_1_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2101      	movs	r1, #1
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <setModeLed+0x88>)
 8000646:	f000 ffd3 	bl	80015f0 <HAL_GPIO_WritePin>
	}
	if(userMode == 2)
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <setModeLed+0x84>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d106      	bne.n	8000660 <setModeLed+0x30>
	{
	  resetModeLed();
 8000652:	f7ff ffdb 	bl	800060c <resetModeLed>
	  HAL_GPIO_WritePin(GPIOB, LED_R_2_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2102      	movs	r1, #2
 800065a:	4817      	ldr	r0, [pc, #92]	; (80006b8 <setModeLed+0x88>)
 800065c:	f000 ffc8 	bl	80015f0 <HAL_GPIO_WritePin>
	}
	if(userMode == 3)
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <setModeLed+0x84>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d108      	bne.n	800067a <setModeLed+0x4a>
	{
	  resetModeLed();
 8000668:	f7ff ffd0 	bl	800060c <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_3_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f000 ffbb 	bl	80015f0 <HAL_GPIO_WritePin>
	}
	if(userMode == 4)
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <setModeLed+0x84>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d108      	bne.n	8000694 <setModeLed+0x64>
	{
	  resetModeLed();
 8000682:	f7ff ffc3 	bl	800060c <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 ffae 	bl	80015f0 <HAL_GPIO_WritePin>
	}
	if(userMode == 5)
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <setModeLed+0x84>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b05      	cmp	r3, #5
 800069a:	d108      	bne.n	80006ae <setModeLed+0x7e>
	{
	  resetModeLed();
 800069c:	f7ff ffb6 	bl	800060c <resetModeLed>
	  HAL_GPIO_WritePin(GPIOA, LED_R_5_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 ffa1 	bl	80015f0 <HAL_GPIO_WritePin>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	48000400 	.word	0x48000400

080006bc <UART_Transmit>:
//	uartTxBuffer = data;
//	HAL_UART_Transmit(&huart2, uartTxBuffer, 1, HAL_MAX_DELAY);
//
//}

void UART_Transmit(uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    // Transmit a single byte using HAL_UART_Transmit
    status = HAL_UART_Transmit(&huart2, &data, 1, HAL_MAX_DELAY);
 80006c6:	1df9      	adds	r1, r7, #7
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006cc:	2201      	movs	r2, #1
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <UART_Transmit+0x30>)
 80006d0:	f004 fd00 	bl	80050d4 <HAL_UART_Transmit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]

    // Check the status
    if (status != HAL_OK) {
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <UART_Transmit+0x26>
    		Error_Handler();
 80006de:	f000 f9cd 	bl	8000a7c <Error_Handler>
    }
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000184 	.word	0x20000184

080006f0 <SPI_Transmit>:

void SPI_Transmit(uint8_t data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    // Transmit a single byte using HAL_UART_Transmit
    HAL_GPIO_WritePin(SPI1_NSS_Out_GPIO_Port, SPI1_NSS_Out_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <SPI_Transmit+0x44>)
 8000700:	f000 ff76 	bl	80015f0 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000704:	1df9      	adds	r1, r7, #7
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	2201      	movs	r2, #1
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <SPI_Transmit+0x48>)
 800070e:	f003 fa88 	bl	8003c22 <HAL_SPI_Transmit>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(SPI1_NSS_Out_GPIO_Port, SPI1_NSS_Out_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2120      	movs	r1, #32
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <SPI_Transmit+0x44>)
 800071c:	f000 ff68 	bl	80015f0 <HAL_GPIO_WritePin>

    // Check the status
    if (status != HAL_OK) {
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SPI_Transmit+0x3a>
    		Error_Handler();
 8000726:	f000 f9a9 	bl	8000a7c <Error_Handler>
    }
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400
 8000738:	20000088 	.word	0x20000088

0800073c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)				//TIM16 interrupt processing
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

	if(htim == &htim16)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a85      	ldr	r2, [pc, #532]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000748:	4293      	cmp	r3, r2
 800074a:	f040 8103 	bne.w	8000954 <HAL_TIM_PeriodElapsedCallback+0x218>
	{
		BTN_RED_currentState = HAL_GPIO_ReadPin(GPIOB, BTN_R_Pin);
 800074e:	2110      	movs	r1, #16
 8000750:	4883      	ldr	r0, [pc, #524]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000752:	f000 ff35 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b82      	ldr	r3, [pc, #520]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800075c:	801a      	strh	r2, [r3, #0]
		BTN_SET_currentState = HAL_GPIO_ReadPin(GPIOA, BTN_SET_Pin);
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f000 ff2b 	bl	80015c0 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b7e      	ldr	r3, [pc, #504]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000770:	801a      	strh	r2, [r3, #0]
		BTN_BLUE_currentState = HAL_GPIO_ReadPin(GPIOA, BTN_B_Pin);
 8000772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f000 ff21 	bl	80015c0 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b7a      	ldr	r3, [pc, #488]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000784:	801a      	strh	r2, [r3, #0]
		//turning on RED btn
		if(BTN_RED_currentState != BTN_RED_initState)
 8000786:	4b77      	ldr	r3, [pc, #476]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000788:	881a      	ldrh	r2, [r3, #0]
 800078a:	4b79      	ldr	r3, [pc, #484]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d028      	beq.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0xa8>
		{

			++BTN_RED_pressSlowCount;
 8000792:	4b78      	ldr	r3, [pc, #480]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800079c:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_pressSlowCount > BTN_DEBOUNCE_TIMER)
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b73      	ldr	r3, [pc, #460]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d21b      	bcs.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				//if you are here than RED BTN is pressed
				BTN_RED_pressSlowCount = 0;
 80007ac:	4b71      	ldr	r3, [pc, #452]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_RED_isPressed == false)
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d011      	beq.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0xa8>
				{
					userMode = userMode + 1;
 80007c0:	4b6f      	ldr	r3, [pc, #444]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b6d      	ldr	r3, [pc, #436]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007ca:	701a      	strb	r2, [r3, #0]

					if(userMode == 6)
 80007cc:	4b6c      	ldr	r3, [pc, #432]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	d102      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x9e>
					{

						userMode = 1;
 80007d4:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]

					}


					setModeLed();
 80007da:	f7ff ff29 	bl	8000630 <setModeLed>
					BTN_RED_isPressed = true;
 80007de:	4b67      	ldr	r3, [pc, #412]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on BLUE btn
		if(BTN_BLUE_currentState != BTN_BLUE_initState)
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	4b66      	ldr	r3, [pc, #408]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d028      	beq.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x106>
		{

			++BTN_BLUE_pressSlowCount;
 80007f0:	4b65      	ldr	r3, [pc, #404]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80007fa:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_pressSlowCount > BTN_DEBOUNCE_TIMER)
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d21b      	bcs.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x106>
			{
				//if you are here than RED BTN is pressed
				BTN_BLUE_pressSlowCount = 0;
 800080a:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_BLUE_isPressed == false)
 8000810:	4b5e      	ldr	r3, [pc, #376]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d011      	beq.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x106>
				{
					userMode = userMode - 1;
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b56      	ldr	r3, [pc, #344]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000828:	701a      	strb	r2, [r3, #0]

					if(userMode == 0)
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d102      	bne.n	8000838 <HAL_TIM_PeriodElapsedCallback+0xfc>
					{

						userMode = 5;
 8000832:	4b53      	ldr	r3, [pc, #332]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000834:	2205      	movs	r2, #5
 8000836:	701a      	strb	r2, [r3, #0]

					}

					setModeLed();
 8000838:	f7ff fefa 	bl	8000630 <setModeLed>
					BTN_BLUE_isPressed = true;
 800083c:	4b53      	ldr	r3, [pc, #332]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning on SET btn
		if(BTN_SET_currentState != BTN_SET_initState)
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000844:	881a      	ldrh	r2, [r3, #0]
 8000846:	4b52      	ldr	r3, [pc, #328]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	d02b      	beq.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16a>
		{

			++BTN_SET_pressSlowCount;
 800084e:	4b51      	ldr	r3, [pc, #324]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b4f      	ldr	r3, [pc, #316]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000858:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_pressSlowCount > BTN_DEBOUNCE_TIMER)
 800085a:	4b47      	ldr	r3, [pc, #284]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d21e      	bcs.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16a>
			{
				//if you are here than RED BTN is pressed
				BTN_SET_pressSlowCount = 0;
 8000868:	4b4a      	ldr	r3, [pc, #296]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]

				//onClick RED BTN code
				if(BTN_SET_isPressed == false)
 800086e:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	f083 0301 	eor.w	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d014      	beq.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16a>
				{
					if(protocol == 1)
 800087c:	4b47      	ldr	r3, [pc, #284]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x152>
					{
						UART_Transmit(userMode);
 8000884:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff17 	bl	80006bc <UART_Transmit>
					}
					if(protocol == 2)
 800088e:	4b43      	ldr	r3, [pc, #268]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d104      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x164>
					{
						SPI_Transmit(userMode);
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff28 	bl	80006f0 <SPI_Transmit>
					}


					BTN_SET_isPressed = true;
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		//turning off RED btn
		if(BTN_RED_currentState == BTN_RED_initState && BTN_RED_isPressed == true)
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d116      	bne.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d012      	beq.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		{

			++BTN_RED_releaseSlowCount;
 80008ba:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008c4:	801a      	strh	r2, [r3, #0]

			if(BTN_RED_releaseSlowCount > BTN_DEBOUNCE_TIMER)
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d205      	bcs.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
			{

				BTN_RED_isPressed = false;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
				BTN_RED_releaseSlowCount = 0;
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008dc:	2200      	movs	r2, #0
 80008de:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off RED btn
		if(BTN_BLUE_currentState == BTN_BLUE_initState && BTN_BLUE_isPressed == true)
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d116      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x1de>
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d012      	beq.n	800091a <HAL_TIM_PeriodElapsedCallback+0x1de>
		{

			++BTN_BLUE_releaseSlowCount;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80008fe:	801a      	strh	r2, [r3, #0]

			if(BTN_BLUE_releaseSlowCount > BTN_DEBOUNCE_TIMER)
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d205      	bcs.n	800091a <HAL_TIM_PeriodElapsedCallback+0x1de>
			{

				BTN_BLUE_isPressed = false;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
				BTN_BLUE_releaseSlowCount = 0;
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000916:	2200      	movs	r2, #0
 8000918:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
		//turning off SET btn
		if(BTN_SET_currentState == BTN_SET_initState && BTN_SET_isPressed == true)
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d116      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x218>
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d012      	beq.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x218>
		{

			++BTN_SET_releaseSlowCount;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000938:	801a      	strh	r2, [r3, #0]

			if(BTN_SET_releaseSlowCount > BTN_DEBOUNCE_TIMER)
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d205      	bcs.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x218>
			{

				BTN_SET_isPressed = false;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
				BTN_SET_releaseSlowCount = 0;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
				//onRelease RED BTN code

			}
		}
	}
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000ec 	.word	0x200000ec
 8000960:	48000400 	.word	0x48000400
 8000964:	2000020e 	.word	0x2000020e
 8000968:	2000021e 	.word	0x2000021e
 800096c:	20000216 	.word	0x20000216
 8000970:	20000004 	.word	0x20000004
 8000974:	20000210 	.word	0x20000210
 8000978:	20000002 	.word	0x20000002
 800097c:	20000214 	.word	0x20000214
 8000980:	20000000 	.word	0x20000000
 8000984:	20000006 	.word	0x20000006
 8000988:	20000218 	.word	0x20000218
 800098c:	2000021c 	.word	0x2000021c
 8000990:	20000008 	.word	0x20000008
 8000994:	20000220 	.word	0x20000220
 8000998:	20000224 	.word	0x20000224
 800099c:	20000001 	.word	0x20000001
 80009a0:	20000212 	.word	0x20000212
 80009a4:	2000021a 	.word	0x2000021a
 80009a8:	20000222 	.word	0x20000222

080009ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2 && uartRxBuffer)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_UART_RxCpltCallback+0x54>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d11b      	bne.n	80009f6 <HAL_UART_RxCpltCallback+0x4a>
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_RxCpltCallback+0x58>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d017      	beq.n	80009f6 <HAL_UART_RxCpltCallback+0x4a>
  {
	//userCode
    userMode = uartRxBuffer;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_UART_RxCpltCallback+0x58>)
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_UART_RxCpltCallback+0x5c>)
 80009cc:	701a      	strb	r2, [r3, #0]
    if(userMode > 5 || userMode < 1) Error_Handler();
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_RxCpltCallback+0x5c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b05      	cmp	r3, #5
 80009d4:	d803      	bhi.n	80009de <HAL_UART_RxCpltCallback+0x32>
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_UART_RxCpltCallback+0x5c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_UART_RxCpltCallback+0x36>
 80009de:	f000 f84d 	bl	8000a7c <Error_Handler>
    protocol = 1;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_UART_RxCpltCallback+0x60>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
    setModeLed();
 80009e8:	f7ff fe22 	bl	8000630 <setModeLed>

    //init listening to UART
    HAL_UART_Receive_IT(&huart2, &uartRxBuffer, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <HAL_UART_RxCpltCallback+0x58>)
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <HAL_UART_RxCpltCallback+0x64>)
 80009f2:	f004 fbf9 	bl	80051e8 <HAL_UART_Receive_IT>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	2000020c 	.word	0x2000020c
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000001 	.word	0x20000001
 8000a10:	20000184 	.word	0x20000184

08000a14 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    // Handle received data
    // You can access the received data from the 'receivedData' variable
	if (hspi->Instance == SPI1 && spiRxBuffer)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_SPI_RxCpltCallback+0x54>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d11b      	bne.n	8000a5e <HAL_SPI_RxCpltCallback+0x4a>
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_RxCpltCallback+0x58>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d017      	beq.n	8000a5e <HAL_SPI_RxCpltCallback+0x4a>
	  {
		//userCode
	    userMode = spiRxBuffer;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_SPI_RxCpltCallback+0x58>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_SPI_RxCpltCallback+0x5c>)
 8000a34:	701a      	strb	r2, [r3, #0]
	    if(userMode > 5 || userMode < 1) Error_Handler();
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_SPI_RxCpltCallback+0x5c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	d803      	bhi.n	8000a46 <HAL_SPI_RxCpltCallback+0x32>
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_SPI_RxCpltCallback+0x5c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <HAL_SPI_RxCpltCallback+0x36>
 8000a46:	f000 f819 	bl	8000a7c <Error_Handler>
	    protocol = 2;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_SPI_RxCpltCallback+0x60>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
	    setModeLed();
 8000a50:	f7ff fdee 	bl	8000630 <setModeLed>

	    HAL_SPI_Receive_IT(&hspi1, &spiRxBuffer, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	4905      	ldr	r1, [pc, #20]	; (8000a6c <HAL_SPI_RxCpltCallback+0x58>)
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_SPI_RxCpltCallback+0x64>)
 8000a5a:	f003 fa57 	bl	8003f0c <HAL_SPI_Receive_IT>
	  }

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	2000020d 	.word	0x2000020d
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000001 	.word	0x20000001
 8000a78:	20000088 	.word	0x20000088

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2102      	movs	r1, #2
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <Error_Handler+0x18>)
 8000a86:	f000 fdb3 	bl	80015f0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  return;
 8000a8e:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48001400 	.word	0x48001400

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_I2C_MspInit+0x9c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d137      	bne.n	8000b72 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <HAL_I2C_MspInit+0xa4>)
 8000b36:	f000 fbd1 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_I2C_MspInit+0xa0>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 14, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210e      	movs	r1, #14
 8000b56:	201f      	movs	r0, #31
 8000b58:	f000 fb05 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b5c:	201f      	movs	r0, #31
 8000b5e:	f000 fb1e 	bl	800119e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 13, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210d      	movs	r1, #13
 8000b66:	2020      	movs	r0, #32
 8000b68:	f000 fafd 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	f000 fb16 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <HAL_SPI_MspInit+0xb0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d141      	bne.n	8000c2e <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_SPI_MspInit+0xb4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NSS_In_Pin;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_NSS_In_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fb70 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfc:	23e0      	movs	r3, #224	; 0xe0
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fb5f 	bl	80012dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 14, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210e      	movs	r1, #14
 8000c22:	2023      	movs	r0, #35	; 0x23
 8000c24:	f000 fa9f 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c28:	2023      	movs	r0, #35	; 0x23
 8000c2a:	f000 fab8 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40013000 	.word	0x40013000
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_TIM_Base_MspInit+0x78>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d114      	bne.n	8000c7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	2019      	movs	r0, #25
 8000c70:	f000 fa79 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f000 fa92 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c7a:	e018      	b.n	8000cae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_TIM_Base_MspInit+0x80>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d113      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_TIM_Base_MspInit+0x7c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 12, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	201a      	movs	r0, #26
 8000ca4:	f000 fa5f 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ca8:	201a      	movs	r0, #26
 8000caa:	f000 fa78 	bl	800119e <HAL_NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40014400 	.word	0x40014400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40014800 	.word	0x40014800

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d130      	bne.n	8000d48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 fad2 	bl	80012dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	210e      	movs	r1, #14
 8000d3c:	2026      	movs	r0, #38	; 0x26
 8000d3e:	f000 fa12 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d42:	2026      	movs	r0, #38	; 0x26
 8000d44:	f000 fa2b 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f8c0 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000db2:	f003 ff63 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000ec 	.word	0x200000ec

08000dc0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000dc6:	f003 ff59 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000138 	.word	0x20000138

08000dd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_EV_IRQHandler+0x10>)
 8000dda:	f000 fcb0 	bl	800173e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000034 	.word	0x20000034

08000de8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <I2C1_ER_IRQHandler+0x10>)
 8000dee:	f000 fcc0 	bl	8001772 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000034 	.word	0x20000034

08000dfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <SPI1_IRQHandler+0x10>)
 8000e02:	f003 f9e3 	bl	80041cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000088 	.word	0x20000088

08000e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USART2_IRQHandler+0x10>)
 8000e16:	f004 fa2b 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000184 	.word	0x20000184

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff ffea 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f005 fb0d 	bl	8006494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff f9a5 	bl	80001c8 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e8c:	08006534 	.word	0x08006534
  ldr r2, =_sbss
 8000e90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e94:	2000022c 	.word	0x2000022c

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x28>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x28>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fdee 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000014 	.word	0x20000014
 8000f24:	20000010 	.word	0x20000010

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000014 	.word	0x20000014
 8000f4c:	20000228 	.word	0x20000228

08000f50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000228 	.word	0x20000228

08000f68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000014 	.word	0x20000014

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d008      	beq.n	80011f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e020      	b.n	8001238 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 020e 	bic.w	r2, r2, #14
 8001204:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001256:	2b02      	cmp	r3, #2
 8001258:	d005      	beq.n	8001266 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2204      	movs	r2, #4
 800125e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e027      	b.n	80012b6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 020e 	bic.w	r2, r2, #14
 8001274:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    } 
  }
  return status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e14e      	b.n	800158a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8140 	beq.w	8001584 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0203 	and.w	r2, r3, #3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 809a 	beq.w	8001584 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <HAL_GPIO_Init+0x2cc>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2cc>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x2cc>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1e0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a46      	ldr	r2, [pc, #280]	; (80015b0 <HAL_GPIO_Init+0x2d4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <HAL_GPIO_Init+0x2d8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1d8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <HAL_GPIO_Init+0x2dc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1d4>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014b0:	2305      	movs	r3, #5
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014bc:	2300      	movs	r3, #0
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ce:	4937      	ldr	r1, [pc, #220]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001500:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_GPIO_Init+0x2e0>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f aea9 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800160c:	e002      	b.n	8001614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e081      	b.n	8001736 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fa4a 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2224      	movs	r2, #36	; 0x24
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001670:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001680:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	e006      	b.n	80016a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d104      	bne.n	80016ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69d9      	ldr	r1, [r3, #28]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
  }
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00f      	beq.n	80017b4 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00f      	beq.n	80017de <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f043 0208 	orr.w	r2, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00f      	beq.n	8001808 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 030b 	and.w	r3, r3, #11
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fb76 	bl	8001f0c <I2C_ITError>
  }
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
 800185c:	4613      	mov	r3, r2
 800185e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <I2C_Slave_ISR_IT+0x24>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0e1      	b.n	8001a90 <I2C_Slave_ISR_IT+0x1e8>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f9b4 	bl	8001c58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04b      	beq.n	8001992 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001900:	2b00      	cmp	r3, #0
 8001902:	d046      	beq.n	8001992 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d128      	bne.n	8001960 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b28      	cmp	r3, #40	; 0x28
 8001918:	d108      	bne.n	800192c <I2C_Slave_ISR_IT+0x84>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001920:	d104      	bne.n	800192c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001922:	6939      	ldr	r1, [r7, #16]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fa9d 	bl	8001e64 <I2C_ITListenCplt>
 800192a:	e031      	b.n	8001990 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b29      	cmp	r3, #41	; 0x29
 8001936:	d10e      	bne.n	8001956 <I2C_Slave_ISR_IT+0xae>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800193e:	d00a      	beq.n	8001956 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fbf6 	bl	800213a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f926 	bl	8001ba0 <I2C_ITSlaveSeqCplt>
 8001954:	e01c      	b.n	8001990 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2210      	movs	r2, #16
 800195c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800195e:	e08f      	b.n	8001a80 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <I2C_Slave_ISR_IT+0xda>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d17e      	bne.n	8001a80 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fabf 	bl	8001f0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800198e:	e077      	b.n	8001a80 <I2C_Slave_ISR_IT+0x1d8>
 8001990:	e076      	b.n	8001a80 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d02f      	beq.n	80019fc <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d02a      	beq.n	80019fc <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d018      	beq.n	80019e2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d14b      	bne.n	8001a84 <I2C_Slave_ISR_IT+0x1dc>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019f2:	d047      	beq.n	8001a84 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f8d3 	bl	8001ba0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80019fa:	e043      	b.n	8001a84 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a10:	6939      	ldr	r1, [r7, #16]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f840 	bl	8001a98 <I2C_ITAddrCplt>
 8001a18:	e035      	b.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d030      	beq.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02b      	beq.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a68:	e00d      	b.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d002      	beq.n	8001a78 <I2C_Slave_ISR_IT+0x1d0>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d106      	bne.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f891 	bl	8001ba0 <I2C_ITSlaveSeqCplt>
 8001a7e:	e002      	b.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001a84:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001aae:	2b28      	cmp	r3, #40	; 0x28
 8001ab0:	d16a      	bne.n	8001b88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ad0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ade:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001aec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d138      	bne.n	8001b68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	89bb      	ldrh	r3, [r7, #12]
 8001afe:	4053      	eors	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f003 0306 	and.w	r3, r3, #6
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11c      	bne.n	8001b44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d13b      	bne.n	8001b98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b36:	89ba      	ldrh	r2, [r7, #12]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fe87 	bl	8001850 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b42:	e029      	b.n	8001b98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb36 	bl	80021be <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b5a:	89ba      	ldrh	r2, [r7, #12]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fe75 	bl	8001850 <HAL_I2C_AddrCallback>
}
 8001b66:	e017      	b.n	8001b98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fb26 	bl	80021be <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b7a:	89ba      	ldrh	r2, [r7, #12]
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe65 	bl	8001850 <HAL_I2C_AddrCallback>
}
 8001b86:	e007      	b.n	8001b98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e00c      	b.n	8001bee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b29      	cmp	r3, #41	; 0x29
 8001bf8:	d112      	bne.n	8001c20 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2228      	movs	r2, #40	; 0x28
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2221      	movs	r2, #33	; 0x21
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fad7 	bl	80021be <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe05 	bl	8001828 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c1e:	e017      	b.n	8001c50 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2a:	d111      	bne.n	8001c50 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2228      	movs	r2, #40	; 0x28
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2222      	movs	r2, #34	; 0x22
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fabe 	bl	80021be <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fdf6 	bl	800183c <HAL_I2C_SlaveRxCpltCallback>
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c74:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b21      	cmp	r3, #33	; 0x21
 8001c82:	d002      	beq.n	8001c8a <I2C_ITSlaveCplt+0x32>
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b29      	cmp	r3, #41	; 0x29
 8001c88:	d108      	bne.n	8001c9c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fa95 	bl	80021be <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2221      	movs	r2, #33	; 0x21
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9a:	e00d      	b.n	8001cb8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b22      	cmp	r3, #34	; 0x22
 8001ca0:	d002      	beq.n	8001ca8 <I2C_ITSlaveCplt+0x50>
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ca6:	d107      	bne.n	8001cb8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ca8:	f248 0102 	movw	r1, #32770	; 0x8002
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa86 	bl	80021be <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2222      	movs	r2, #34	; 0x22
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cc6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <I2C_ITSlaveCplt+0x204>)
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fa2e 	bl	800213a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cf6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01f      	beq.n	8001d40 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d0e:	e017      	b.n	8001d40 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d020      	beq.n	8001d8c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8a4 	bl	8001f0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b28      	cmp	r3, #40	; 0x28
 8001dce:	d141      	bne.n	8001e54 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f846 	bl	8001e64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001dd8:	e03c      	b.n	8001e54 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de2:	d014      	beq.n	8001e0e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fedb 	bl	8001ba0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <I2C_ITSlaveCplt+0x208>)
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fd30 	bl	800186c <HAL_I2C_ListenCpltCallback>
}
 8001e0c:	e022      	b.n	8001e54 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b22      	cmp	r3, #34	; 0x22
 8001e18:	d10e      	bne.n	8001e38 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fd03 	bl	800183c <HAL_I2C_SlaveRxCpltCallback>
}
 8001e36:	e00d      	b.n	8001e54 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fcea 	bl	8001828 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	fe00e800 	.word	0xfe00e800
 8001e60:	ffff0000 	.word	0xffff0000

08001e64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <I2C_ITListenCplt+0xa4>)
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d022      	beq.n	8001ee0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d012      	beq.n	8001ee0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ee0:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f96a 	bl	80021be <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fcb6 	bl	800186c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	ffff0000 	.word	0xffff0000

08001f0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a6d      	ldr	r2, [pc, #436]	; (80020e0 <I2C_ITError+0x1d4>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b28      	cmp	r3, #40	; 0x28
 8001f42:	d005      	beq.n	8001f50 <I2C_ITError+0x44>
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b29      	cmp	r3, #41	; 0x29
 8001f48:	d002      	beq.n	8001f50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f4e:	d10b      	bne.n	8001f68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f50:	2103      	movs	r1, #3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f933 	bl	80021be <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2228      	movs	r2, #40	; 0x28
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <I2C_ITError+0x1d8>)
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
 8001f66:	e030      	b.n	8001fca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f68:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f926 	bl	80021be <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8e1 	bl	800213a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b60      	cmp	r3, #96	; 0x60
 8001f82:	d01f      	beq.n	8001fc4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d114      	bne.n	8001fc4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d109      	bne.n	8001fbc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d039      	beq.n	800204c <I2C_ITError+0x140>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b11      	cmp	r3, #17
 8001fdc:	d002      	beq.n	8001fe4 <I2C_ITError+0xd8>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b21      	cmp	r3, #33	; 0x21
 8001fe2:	d133      	bne.n	800204c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ff2:	d107      	bne.n	8002004 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002002:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f959 	bl	80012c0 <HAL_DMA_GetState>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d017      	beq.n	8002044 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <I2C_ITError+0x1dc>)
 800201a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f90b 	bl	8001244 <HAL_DMA_Abort_IT>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d04d      	beq.n	80020d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800203e:	4610      	mov	r0, r2
 8002040:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002042:	e045      	b.n	80020d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f851 	bl	80020ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800204a:	e041      	b.n	80020d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d039      	beq.n	80020c8 <I2C_ITError+0x1bc>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d002      	beq.n	8002060 <I2C_ITError+0x154>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b22      	cmp	r3, #34	; 0x22
 800205e:	d133      	bne.n	80020c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206e:	d107      	bne.n	8002080 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f91b 	bl	80012c0 <HAL_DMA_GetState>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d017      	beq.n	80020c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <I2C_ITError+0x1dc>)
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f8cd 	bl	8001244 <HAL_DMA_Abort_IT>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d011      	beq.n	80020d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020ba:	4610      	mov	r0, r2
 80020bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020be:	e009      	b.n	80020d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f813 	bl	80020ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020c6:	e005      	b.n	80020d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f80f 	bl	80020ec <I2C_TreatErrorCallback>
  }
}
 80020ce:	e002      	b.n	80020d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020d4:	bf00      	nop
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	ffff0000 	.word	0xffff0000
 80020e4:	080018a9 	.word	0x080018a9
 80020e8:	08002183 	.word	0x08002183

080020ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b60      	cmp	r3, #96	; 0x60
 80020fe:	d10e      	bne.n	800211e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fbbc 	bl	8001894 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800211c:	e009      	b.n	8002132 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fba7 	bl	8001880 <HAL_I2C_ErrorCallback>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	d103      	bne.n	8002158 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	619a      	str	r2, [r3, #24]
  }
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7ff ff9b 	bl	80020ec <I2C_TreatErrorCallback>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00f      	beq.n	80021f8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80021de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ec:	2b28      	cmp	r3, #40	; 0x28
 80021ee:	d003      	beq.n	80021f8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80021f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00f      	beq.n	8002222 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002208:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002216:	2b28      	cmp	r3, #40	; 0x28
 8002218:	d003      	beq.n	8002222 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002220:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002222:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002226:	2b00      	cmp	r3, #0
 8002228:	da03      	bge.n	8002232 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002230:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	2b10      	cmp	r3, #16
 8002236:	d103      	bne.n	8002240 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800223e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	2b20      	cmp	r3, #32
 8002244:	d103      	bne.n	800224e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d103      	bne.n	800225c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	d138      	bne.n	8002302 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229a:	2302      	movs	r3, #2
 800229c:	e032      	b.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2224      	movs	r2, #36	; 0x24
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	d139      	bne.n	800239a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002330:	2302      	movs	r3, #2
 8002332:	e033      	b.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002362:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f001 b823 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 817d 	beq.w	80026de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e4:	4bbc      	ldr	r3, [pc, #752]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4bb9      	ldr	r3, [pc, #740]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d15c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x10e>
 80023fc:	4bb6      	ldr	r3, [pc, #728]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d155      	bne.n	80024b6 <HAL_RCC_OscConfig+0x10e>
 800240a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x94>
 8002436:	4ba8      	ldr	r3, [pc, #672]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	e015      	b.n	8002468 <HAL_RCC_OscConfig+0xc0>
 800243c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002440:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002454:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002458:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002464:	4b9c      	ldr	r3, [pc, #624]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002470:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800247c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 811f 	beq.w	80026dc <HAL_RCC_OscConfig+0x334>
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8116 	bne.w	80026dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f000 bfaf 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12e>
 80024c8:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a82      	ldr	r2, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e036      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x158>
 80024e6:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e021      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x184>
 8002512:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a70      	ldr	r2, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6d      	ldr	r2, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f023 020f 	bic.w	r2, r3, #15
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	495f      	ldr	r1, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800255a:	4313      	orrs	r3, r2
 800255c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d059      	beq.n	8002622 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fcef 	bl	8000f50 <HAL_GetTick>
 8002572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fcea 	bl	8000f50 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d902      	bls.n	800258e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	f000 bf43 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 800258e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002592:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_OscConfig+0x218>
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x244>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002600:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ab      	beq.n	8002578 <HAL_RCC_OscConfig+0x1d0>
 8002620:	e05d      	b.n	80026de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fc95 	bl	8000f50 <HAL_GetTick>
 8002626:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fc90 	bl	8000f50 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d902      	bls.n	8002642 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	f000 bee9 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002656:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x2cc>
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e015      	b.n	80026a0 <HAL_RCC_OscConfig+0x2f8>
 8002674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002678:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002690:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ab      	bne.n	800262c <HAL_RCC_OscConfig+0x284>
 80026d4:	e003      	b.n	80026de <HAL_RCC_OscConfig+0x336>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 817d 	beq.w	80029ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f4:	4ba6      	ldr	r3, [pc, #664]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002700:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d172      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 800270c:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d16c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800272a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x3a0>
 8002742:	4b93      	ldr	r3, [pc, #588]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e013      	b.n	8002770 <HAL_RCC_OscConfig+0x3c8>
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002760:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800276c:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2202      	movs	r2, #2
 8002772:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002776:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002782:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCC_OscConfig+0x410>
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f000 be2e 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	21f8      	movs	r1, #248	; 0xf8
 80027ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027d6:	fa91 f1a1 	rbit	r1, r1
 80027da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027e2:	fab1 f181 	clz	r1, r1
 80027e6:	b2c9      	uxtb	r1, r1
 80027e8:	408b      	lsls	r3, r1
 80027ea:	4969      	ldr	r1, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f0:	e0fd      	b.n	80029ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8088 	beq.w	8002914 <HAL_RCC_OscConfig+0x56c>
 8002804:	2301      	movs	r3, #1
 8002806:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002816:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fb8e 	bl	8000f50 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fb89 	bl	8000f50 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	f000 bde2 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002862:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x4d8>
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e013      	b.n	80028a8 <HAL_RCC_OscConfig+0x500>
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002898:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2202      	movs	r2, #2
 80028aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028b2:	fa92 f2a2 	rbit	r2, r2
 80028b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0af      	beq.n	800283a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	21f8      	movs	r1, #248	; 0xf8
 80028f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028f8:	fa91 f1a1 	rbit	r1, r1
 80028fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002900:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002904:	fab1 f181 	clz	r1, r1
 8002908:	b2c9      	uxtb	r1, r1
 800290a:	408b      	lsls	r3, r1
 800290c:	4920      	ldr	r1, [pc, #128]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
 8002912:	e06c      	b.n	80029ee <HAL_RCC_OscConfig+0x646>
 8002914:	2301      	movs	r3, #1
 8002916:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fb06 	bl	8000f50 <HAL_GetTick>
 8002944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294a:	f7fe fb01 	bl	8000f50 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	f000 bd5a 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d104      	bne.n	8002994 <HAL_RCC_OscConfig+0x5ec>
 800298a:	4b01      	ldr	r3, [pc, #4]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x614>
 8002990:	40021000 	.word	0x40021000
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029b8:	4bc8      	ldr	r3, [pc, #800]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2202      	movs	r2, #2
 80029be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029c6:	fa92 f2a2 	rbit	r2, r2
 80029ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f042 0220 	orr.w	r2, r2, #32
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f002 021f 	and.w	r2, r2, #31
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ad      	bne.n	800294a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8110 	beq.w	8002c24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d079      	beq.n	8002b08 <HAL_RCC_OscConfig+0x760>
 8002a14:	2301      	movs	r3, #1
 8002a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4bab      	ldr	r3, [pc, #684]	; (8002ce0 <HAL_RCC_OscConfig+0x938>)
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fa87 	bl	8000f50 <HAL_GetTick>
 8002a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fa82 	bl	8000f50 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d902      	bls.n	8002a5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f000 bcdb 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a78:	2202      	movs	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab8:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	6019      	str	r1, [r3, #0]
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f1a3 	rbit	r1, r3
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ade:	6019      	str	r1, [r3, #0]
  return result;
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0a0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x6a0>
 8002b06:	e08d      	b.n	8002c24 <HAL_RCC_OscConfig+0x87c>
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x938>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2300      	movs	r3, #0
 8002b48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fa01 	bl	8000f50 <HAL_GetTick>
 8002b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe f9fc 	bl	8000f50 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d902      	bls.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f000 bc55 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b96:	2202      	movs	r2, #2
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002be2:	2102      	movs	r1, #2
 8002be4:	6019      	str	r1, [r3, #0]
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	fa93 f1a3 	rbit	r1, r3
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bfc:	6019      	str	r1, [r3, #0]
  return result;
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d197      	bne.n	8002b54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 81a1 	beq.w	8002f7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	61d3      	str	r3, [r2, #28]
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe f95d 	bl	8000f50 <HAL_GetTick>
 8002c96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe f958 	bl	8000f50 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e3b1      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x940>
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a02      	ldr	r2, [pc, #8]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e03c      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	10908120 	.word	0x10908120
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x96a>
 8002cf8:	4bc1      	ldr	r3, [pc, #772]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4ac0      	ldr	r2, [pc, #768]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	4bbe      	ldr	r3, [pc, #760]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4abd      	ldr	r2, [pc, #756]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	e020      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x994>
 8002d22:	4bb7      	ldr	r3, [pc, #732]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4ab6      	ldr	r2, [pc, #728]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4bb4      	ldr	r3, [pc, #720]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4ab3      	ldr	r2, [pc, #716]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002d3c:	4bb0      	ldr	r3, [pc, #704]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4aaf      	ldr	r2, [pc, #700]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	4bad      	ldr	r3, [pc, #692]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4aac      	ldr	r2, [pc, #688]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8081 	beq.w	8002e68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe f8f3 	bl	8000f50 <HAL_GetTick>
 8002d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe f8ee 	bl	8000f50 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e345      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dce:	601a      	str	r2, [r3, #0]
  return result;
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0xa4c>
 8002dee:	4b84      	ldr	r3, [pc, #528]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	e013      	b.n	8002e1c <HAL_RCC_OscConfig+0xa74>
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	4b79      	ldr	r3, [pc, #484]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e24:	2102      	movs	r1, #2
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	fa92 f1a2 	rbit	r1, r2
 8002e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e3e:	6011      	str	r1, [r2, #0]
  return result;
 8002e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f002 021f 	and.w	r2, r2, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d084      	beq.n	8002d70 <HAL_RCC_OscConfig+0x9c8>
 8002e66:	e07f      	b.n	8002f68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe f872 	bl	8000f50 <HAL_GetTick>
 8002e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe f86d 	bl	8000f50 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2c4      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e92:	2202      	movs	r2, #2
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed0:	601a      	str	r2, [r3, #0]
  return result;
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002eda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0xb4e>
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	e013      	b.n	8002f1e <HAL_RCC_OscConfig+0xb76>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002efe:	2202      	movs	r2, #2
 8002f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	fa93 f2a3 	rbit	r2, r3
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f26:	2102      	movs	r1, #2
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	fa92 f1a2 	rbit	r1, r2
 8002f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f40:	6011      	str	r1, [r2, #0]
  return result;
 8002f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f002 021f 	and.w	r2, r2, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d184      	bne.n	8002e72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8242 	beq.w	8003412 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	f000 8213 	beq.w	80033c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	f040 8162 	bne.w	8003272 <HAL_RCC_OscConfig+0xeca>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fd ffac 	bl	8000f50 <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	e00c      	b.n	8003018 <HAL_RCC_OscConfig+0xc70>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fd ffa4 	bl	8000f50 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1fd      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800303c:	601a      	str	r2, [r3, #0]
  return result;
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003046:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0xcba>
 800305c:	4bb0      	ldr	r3, [pc, #704]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e027      	b.n	80030b2 <HAL_RCC_OscConfig+0xd0a>
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800306a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	4b9c      	ldr	r3, [pc, #624]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030be:	6011      	str	r1, [r2, #0]
 80030c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	fa92 f1a2 	rbit	r1, r2
 80030ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030d6:	6011      	str	r1, [r2, #0]
  return result;
 80030d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d182      	bne.n	8003004 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	430b      	orrs	r3, r1
 8003120:	497f      	ldr	r1, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800312e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003154:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fd fef0 	bl	8000f50 <HAL_GetTick>
 8003170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	e009      	b.n	800318a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fd feeb 	bl	8000f50 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e144      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	fa93 f2a3 	rbit	r2, r3
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031ae:	601a      	str	r2, [r3, #0]
  return result;
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe2c>
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e027      	b.n	8003224 <HAL_RCC_OscConfig+0xe7c>
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003228:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800322c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003236:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	fa92 f1a2 	rbit	r1, r2
 8003240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003244:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003248:	6011      	str	r1, [r2, #0]
  return result;
 800324a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d082      	beq.n	8003176 <HAL_RCC_OscConfig+0xdce>
 8003270:	e0cf      	b.n	8003412 <HAL_RCC_OscConfig+0x106a>
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800327a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003296:	601a      	str	r2, [r3, #0]
  return result;
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	2300      	movs	r3, #0
 80032b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fe4a 	bl	8000f50 <HAL_GetTick>
 80032bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fe45 	bl	8000f50 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e09e      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fa:	601a      	str	r2, [r3, #0]
  return result;
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d104      	bne.n	8003324 <HAL_RCC_OscConfig+0xf7c>
 800331a:	4b01      	ldr	r3, [pc, #4]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e029      	b.n	8003374 <HAL_RCC_OscConfig+0xfcc>
 8003320:	40021000 	.word	0x40021000
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800332c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x1078>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003378:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800337c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003386:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	fa92 f1a2 	rbit	r1, r2
 8003390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003394:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003398:	6011      	str	r1, [r2, #0]
  return result;
 800339a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f002 021f 	and.w	r2, r2, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d180      	bne.n	80032c2 <HAL_RCC_OscConfig+0xf1a>
 80033c0:	e027      	b.n	8003412 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01e      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_OscConfig+0x1078>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b09e      	sub	sp, #120	; 0x78
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e162      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b90      	ldr	r3, [pc, #576]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	498b      	ldr	r1, [pc, #556]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e14a      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	497f      	ldr	r1, [pc, #508]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80dc 	beq.w	8003650 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d13c      	bne.n	800351a <HAL_RCC_ClockConfig+0xf6>
 80034a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_ClockConfig+0xa6>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e00f      	b.n	80034ea <HAL_RCC_ClockConfig+0xc6>
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	667b      	str	r3, [r7, #100]	; 0x64
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80034f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f2:	fa92 f2a2 	rbit	r2, r2
 80034f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d17b      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0f3      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d13c      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
 8003522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_ClockConfig+0x128>
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e00f      	b.n	800356c <HAL_RCC_ClockConfig+0x148>
 800354c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
 800355a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003570:	63ba      	str	r2, [r7, #56]	; 0x38
 8003572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003574:	fa92 f2a2 	rbit	r2, r2
 8003578:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800357a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d13a      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b2      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 800359c:	2302      	movs	r3, #2
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e00d      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1bc>
 80035c4:	2302      	movs	r3, #2
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	61ba      	str	r2, [r7, #24]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	fa92 f2a2 	rbit	r2, r2
 80035ea:	617a      	str	r2, [r7, #20]
  return result;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e079      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	491a      	ldr	r1, [pc, #104]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fc96 	bl	8000f50 <HAL_GetTick>
 8003624:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd fc92 	bl	8000f50 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e061      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d214      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4906      	ldr	r1, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e040      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	491a      	ldr	r1, [pc, #104]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4912      	ldr	r1, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036c6:	f000 f829 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	22f0      	movs	r2, #240	; 0xf0
 80036d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	fa92 f2a2 	rbit	r2, r2
 80036de:	60fa      	str	r2, [r7, #12]
  return result;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	40d3      	lsrs	r3, r2
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x2ec>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	fa21 f303 	lsr.w	r3, r1, r3
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x2f0>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_ClockConfig+0x2f4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fbe4 	bl	8000ec8 <HAL_InitTick>
  
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3778      	adds	r7, #120	; 0x78
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	080064f4 	.word	0x080064f4
 8003714:	2000000c 	.word	0x2000000c
 8003718:	20000010 	.word	0x20000010

0800371c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b08b      	sub	sp, #44	; 0x2c
 8003720:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x30>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x36>
 800374a:	e03c      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003758:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800375c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	fa92 f2a2 	rbit	r2, r2
 8003764:	607a      	str	r2, [r7, #4]
  return result;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	40d3      	lsrs	r3, r2
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	220f      	movs	r2, #15
 8003780:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa92 f2a2 	rbit	r2, r2
 8003788:	60fa      	str	r2, [r7, #12]
  return result;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	40d3      	lsrs	r3, r2
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	e004      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	623b      	str	r3, [r7, #32]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037c8:	623b      	str	r3, [r7, #32]
      break;
 80037ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	0800650c 	.word	0x0800650c
 80037e8:	0800651c 	.word	0x0800651c
 80037ec:	003d0900 	.word	0x003d0900

080037f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	2000000c 	.word	0x2000000c

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800380e:	f7ff ffef 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003812:	4601      	mov	r1, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800381c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003820:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	fa92 f2a2 	rbit	r2, r2
 8003828:	603a      	str	r2, [r7, #0]
  return result;
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	40d3      	lsrs	r3, r2
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08006504 	.word	0x08006504

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003852:	f7ff ffcd 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003856:	4601      	mov	r1, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003860:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003864:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	fa92 f2a2 	rbit	r2, r2
 800386c:	603a      	str	r2, [r7, #0]
  return result;
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	40d3      	lsrs	r3, r2
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x40>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08006504 	.word	0x08006504

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b092      	sub	sp, #72	; 0x48
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80cd 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b86      	ldr	r3, [pc, #536]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10e      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4a82      	ldr	r2, [pc, #520]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	61d3      	str	r3, [r2, #28]
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a79      	ldr	r2, [pc, #484]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fb2b 	bl	8000f50 <HAL_GetTick>
 80038fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fd fb27 	bl	8000f50 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d901      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0db      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391c:	4b6c      	ldr	r3, [pc, #432]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d07d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d076      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800398c:	4a50      	ldr	r2, [pc, #320]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d045      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd fad8 	bl	8000f50 <HAL_GetTick>
 80039a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fad4 	bl	8000f50 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e086      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039ba:	2302      	movs	r3, #2
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	2302      	movs	r3, #2
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	61fb      	str	r3, [r7, #28]
  return result;
 80039d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d102      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	e007      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2202      	movs	r2, #2
 8003a00:	613a      	str	r2, [r7, #16]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	60fa      	str	r2, [r7, #12]
  return result;
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f002 021f 	and.w	r2, r2, #31
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0bd      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f023 0210 	bic.w	r2, r3, #16
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4912      	ldr	r1, [pc, #72]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	490b      	ldr	r1, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3748      	adds	r7, #72	; 0x48
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	10908100 	.word	0x10908100

08003adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e095      	b.n	8003c1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d009      	beq.n	8003b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
 8003b06:	e005      	b.n	8003b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd f82a 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b54:	d902      	bls.n	8003b5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Init+0xa0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	ea42 0103 	orr.w	r1, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	0c1b      	lsrs	r3, r3, #16
 8003bd8:	f003 0204 	and.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bf8:	ea42 0103 	orr.w	r1, r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b088      	sub	sp, #32
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_SPI_Transmit+0x22>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e15f      	b.n	8003f04 <HAL_SPI_Transmit+0x2e2>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4c:	f7fd f980 	bl	8000f50 <HAL_GetTick>
 8003c50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c66:	e148      	b.n	8003efa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0x52>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c78:	e13f      	b.n	8003efa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d007      	beq.n	8003d04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d0c:	d94f      	bls.n	8003dae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0xfa>
 8003d16:	8afb      	ldrh	r3, [r7, #22]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d142      	bne.n	8003da2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d40:	e02f      	b.n	8003da2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d112      	bne.n	8003d76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d74:	e015      	b.n	8003da2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d76:	f7fd f8eb 	bl	8000f50 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d803      	bhi.n	8003d8e <HAL_SPI_Transmit+0x16c>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Transmit+0x172>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003da0:	e0ab      	b.n	8003efa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ca      	bne.n	8003d42 <HAL_SPI_Transmit+0x120>
 8003dac:	e080      	b.n	8003eb0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Transmit+0x19a>
 8003db6:	8afb      	ldrh	r3, [r7, #22]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d174      	bne.n	8003ea6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d912      	bls.n	8003dec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	1c9a      	adds	r2, r3, #2
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b02      	subs	r3, #2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dea:	e05c      	b.n	8003ea6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e12:	e048      	b.n	8003ea6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d12b      	bne.n	8003e7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d912      	bls.n	8003e52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b02      	subs	r3, #2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e50:	e029      	b.n	8003ea6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e78:	e015      	b.n	8003ea6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e7a:	f7fd f869 	bl	8000f50 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d803      	bhi.n	8003e92 <HAL_SPI_Transmit+0x270>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d102      	bne.n	8003e98 <HAL_SPI_Transmit+0x276>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ea4:	e029      	b.n	8003efa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1b1      	bne.n	8003e14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fd75 	bl	80049a4 <SPI_EndRxTxTransaction>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e003      	b.n	8003efa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f2e:	e090      	b.n	8004052 <HAL_SPI_Receive_IT+0x146>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d110      	bne.n	8003f5a <HAL_SPI_Receive_IT+0x4e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f40:	d10b      	bne.n	8003f5a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2204      	movs	r2, #4
 8003f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f88b 	bl	800406c <HAL_SPI_TransmitReceive_IT>
 8003f56:	4603      	mov	r3, r0
 8003f58:	e080      	b.n	800405c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_SPI_Receive_IT+0x5c>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e079      	b.n	800405c <HAL_SPI_Receive_IT+0x150>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Receive_IT+0x70>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f80:	e067      	b.n	8004052 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2204      	movs	r2, #4
 8003f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc6:	d90b      	bls.n	8003fe0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <HAL_SPI_Receive_IT+0x158>)
 8003fdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fde:	e00a      	b.n	8003ff6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fee:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_SPI_Receive_IT+0x15c>)
 8003ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffe:	d10f      	bne.n	8004020 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800401e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800402e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d008      	beq.n	8004050 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e000      	b.n	8004052 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004050:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	0800466d 	.word	0x0800466d
 8004068:	0800461d 	.word	0x0800461d

0800406c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_SPI_TransmitReceive_IT+0x20>
 8004088:	2302      	movs	r3, #2
 800408a:	e091      	b.n	80041b0 <HAL_SPI_TransmitReceive_IT+0x144>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800409a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a2:	7dbb      	ldrb	r3, [r7, #22]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00d      	beq.n	80040c4 <HAL_SPI_TransmitReceive_IT+0x58>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ae:	d106      	bne.n	80040be <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_SPI_TransmitReceive_IT+0x52>
 80040b8:	7dbb      	ldrb	r3, [r7, #22]
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d002      	beq.n	80040c4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80040be:	2302      	movs	r3, #2
 80040c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040c2:	e070      	b.n	80041a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040da:	e064      	b.n	80041a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d003      	beq.n	80040f0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2205      	movs	r2, #5
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	887a      	ldrh	r2, [r7, #2]
 800411a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004126:	d906      	bls.n	8004136 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <HAL_SPI_TransmitReceive_IT+0x150>)
 800412c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004132:	651a      	str	r2, [r3, #80]	; 0x50
 8004134:	e005      	b.n	8004142 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800413a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004140:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800414a:	d802      	bhi.n	8004152 <HAL_SPI_TransmitReceive_IT+0xe6>
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d908      	bls.n	8004164 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e007      	b.n	8004174 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004182:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d008      	beq.n	80041a4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e000      	b.n	80041a6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80041a4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	08004557 	.word	0x08004557
 80041c0:	080045bd 	.word	0x080045bd
 80041c4:	08004407 	.word	0x08004407
 80041c8:	080044c5 	.word	0x080044c5

080041cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10e      	bne.n	800420c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
    return;
 800420a:	e0ce      	b.n	80043aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_SPI_IRQHandler+0x5e>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
    return;
 8004228:	e0bf      	b.n	80043aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_SPI_IRQHandler+0x7e>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b0 	beq.w	80043aa <HAL_SPI_IRQHandler+0x1de>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80aa 	beq.w	80043aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d023      	beq.n	80042a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b03      	cmp	r3, #3
 800426a:	d011      	beq.n	8004290 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	e00b      	b.n	80042a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
        return;
 80042a6:	e080      	b.n	80043aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d014      	beq.n	80042dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ea:	f043 0208 	orr.w	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004304:	2b00      	cmp	r3, #0
 8004306:	d04f      	beq.n	80043a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004316:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_SPI_IRQHandler+0x168>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d034      	beq.n	800439e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0203 	bic.w	r2, r2, #3
 8004342:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	2b00      	cmp	r3, #0
 800434a:	d011      	beq.n	8004370 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_SPI_IRQHandler+0x1e4>)
 8004352:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc ff73 	bl	8001244 <HAL_DMA_Abort_IT>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <HAL_SPI_IRQHandler+0x1e4>)
 800437e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc ff5d 	bl	8001244 <HAL_DMA_Abort_IT>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800439c:	e003      	b.n	80043a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f812 	bl	80043c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043a4:	e000      	b.n	80043a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80043a6:	bf00      	nop
    return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	080043dd 	.word	0x080043dd

080043b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ffe5 	bl	80043c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d923      	bls.n	8004462 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	b292      	uxth	r2, r2
 8004426:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b02      	subs	r3, #2
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11f      	bne.n	8004490 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	e016      	b.n	8004490 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f103 020c 	add.w	r2, r3, #12
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10f      	bne.n	80044bc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 faba 	bl	8004a30 <SPI_CloseRxTx_ISR>
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d912      	bls.n	80044fc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b02      	subs	r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fa:	e012      	b.n	8004522 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800453a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa71 	bl	8004a30 <SPI_CloseRxTx_ISR>
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	b292      	uxth	r2, r2
 800456a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa3e 	bl	8004a30 <SPI_CloseRxTx_ISR>
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d110      	bne.n	8004614 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004600:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa0e 	bl	8004a30 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f103 020c 	add.w	r2, r3, #12
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa28 	bl	8004ab4 <SPI_CloseRx_ISR>
  }
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	b292      	uxth	r2, r2
 8004680:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa02 	bl	8004ab4 <SPI_CloseRx_ISR>
  }
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c8:	f7fc fc42 	bl	8000f50 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d8:	f7fc fc3a 	bl	8000f50 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	e054      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f6:	d050      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f8:	f7fc fc2a 	bl	8000f50 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e017      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d19b      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c

080047c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047da:	f7fc fbb9 	bl	8000f50 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80047ea:	f7fc fbb1 	bl	8000f50 <HAL_GetTick>
 80047ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047f8:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00da      	lsls	r2, r3, #3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	0d1b      	lsrs	r3, r3, #20
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004810:	e060      	b.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004818:	d107      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004828:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d050      	beq.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004832:	f7fc fb8d 	bl	8000f50 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13d      	bne.n	80048c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d111      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d004      	beq.n	8004876 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d107      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d10f      	bne.n	80048b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e010      	b.n	80048e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d196      	bne.n	8004812 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3728      	adds	r7, #40	; 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004908:	d111      	bne.n	800492e <SPI_EndRxTransaction+0x3a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004912:	d004      	beq.n	800491e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d107      	bne.n	800492e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff febd 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e023      	b.n	800499c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800495c:	d11d      	bne.n	800499a <SPI_EndRxTransaction+0xa6>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004966:	d004      	beq.n	8004972 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004970:	d113      	bne.n	800499a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff22 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e000      	b.n	800499c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff03 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e027      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fe68 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e014      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fedc 	bl	80047c8 <SPI_WaitFifoStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a38:	f7fc fa8a 	bl	8000f50 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0220 	bic.w	r2, r2, #32
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	2164      	movs	r1, #100	; 0x64
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa6 	bl	80049a4 <SPI_EndRxTxTransaction>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d115      	bne.n	8004a9e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d107      	bne.n	8004a8e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fb ffc4 	bl	8000a14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004a8c:	e00e      	b.n	8004aac <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fc8c 	bl	80043b4 <HAL_SPI_TxRxCpltCallback>
}
 8004a9c:	e006      	b.n	8004aac <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fc8e 	bl	80043c8 <HAL_SPI_ErrorCallback>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aca:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004acc:	f7fc fa40 	bl	8000f50 <HAL_GetTick>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2164      	movs	r1, #100	; 0x64
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff0c 	bl	80048f4 <SPI_EndRxTransaction>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fb ff88 	bl	8000a14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004b04:	e002      	b.n	8004b0c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fc5e 	bl	80043c8 <HAL_SPI_ErrorCallback>
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e049      	b.n	8004bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc f880 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f000 f9da 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e040      	b.n	8004c5e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIM_Base_Start_IT+0xa8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x58>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x58>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_TIM_Base_Start_IT+0xac>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x58>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d115      	bne.n	8004c48 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d015      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x96>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d011      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	e008      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	00010007 	.word	0x00010007

08004c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0202 	mvn.w	r2, #2
 8004ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f905 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8f7 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f908 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d122      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d11b      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8db 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8cd 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8de 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d122      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d11b      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0208 	mvn.w	r2, #8
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2204      	movs	r2, #4
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8b1 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8a3 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8b4 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d122      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0210 	mvn.w	r2, #16
 8004da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2208      	movs	r2, #8
 8004daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f887 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f879 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f88a 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0201 	mvn.w	r2, #1
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb fc9e 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8f2 	bl	8005010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8e5 	bl	8005024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f838 	bl	8004ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d10e      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0220 	mvn.w	r2, #32
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8a5 	bl	8004ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <TIM_Base_SetConfig+0xdc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x28>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x28>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <TIM_Base_SetConfig+0xe0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <TIM_Base_SetConfig+0xdc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_Base_SetConfig+0x6a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d00f      	beq.n	8004f76 <TIM_Base_SetConfig+0x6a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <TIM_Base_SetConfig+0xe0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_Base_SetConfig+0x6a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <TIM_Base_SetConfig+0xe4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_Base_SetConfig+0x6a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <TIM_Base_SetConfig+0xe8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_Base_SetConfig+0x6a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <TIM_Base_SetConfig+0xec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <TIM_Base_SetConfig+0xdc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0xc0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <TIM_Base_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0xc0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <TIM_Base_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0xc0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <TIM_Base_SetConfig+0xec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	615a      	str	r2, [r3, #20]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e040      	b.n	80050cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fe32 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc00 	bl	800587c <UART_SetConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e022      	b.n	80050cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd2a 	bl	8005ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fdb1 	bl	8005c2c <UART_CheckIdleState>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d178      	bne.n	80051de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Transmit+0x24>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e071      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2221      	movs	r2, #33	; 0x21
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510a:	f7fb ff21 	bl	8000f50 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d108      	bne.n	800513c <HAL_UART_Transmit+0x68>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e003      	b.n	8005144 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005144:	e030      	b.n	80051a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fe13 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e03c      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	b292      	uxth	r2, r2
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	3302      	adds	r3, #2
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e008      	b.n	8005196 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	b292      	uxth	r2, r2
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1c8      	bne.n	8005146 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2140      	movs	r1, #64	; 0x40
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fddc 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e005      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d132      	bne.n	8005266 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Receive_IT+0x24>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e02b      	b.n	8005268 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d018      	beq.n	8005256 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	461a      	mov	r2, r3
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fdf5 	bl	8005e4c <UART_Start_Receive_IT>
 8005262:	4603      	mov	r3, r0
 8005264:	e000      	b.n	8005268 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b0ba      	sub	sp, #232	; 0xe8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005296:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800529a:	f640 030f 	movw	r3, #2063	; 0x80f
 800529e:	4013      	ands	r3, r2
 80052a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d115      	bne.n	80052d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 82ab 	beq.w	8005824 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
      }
      return;
 80052d6:	e2a5      	b.n	8005824 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8117 	beq.w	8005510 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052f2:	4b85      	ldr	r3, [pc, #532]	; (8005508 <HAL_UART_IRQHandler+0x298>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 810a 	beq.w	8005510 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d011      	beq.n	800532c <HAL_UART_IRQHandler+0xbc>
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2201      	movs	r2, #1
 800531a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d011      	beq.n	800535c <HAL_UART_IRQHandler+0xec>
 8005338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2202      	movs	r2, #2
 800534a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	f043 0204 	orr.w	r2, r3, #4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d011      	beq.n	800538c <HAL_UART_IRQHandler+0x11c>
 8005368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2204      	movs	r2, #4
 800537a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005382:	f043 0202 	orr.w	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053be:	f043 0208 	orr.w	r2, r3, #8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <HAL_UART_IRQHandler+0x18a>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8211 	beq.w	8005828 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800544a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04f      	beq.n	80054f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fdc0 	bl	8005fd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d141      	bne.n	80054ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3308      	adds	r3, #8
 800546c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800547c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3308      	adds	r3, #8
 800548e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005492:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800549e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1d9      	bne.n	8005466 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d013      	beq.n	80054e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <HAL_UART_IRQHandler+0x29c>)
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb febc 	bl	8001244 <HAL_DMA_Abort_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e00f      	b.n	8005502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9b4 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	e00b      	b.n	8005502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9b0 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e007      	b.n	8005502 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9ac 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005500:	e192      	b.n	8005828 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005502:	bf00      	nop
    return;
 8005504:	e190      	b.n	8005828 <HAL_UART_IRQHandler+0x5b8>
 8005506:	bf00      	nop
 8005508:	04000120 	.word	0x04000120
 800550c:	080060a1 	.word	0x080060a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	2b01      	cmp	r3, #1
 8005516:	f040 814b 	bne.w	80057b0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8144 	beq.w	80057b0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 813d 	beq.w	80057b0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	f040 80b5 	bne.w	80056b8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800555a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8164 	beq.w	800582c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800556a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800556e:	429a      	cmp	r2, r3
 8005570:	f080 815c 	bcs.w	800582c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b20      	cmp	r3, #32
 8005586:	f000 8086 	beq.w	8005696 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800559e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1da      	bne.n	800558a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005600:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800560a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e1      	bne.n	80055d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005634:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800563a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e3      	bne.n	8005610 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005678:	65bb      	str	r3, [r7, #88]	; 0x58
 800567a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800567e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e4      	bne.n	8005656 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005690:	4618      	mov	r0, r3
 8005692:	f7fb fd9e 	bl	80011d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f8d7 	bl	8005864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056b6:	e0b9      	b.n	800582c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80ab 	beq.w	8005830 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80056da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80a6 	beq.w	8005830 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800570c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e4      	bne.n	80056e4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	623b      	str	r3, [r7, #32]
   return(result);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800573e:	633a      	str	r2, [r7, #48]	; 0x30
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	60fb      	str	r3, [r7, #12]
   return(result);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	617b      	str	r3, [r7, #20]
   return(result);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e4      	bne.n	8005766 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f85b 	bl	8005864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ae:	e03f      	b.n	8005830 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <HAL_UART_IRQHandler+0x56a>
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe4c 	bl	8006470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d8:	e02d      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01c      	beq.n	8005834 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
    }
    return;
 8005802:	e017      	b.n	8005834 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <HAL_UART_IRQHandler+0x5c6>
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fc55 	bl	80060cc <UART_EndTransmit_IT>
    return;
 8005822:	e008      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005824:	bf00      	nop
 8005826:	e006      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005828:	bf00      	nop
 800582a:	e004      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
      return;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005834:	bf00      	nop
  }

}
 8005836:	37e8      	adds	r7, #232	; 0xe8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b8a      	ldr	r3, [pc, #552]	; (8005ad0 <UART_SetConfig+0x254>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a78      	ldr	r2, [pc, #480]	; (8005ad4 <UART_SetConfig+0x258>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d120      	bne.n	800593a <UART_SetConfig+0xbe>
 80058f8:	4b77      	ldr	r3, [pc, #476]	; (8005ad8 <UART_SetConfig+0x25c>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d817      	bhi.n	8005934 <UART_SetConfig+0xb8>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <UART_SetConfig+0x90>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005929 	.word	0x08005929
 8005914:	0800592f 	.word	0x0800592f
 8005918:	08005923 	.word	0x08005923
 800591c:	2300      	movs	r3, #0
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e01d      	b.n	800595e <UART_SetConfig+0xe2>
 8005922:	2302      	movs	r3, #2
 8005924:	77fb      	strb	r3, [r7, #31]
 8005926:	e01a      	b.n	800595e <UART_SetConfig+0xe2>
 8005928:	2304      	movs	r3, #4
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e017      	b.n	800595e <UART_SetConfig+0xe2>
 800592e:	2308      	movs	r3, #8
 8005930:	77fb      	strb	r3, [r7, #31]
 8005932:	e014      	b.n	800595e <UART_SetConfig+0xe2>
 8005934:	2310      	movs	r3, #16
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e011      	b.n	800595e <UART_SetConfig+0xe2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a67      	ldr	r2, [pc, #412]	; (8005adc <UART_SetConfig+0x260>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d102      	bne.n	800594a <UART_SetConfig+0xce>
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e009      	b.n	800595e <UART_SetConfig+0xe2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a64      	ldr	r2, [pc, #400]	; (8005ae0 <UART_SetConfig+0x264>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d102      	bne.n	800595a <UART_SetConfig+0xde>
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e001      	b.n	800595e <UART_SetConfig+0xe2>
 800595a:	2310      	movs	r3, #16
 800595c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d15a      	bne.n	8005a1e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005968:	7ffb      	ldrb	r3, [r7, #31]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d827      	bhi.n	80059be <UART_SetConfig+0x142>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0xf8>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005999 	.word	0x08005999
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a9 	.word	0x080059a9
 8005980:	080059bf 	.word	0x080059bf
 8005984:	080059af 	.word	0x080059af
 8005988:	080059bf 	.word	0x080059bf
 800598c:	080059bf 	.word	0x080059bf
 8005990:	080059bf 	.word	0x080059bf
 8005994:	080059b7 	.word	0x080059b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005998:	f7fd ff36 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800599c:	61b8      	str	r0, [r7, #24]
        break;
 800599e:	e013      	b.n	80059c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7fd ff54 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80059a4:	61b8      	str	r0, [r7, #24]
        break;
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <UART_SetConfig+0x268>)
 80059aa:	61bb      	str	r3, [r7, #24]
        break;
 80059ac:	e00c      	b.n	80059c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ae:	f7fd feb5 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80059b2:	61b8      	str	r0, [r7, #24]
        break;
 80059b4:	e008      	b.n	80059c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ba:	61bb      	str	r3, [r7, #24]
        break;
 80059bc:	e004      	b.n	80059c8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	77bb      	strb	r3, [r7, #30]
        break;
 80059c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d074      	beq.n	8005ab8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	005a      	lsls	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	441a      	add	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d916      	bls.n	8005a18 <UART_SetConfig+0x19c>
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f0:	d212      	bcs.n	8005a18 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f023 030f 	bic.w	r3, r3, #15
 80059fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	89fa      	ldrh	r2, [r7, #14]
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	e04f      	b.n	8005ab8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	77bb      	strb	r3, [r7, #30]
 8005a1c:	e04c      	b.n	8005ab8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a1e:	7ffb      	ldrb	r3, [r7, #31]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d828      	bhi.n	8005a76 <UART_SetConfig+0x1fa>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x1b0>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fd feda 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005a54:	61b8      	str	r0, [r7, #24]
        break;
 8005a56:	e013      	b.n	8005a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fd fef8 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005a5c:	61b8      	str	r0, [r7, #24]
        break;
 8005a5e:	e00f      	b.n	8005a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <UART_SetConfig+0x268>)
 8005a62:	61bb      	str	r3, [r7, #24]
        break;
 8005a64:	e00c      	b.n	8005a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fd fe59 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8005a6a:	61b8      	str	r0, [r7, #24]
        break;
 8005a6c:	e008      	b.n	8005a80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a72:	61bb      	str	r3, [r7, #24]
        break;
 8005a74:	e004      	b.n	8005a80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	085a      	lsrs	r2, r3, #1
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	441a      	add	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b0f      	cmp	r3, #15
 8005a9e:	d909      	bls.n	8005ab4 <UART_SetConfig+0x238>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa6:	d205      	bcs.n	8005ab4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e001      	b.n	8005ab8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ac4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	efff69f3 	.word	0xefff69f3
 8005ad4:	40013800 	.word	0x40013800
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40004400 	.word	0x40004400
 8005ae0:	40004800 	.word	0x40004800
 8005ae4:	007a1200 	.word	0x007a1200

08005ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be6:	d10a      	bne.n	8005bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b098      	sub	sp, #96	; 0x60
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c3c:	f7fb f988 	bl	8000f50 <HAL_GetTick>
 8005c40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d12e      	bne.n	8005cae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f88c 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d021      	beq.n	8005cae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e6      	bne.n	8005c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e062      	b.n	8005d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d149      	bne.n	8005d50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f856 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03c      	beq.n	8005d50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e6      	bne.n	8005cd6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d28:	61fa      	str	r2, [r7, #28]
 8005d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	617b      	str	r3, [r7, #20]
   return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e5      	bne.n	8005d08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e011      	b.n	8005d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3758      	adds	r7, #88	; 0x58
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	e049      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d94:	d045      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d96:	f7fb f8db 	bl	8000f50 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e048      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d031      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d110      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f8ff 	bl	8005fd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e029      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfc:	d111      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f8e5 	bl	8005fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e00f      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	bf0c      	ite	eq
 8005e32:	2301      	moveq	r3, #1
 8005e34:	2300      	movne	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d0a6      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b097      	sub	sp, #92	; 0x5c
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	88fa      	ldrh	r2, [r7, #6]
 8005e64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	88fa      	ldrh	r2, [r7, #6]
 8005e6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d10e      	bne.n	8005e9e <UART_Start_Receive_IT+0x52>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <UART_Start_Receive_IT+0x48>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e92:	e02d      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e9c:	e028      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <UART_Start_Receive_IT+0x76>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <UART_Start_Receive_IT+0x6c>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb6:	e01b      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	227f      	movs	r2, #127	; 0x7f
 8005ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ec0:	e016      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eca:	d10d      	bne.n	8005ee8 <UART_Start_Receive_IT+0x9c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <UART_Start_Receive_IT+0x92>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	227f      	movs	r2, #127	; 0x7f
 8005ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005edc:	e008      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	223f      	movs	r2, #63	; 0x3f
 8005ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee6:	e003      	b.n	8005ef0 <UART_Start_Receive_IT+0xa4>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2222      	movs	r2, #34	; 0x22
 8005efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f20:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d107      	bne.n	8005f4e <UART_Start_Receive_IT+0x102>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <UART_Start_Receive_IT+0x184>)
 8005f4a:	669a      	str	r2, [r3, #104]	; 0x68
 8005f4c:	e002      	b.n	8005f54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a20      	ldr	r2, [pc, #128]	; (8005fd4 <UART_Start_Receive_IT+0x188>)
 8005f52:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d019      	beq.n	8005f90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_Start_Receive_IT+0x110>
 8005f8e:	e018      	b.n	8005fc2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f043 0320 	orr.w	r3, r3, #32
 8005fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fae:	623b      	str	r3, [r7, #32]
 8005fb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	375c      	adds	r7, #92	; 0x5c
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	080062c9 	.word	0x080062c9
 8005fd4:	08006121 	.word	0x08006121

08005fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b095      	sub	sp, #84	; 0x54
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8006000:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e6      	bne.n	8005fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	61fb      	str	r3, [r7, #28]
   return(result);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	64bb      	str	r3, [r7, #72]	; 0x48
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e5      	bne.n	8006012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604a:	2b01      	cmp	r3, #1
 800604c:	d118      	bne.n	8006080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	60bb      	str	r3, [r7, #8]
   return(result);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f023 0310 	bic.w	r3, r3, #16
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6979      	ldr	r1, [r7, #20]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	613b      	str	r3, [r7, #16]
   return(result);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e6      	bne.n	800604e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006094:	bf00      	nop
 8006096:	3754      	adds	r7, #84	; 0x54
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fbc6 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e6      	bne.n	80060d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fb92 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006118:	bf00      	nop
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b09c      	sub	sp, #112	; 0x70
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800612e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006138:	2b22      	cmp	r3, #34	; 0x22
 800613a:	f040 80b9 	bne.w	80062b0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006148:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800614c:	b2d9      	uxtb	r1, r3
 800614e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006152:	b2da      	uxtb	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	400a      	ands	r2, r1
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 809c 	bne.w	80062c0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800619c:	66bb      	str	r3, [r7, #104]	; 0x68
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80061a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e6      	bne.n	8006188 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	667b      	str	r3, [r7, #100]	; 0x64
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061da:	647a      	str	r2, [r7, #68]	; 0x44
 80061dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e5      	bne.n	80061ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d018      	beq.n	8006242 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	623b      	str	r3, [r7, #32]
   return(result);
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006224:	663b      	str	r3, [r7, #96]	; 0x60
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
 8006230:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e6      	bne.n	8006210 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006246:	2b01      	cmp	r3, #1
 8006248:	d12e      	bne.n	80062a8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	60fb      	str	r3, [r7, #12]
   return(result);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	617b      	str	r3, [r7, #20]
   return(result);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e6      	bne.n	8006250 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d103      	bne.n	8006298 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2210      	movs	r2, #16
 8006296:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fadf 	bl	8005864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062a6:	e00b      	b.n	80062c0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fa fb7f 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80062ae:	e007      	b.n	80062c0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0208 	orr.w	r2, r2, #8
 80062be:	619a      	str	r2, [r3, #24]
}
 80062c0:	bf00      	nop
 80062c2:	3770      	adds	r7, #112	; 0x70
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b09c      	sub	sp, #112	; 0x70
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e0:	2b22      	cmp	r3, #34	; 0x22
 80062e2:	f040 80b9 	bne.w	8006458 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80062fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062fe:	4013      	ands	r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006304:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 809c 	bne.w	8006468 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800633e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006344:	667b      	str	r3, [r7, #100]	; 0x64
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634e:	657b      	str	r3, [r7, #84]	; 0x54
 8006350:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e6      	bne.n	8006330 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	663b      	str	r3, [r7, #96]	; 0x60
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006382:	643a      	str	r2, [r7, #64]	; 0x40
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d018      	beq.n	80063ea <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e6      	bne.n	80063b8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d12e      	bne.n	8006450 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60bb      	str	r3, [r7, #8]
   return(result);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	65bb      	str	r3, [r7, #88]	; 0x58
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6979      	ldr	r1, [r7, #20]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e6      	bne.n	80063f8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d103      	bne.n	8006440 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2210      	movs	r2, #16
 800643e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fa0b 	bl	8005864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800644e:	e00b      	b.n	8006468 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fa faab 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 8006456:	e007      	b.n	8006468 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0208 	orr.w	r2, r2, #8
 8006466:	619a      	str	r2, [r3, #24]
}
 8006468:	bf00      	nop
 800646a:	3770      	adds	r7, #112	; 0x70
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <memset>:
 8006484:	4402      	add	r2, r0
 8006486:	4603      	mov	r3, r0
 8006488:	4293      	cmp	r3, r2
 800648a:	d100      	bne.n	800648e <memset+0xa>
 800648c:	4770      	bx	lr
 800648e:	f803 1b01 	strb.w	r1, [r3], #1
 8006492:	e7f9      	b.n	8006488 <memset+0x4>

08006494 <__libc_init_array>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4d0d      	ldr	r5, [pc, #52]	; (80064cc <__libc_init_array+0x38>)
 8006498:	4c0d      	ldr	r4, [pc, #52]	; (80064d0 <__libc_init_array+0x3c>)
 800649a:	1b64      	subs	r4, r4, r5
 800649c:	10a4      	asrs	r4, r4, #2
 800649e:	2600      	movs	r6, #0
 80064a0:	42a6      	cmp	r6, r4
 80064a2:	d109      	bne.n	80064b8 <__libc_init_array+0x24>
 80064a4:	4d0b      	ldr	r5, [pc, #44]	; (80064d4 <__libc_init_array+0x40>)
 80064a6:	4c0c      	ldr	r4, [pc, #48]	; (80064d8 <__libc_init_array+0x44>)
 80064a8:	f000 f818 	bl	80064dc <_init>
 80064ac:	1b64      	subs	r4, r4, r5
 80064ae:	10a4      	asrs	r4, r4, #2
 80064b0:	2600      	movs	r6, #0
 80064b2:	42a6      	cmp	r6, r4
 80064b4:	d105      	bne.n	80064c2 <__libc_init_array+0x2e>
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064bc:	4798      	blx	r3
 80064be:	3601      	adds	r6, #1
 80064c0:	e7ee      	b.n	80064a0 <__libc_init_array+0xc>
 80064c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c6:	4798      	blx	r3
 80064c8:	3601      	adds	r6, #1
 80064ca:	e7f2      	b.n	80064b2 <__libc_init_array+0x1e>
 80064cc:	0800652c 	.word	0x0800652c
 80064d0:	0800652c 	.word	0x0800652c
 80064d4:	0800652c 	.word	0x0800652c
 80064d8:	08006530 	.word	0x08006530

080064dc <_init>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	bf00      	nop
 80064e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e2:	bc08      	pop	{r3}
 80064e4:	469e      	mov	lr, r3
 80064e6:	4770      	bx	lr

080064e8 <_fini>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	bf00      	nop
 80064ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ee:	bc08      	pop	{r3}
 80064f0:	469e      	mov	lr, r3
 80064f2:	4770      	bx	lr
